'------------------------------------------------------------------------------
' <auto-generated>
'     Этот код создан программой.
'     Исполняемая версия:4.0.30319.431
'
'     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
'     повторной генерации кода.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("BondsDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class BondsDataSet
    Inherits Global.System.Data.DataSet
    
    Private tablebond As bondDataTable
    
    Private tableportfolio As portfolioDataTable
    
    Private tablechain_items As chain_itemsDataTable
    
    Private tablechain As chainDataTable
    
    Private tablecountry As countryDataTable
    
    Private tablecurrency As currencyDataTable
    
    Private tableissuer As issuerDataTable
    
    Private tablePortfolioUnited As PortfolioUnitedDataTable
    
    Private tablesettings As settingsDataTable
    
    Private tableBondDescriptions As BondDescriptionsDataTable
    
    Private tablehawser As hawserDataTable
    
    Private tableHawserData As HawserDataDataTable
    
    Private tablehawser_to_bond As hawser_to_bondDataTable
    
    Private table_portfolioByBonds As _portfolioByBondsDataTable
    
    Private table_portfolioByChain As _portfolioByChainDataTable
    
    Private table_portfolioByHawser As _portfolioByHawserDataTable
    
    Private tableChainsInPortfolio As ChainsInPortfolioDataTable
    
    Private tableHawsersInPortfolio As HawsersInPortfolioDataTable
    
    Private tableportfolio_to_bond As portfolio_to_bondDataTable
    
    Private tableportfolio_to_chain As portfolio_to_chainDataTable
    
    Private tableportfolio_to_hawser As portfolio_to_hawserDataTable
    
    Private tablePortfolioSources As PortfolioSourcesDataTable
    
    Private table_ricsInChain As _ricsInChainDataTable
    
    Private table_ricsInHawser As _ricsInHawserDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("bond")) Is Nothing) Then
                MyBase.Tables.Add(New bondDataTable(ds.Tables("bond")))
            End If
            If (Not (ds.Tables("portfolio")) Is Nothing) Then
                MyBase.Tables.Add(New portfolioDataTable(ds.Tables("portfolio")))
            End If
            If (Not (ds.Tables("chain_items")) Is Nothing) Then
                MyBase.Tables.Add(New chain_itemsDataTable(ds.Tables("chain_items")))
            End If
            If (Not (ds.Tables("chain")) Is Nothing) Then
                MyBase.Tables.Add(New chainDataTable(ds.Tables("chain")))
            End If
            If (Not (ds.Tables("country")) Is Nothing) Then
                MyBase.Tables.Add(New countryDataTable(ds.Tables("country")))
            End If
            If (Not (ds.Tables("currency")) Is Nothing) Then
                MyBase.Tables.Add(New currencyDataTable(ds.Tables("currency")))
            End If
            If (Not (ds.Tables("issuer")) Is Nothing) Then
                MyBase.Tables.Add(New issuerDataTable(ds.Tables("issuer")))
            End If
            If (Not (ds.Tables("PortfolioUnited")) Is Nothing) Then
                MyBase.Tables.Add(New PortfolioUnitedDataTable(ds.Tables("PortfolioUnited")))
            End If
            If (Not (ds.Tables("settings")) Is Nothing) Then
                MyBase.Tables.Add(New settingsDataTable(ds.Tables("settings")))
            End If
            If (Not (ds.Tables("BondDescriptions")) Is Nothing) Then
                MyBase.Tables.Add(New BondDescriptionsDataTable(ds.Tables("BondDescriptions")))
            End If
            If (Not (ds.Tables("hawser")) Is Nothing) Then
                MyBase.Tables.Add(New hawserDataTable(ds.Tables("hawser")))
            End If
            If (Not (ds.Tables("HawserData")) Is Nothing) Then
                MyBase.Tables.Add(New HawserDataDataTable(ds.Tables("HawserData")))
            End If
            If (Not (ds.Tables("hawser_to_bond")) Is Nothing) Then
                MyBase.Tables.Add(New hawser_to_bondDataTable(ds.Tables("hawser_to_bond")))
            End If
            If (Not (ds.Tables("_portfolioByBonds")) Is Nothing) Then
                MyBase.Tables.Add(New _portfolioByBondsDataTable(ds.Tables("_portfolioByBonds")))
            End If
            If (Not (ds.Tables("_portfolioByChain")) Is Nothing) Then
                MyBase.Tables.Add(New _portfolioByChainDataTable(ds.Tables("_portfolioByChain")))
            End If
            If (Not (ds.Tables("_portfolioByHawser")) Is Nothing) Then
                MyBase.Tables.Add(New _portfolioByHawserDataTable(ds.Tables("_portfolioByHawser")))
            End If
            If (Not (ds.Tables("ChainsInPortfolio")) Is Nothing) Then
                MyBase.Tables.Add(New ChainsInPortfolioDataTable(ds.Tables("ChainsInPortfolio")))
            End If
            If (Not (ds.Tables("HawsersInPortfolio")) Is Nothing) Then
                MyBase.Tables.Add(New HawsersInPortfolioDataTable(ds.Tables("HawsersInPortfolio")))
            End If
            If (Not (ds.Tables("portfolio_to_bond")) Is Nothing) Then
                MyBase.Tables.Add(New portfolio_to_bondDataTable(ds.Tables("portfolio_to_bond")))
            End If
            If (Not (ds.Tables("portfolio_to_chain")) Is Nothing) Then
                MyBase.Tables.Add(New portfolio_to_chainDataTable(ds.Tables("portfolio_to_chain")))
            End If
            If (Not (ds.Tables("portfolio_to_hawser")) Is Nothing) Then
                MyBase.Tables.Add(New portfolio_to_hawserDataTable(ds.Tables("portfolio_to_hawser")))
            End If
            If (Not (ds.Tables("PortfolioSources")) Is Nothing) Then
                MyBase.Tables.Add(New PortfolioSourcesDataTable(ds.Tables("PortfolioSources")))
            End If
            If (Not (ds.Tables("_ricsInChain")) Is Nothing) Then
                MyBase.Tables.Add(New _ricsInChainDataTable(ds.Tables("_ricsInChain")))
            End If
            If (Not (ds.Tables("_ricsInHawser")) Is Nothing) Then
                MyBase.Tables.Add(New _ricsInHawserDataTable(ds.Tables("_ricsInHawser")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bond() As bondDataTable
        Get
            Return Me.tablebond
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property portfolio() As portfolioDataTable
        Get
            Return Me.tableportfolio
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property chain_items() As chain_itemsDataTable
        Get
            Return Me.tablechain_items
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property chain() As chainDataTable
        Get
            Return Me.tablechain
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property country() As countryDataTable
        Get
            Return Me.tablecountry
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property currency() As currencyDataTable
        Get
            Return Me.tablecurrency
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property issuer() As issuerDataTable
        Get
            Return Me.tableissuer
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PortfolioUnited() As PortfolioUnitedDataTable
        Get
            Return Me.tablePortfolioUnited
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property settings() As settingsDataTable
        Get
            Return Me.tablesettings
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BondDescriptions() As BondDescriptionsDataTable
        Get
            Return Me.tableBondDescriptions
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property hawser() As hawserDataTable
        Get
            Return Me.tablehawser
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property HawserData() As HawserDataDataTable
        Get
            Return Me.tableHawserData
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property hawser_to_bond() As hawser_to_bondDataTable
        Get
            Return Me.tablehawser_to_bond
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _portfolioByBonds() As _portfolioByBondsDataTable
        Get
            Return Me.table_portfolioByBonds
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _portfolioByChain() As _portfolioByChainDataTable
        Get
            Return Me.table_portfolioByChain
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _portfolioByHawser() As _portfolioByHawserDataTable
        Get
            Return Me.table_portfolioByHawser
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ChainsInPortfolio() As ChainsInPortfolioDataTable
        Get
            Return Me.tableChainsInPortfolio
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property HawsersInPortfolio() As HawsersInPortfolioDataTable
        Get
            Return Me.tableHawsersInPortfolio
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property portfolio_to_bond() As portfolio_to_bondDataTable
        Get
            Return Me.tableportfolio_to_bond
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property portfolio_to_chain() As portfolio_to_chainDataTable
        Get
            Return Me.tableportfolio_to_chain
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property portfolio_to_hawser() As portfolio_to_hawserDataTable
        Get
            Return Me.tableportfolio_to_hawser
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PortfolioSources() As PortfolioSourcesDataTable
        Get
            Return Me.tablePortfolioSources
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _ricsInChain() As _ricsInChainDataTable
        Get
            Return Me.table_ricsInChain
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _ricsInHawser() As _ricsInHawserDataTable
        Get
            Return Me.table_ricsInHawser
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As BondsDataSet = CType(MyBase.Clone,BondsDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("bond")) Is Nothing) Then
                MyBase.Tables.Add(New bondDataTable(ds.Tables("bond")))
            End If
            If (Not (ds.Tables("portfolio")) Is Nothing) Then
                MyBase.Tables.Add(New portfolioDataTable(ds.Tables("portfolio")))
            End If
            If (Not (ds.Tables("chain_items")) Is Nothing) Then
                MyBase.Tables.Add(New chain_itemsDataTable(ds.Tables("chain_items")))
            End If
            If (Not (ds.Tables("chain")) Is Nothing) Then
                MyBase.Tables.Add(New chainDataTable(ds.Tables("chain")))
            End If
            If (Not (ds.Tables("country")) Is Nothing) Then
                MyBase.Tables.Add(New countryDataTable(ds.Tables("country")))
            End If
            If (Not (ds.Tables("currency")) Is Nothing) Then
                MyBase.Tables.Add(New currencyDataTable(ds.Tables("currency")))
            End If
            If (Not (ds.Tables("issuer")) Is Nothing) Then
                MyBase.Tables.Add(New issuerDataTable(ds.Tables("issuer")))
            End If
            If (Not (ds.Tables("PortfolioUnited")) Is Nothing) Then
                MyBase.Tables.Add(New PortfolioUnitedDataTable(ds.Tables("PortfolioUnited")))
            End If
            If (Not (ds.Tables("settings")) Is Nothing) Then
                MyBase.Tables.Add(New settingsDataTable(ds.Tables("settings")))
            End If
            If (Not (ds.Tables("BondDescriptions")) Is Nothing) Then
                MyBase.Tables.Add(New BondDescriptionsDataTable(ds.Tables("BondDescriptions")))
            End If
            If (Not (ds.Tables("hawser")) Is Nothing) Then
                MyBase.Tables.Add(New hawserDataTable(ds.Tables("hawser")))
            End If
            If (Not (ds.Tables("HawserData")) Is Nothing) Then
                MyBase.Tables.Add(New HawserDataDataTable(ds.Tables("HawserData")))
            End If
            If (Not (ds.Tables("hawser_to_bond")) Is Nothing) Then
                MyBase.Tables.Add(New hawser_to_bondDataTable(ds.Tables("hawser_to_bond")))
            End If
            If (Not (ds.Tables("_portfolioByBonds")) Is Nothing) Then
                MyBase.Tables.Add(New _portfolioByBondsDataTable(ds.Tables("_portfolioByBonds")))
            End If
            If (Not (ds.Tables("_portfolioByChain")) Is Nothing) Then
                MyBase.Tables.Add(New _portfolioByChainDataTable(ds.Tables("_portfolioByChain")))
            End If
            If (Not (ds.Tables("_portfolioByHawser")) Is Nothing) Then
                MyBase.Tables.Add(New _portfolioByHawserDataTable(ds.Tables("_portfolioByHawser")))
            End If
            If (Not (ds.Tables("ChainsInPortfolio")) Is Nothing) Then
                MyBase.Tables.Add(New ChainsInPortfolioDataTable(ds.Tables("ChainsInPortfolio")))
            End If
            If (Not (ds.Tables("HawsersInPortfolio")) Is Nothing) Then
                MyBase.Tables.Add(New HawsersInPortfolioDataTable(ds.Tables("HawsersInPortfolio")))
            End If
            If (Not (ds.Tables("portfolio_to_bond")) Is Nothing) Then
                MyBase.Tables.Add(New portfolio_to_bondDataTable(ds.Tables("portfolio_to_bond")))
            End If
            If (Not (ds.Tables("portfolio_to_chain")) Is Nothing) Then
                MyBase.Tables.Add(New portfolio_to_chainDataTable(ds.Tables("portfolio_to_chain")))
            End If
            If (Not (ds.Tables("portfolio_to_hawser")) Is Nothing) Then
                MyBase.Tables.Add(New portfolio_to_hawserDataTable(ds.Tables("portfolio_to_hawser")))
            End If
            If (Not (ds.Tables("PortfolioSources")) Is Nothing) Then
                MyBase.Tables.Add(New PortfolioSourcesDataTable(ds.Tables("PortfolioSources")))
            End If
            If (Not (ds.Tables("_ricsInChain")) Is Nothing) Then
                MyBase.Tables.Add(New _ricsInChainDataTable(ds.Tables("_ricsInChain")))
            End If
            If (Not (ds.Tables("_ricsInHawser")) Is Nothing) Then
                MyBase.Tables.Add(New _ricsInHawserDataTable(ds.Tables("_ricsInHawser")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablebond = CType(MyBase.Tables("bond"),bondDataTable)
        If (initTable = true) Then
            If (Not (Me.tablebond) Is Nothing) Then
                Me.tablebond.InitVars
            End If
        End If
        Me.tableportfolio = CType(MyBase.Tables("portfolio"),portfolioDataTable)
        If (initTable = true) Then
            If (Not (Me.tableportfolio) Is Nothing) Then
                Me.tableportfolio.InitVars
            End If
        End If
        Me.tablechain_items = CType(MyBase.Tables("chain_items"),chain_itemsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablechain_items) Is Nothing) Then
                Me.tablechain_items.InitVars
            End If
        End If
        Me.tablechain = CType(MyBase.Tables("chain"),chainDataTable)
        If (initTable = true) Then
            If (Not (Me.tablechain) Is Nothing) Then
                Me.tablechain.InitVars
            End If
        End If
        Me.tablecountry = CType(MyBase.Tables("country"),countryDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecountry) Is Nothing) Then
                Me.tablecountry.InitVars
            End If
        End If
        Me.tablecurrency = CType(MyBase.Tables("currency"),currencyDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecurrency) Is Nothing) Then
                Me.tablecurrency.InitVars
            End If
        End If
        Me.tableissuer = CType(MyBase.Tables("issuer"),issuerDataTable)
        If (initTable = true) Then
            If (Not (Me.tableissuer) Is Nothing) Then
                Me.tableissuer.InitVars
            End If
        End If
        Me.tablePortfolioUnited = CType(MyBase.Tables("PortfolioUnited"),PortfolioUnitedDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePortfolioUnited) Is Nothing) Then
                Me.tablePortfolioUnited.InitVars
            End If
        End If
        Me.tablesettings = CType(MyBase.Tables("settings"),settingsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesettings) Is Nothing) Then
                Me.tablesettings.InitVars
            End If
        End If
        Me.tableBondDescriptions = CType(MyBase.Tables("BondDescriptions"),BondDescriptionsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBondDescriptions) Is Nothing) Then
                Me.tableBondDescriptions.InitVars
            End If
        End If
        Me.tablehawser = CType(MyBase.Tables("hawser"),hawserDataTable)
        If (initTable = true) Then
            If (Not (Me.tablehawser) Is Nothing) Then
                Me.tablehawser.InitVars
            End If
        End If
        Me.tableHawserData = CType(MyBase.Tables("HawserData"),HawserDataDataTable)
        If (initTable = true) Then
            If (Not (Me.tableHawserData) Is Nothing) Then
                Me.tableHawserData.InitVars
            End If
        End If
        Me.tablehawser_to_bond = CType(MyBase.Tables("hawser_to_bond"),hawser_to_bondDataTable)
        If (initTable = true) Then
            If (Not (Me.tablehawser_to_bond) Is Nothing) Then
                Me.tablehawser_to_bond.InitVars
            End If
        End If
        Me.table_portfolioByBonds = CType(MyBase.Tables("_portfolioByBonds"),_portfolioByBondsDataTable)
        If (initTable = true) Then
            If (Not (Me.table_portfolioByBonds) Is Nothing) Then
                Me.table_portfolioByBonds.InitVars
            End If
        End If
        Me.table_portfolioByChain = CType(MyBase.Tables("_portfolioByChain"),_portfolioByChainDataTable)
        If (initTable = true) Then
            If (Not (Me.table_portfolioByChain) Is Nothing) Then
                Me.table_portfolioByChain.InitVars
            End If
        End If
        Me.table_portfolioByHawser = CType(MyBase.Tables("_portfolioByHawser"),_portfolioByHawserDataTable)
        If (initTable = true) Then
            If (Not (Me.table_portfolioByHawser) Is Nothing) Then
                Me.table_portfolioByHawser.InitVars
            End If
        End If
        Me.tableChainsInPortfolio = CType(MyBase.Tables("ChainsInPortfolio"),ChainsInPortfolioDataTable)
        If (initTable = true) Then
            If (Not (Me.tableChainsInPortfolio) Is Nothing) Then
                Me.tableChainsInPortfolio.InitVars
            End If
        End If
        Me.tableHawsersInPortfolio = CType(MyBase.Tables("HawsersInPortfolio"),HawsersInPortfolioDataTable)
        If (initTable = true) Then
            If (Not (Me.tableHawsersInPortfolio) Is Nothing) Then
                Me.tableHawsersInPortfolio.InitVars
            End If
        End If
        Me.tableportfolio_to_bond = CType(MyBase.Tables("portfolio_to_bond"),portfolio_to_bondDataTable)
        If (initTable = true) Then
            If (Not (Me.tableportfolio_to_bond) Is Nothing) Then
                Me.tableportfolio_to_bond.InitVars
            End If
        End If
        Me.tableportfolio_to_chain = CType(MyBase.Tables("portfolio_to_chain"),portfolio_to_chainDataTable)
        If (initTable = true) Then
            If (Not (Me.tableportfolio_to_chain) Is Nothing) Then
                Me.tableportfolio_to_chain.InitVars
            End If
        End If
        Me.tableportfolio_to_hawser = CType(MyBase.Tables("portfolio_to_hawser"),portfolio_to_hawserDataTable)
        If (initTable = true) Then
            If (Not (Me.tableportfolio_to_hawser) Is Nothing) Then
                Me.tableportfolio_to_hawser.InitVars
            End If
        End If
        Me.tablePortfolioSources = CType(MyBase.Tables("PortfolioSources"),PortfolioSourcesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePortfolioSources) Is Nothing) Then
                Me.tablePortfolioSources.InitVars
            End If
        End If
        Me.table_ricsInChain = CType(MyBase.Tables("_ricsInChain"),_ricsInChainDataTable)
        If (initTable = true) Then
            If (Not (Me.table_ricsInChain) Is Nothing) Then
                Me.table_ricsInChain.InitVars
            End If
        End If
        Me.table_ricsInHawser = CType(MyBase.Tables("_ricsInHawser"),_ricsInHawserDataTable)
        If (initTable = true) Then
            If (Not (Me.table_ricsInHawser) Is Nothing) Then
                Me.table_ricsInHawser.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "BondsDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/BondsDataSet.xsd"
        Me.EnforceConstraints = false
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablebond = New bondDataTable()
        MyBase.Tables.Add(Me.tablebond)
        Me.tableportfolio = New portfolioDataTable()
        MyBase.Tables.Add(Me.tableportfolio)
        Me.tablechain_items = New chain_itemsDataTable()
        MyBase.Tables.Add(Me.tablechain_items)
        Me.tablechain = New chainDataTable()
        MyBase.Tables.Add(Me.tablechain)
        Me.tablecountry = New countryDataTable()
        MyBase.Tables.Add(Me.tablecountry)
        Me.tablecurrency = New currencyDataTable()
        MyBase.Tables.Add(Me.tablecurrency)
        Me.tableissuer = New issuerDataTable()
        MyBase.Tables.Add(Me.tableissuer)
        Me.tablePortfolioUnited = New PortfolioUnitedDataTable()
        MyBase.Tables.Add(Me.tablePortfolioUnited)
        Me.tablesettings = New settingsDataTable()
        MyBase.Tables.Add(Me.tablesettings)
        Me.tableBondDescriptions = New BondDescriptionsDataTable()
        MyBase.Tables.Add(Me.tableBondDescriptions)
        Me.tablehawser = New hawserDataTable()
        MyBase.Tables.Add(Me.tablehawser)
        Me.tableHawserData = New HawserDataDataTable()
        MyBase.Tables.Add(Me.tableHawserData)
        Me.tablehawser_to_bond = New hawser_to_bondDataTable()
        MyBase.Tables.Add(Me.tablehawser_to_bond)
        Me.table_portfolioByBonds = New _portfolioByBondsDataTable()
        MyBase.Tables.Add(Me.table_portfolioByBonds)
        Me.table_portfolioByChain = New _portfolioByChainDataTable()
        MyBase.Tables.Add(Me.table_portfolioByChain)
        Me.table_portfolioByHawser = New _portfolioByHawserDataTable()
        MyBase.Tables.Add(Me.table_portfolioByHawser)
        Me.tableChainsInPortfolio = New ChainsInPortfolioDataTable()
        MyBase.Tables.Add(Me.tableChainsInPortfolio)
        Me.tableHawsersInPortfolio = New HawsersInPortfolioDataTable()
        MyBase.Tables.Add(Me.tableHawsersInPortfolio)
        Me.tableportfolio_to_bond = New portfolio_to_bondDataTable()
        MyBase.Tables.Add(Me.tableportfolio_to_bond)
        Me.tableportfolio_to_chain = New portfolio_to_chainDataTable()
        MyBase.Tables.Add(Me.tableportfolio_to_chain)
        Me.tableportfolio_to_hawser = New portfolio_to_hawserDataTable()
        MyBase.Tables.Add(Me.tableportfolio_to_hawser)
        Me.tablePortfolioSources = New PortfolioSourcesDataTable()
        MyBase.Tables.Add(Me.tablePortfolioSources)
        Me.table_ricsInChain = New _ricsInChainDataTable()
        MyBase.Tables.Add(Me.table_ricsInChain)
        Me.table_ricsInHawser = New _ricsInHawserDataTable()
        MyBase.Tables.Add(Me.table_ricsInHawser)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializebond() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeportfolio() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializechain_items() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializechain() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializecountry() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializecurrency() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeissuer() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePortfolioUnited() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializesettings() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeBondDescriptions() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializehawser() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeHawserData() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializehawser_to_bond() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerialize_portfolioByBonds() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerialize_portfolioByChain() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerialize_portfolioByHawser() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeChainsInPortfolio() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeHawsersInPortfolio() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeportfolio_to_bond() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeportfolio_to_chain() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeportfolio_to_hawser() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePortfolioSources() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerialize_ricsInChain() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerialize_ricsInHawser() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As BondsDataSet = New BondsDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub bondRowChangeEventHandler(ByVal sender As Object, ByVal e As bondRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub portfolioRowChangeEventHandler(ByVal sender As Object, ByVal e As portfolioRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub chain_itemsRowChangeEventHandler(ByVal sender As Object, ByVal e As chain_itemsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub chainRowChangeEventHandler(ByVal sender As Object, ByVal e As chainRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub countryRowChangeEventHandler(ByVal sender As Object, ByVal e As countryRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub currencyRowChangeEventHandler(ByVal sender As Object, ByVal e As currencyRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub issuerRowChangeEventHandler(ByVal sender As Object, ByVal e As issuerRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PortfolioUnitedRowChangeEventHandler(ByVal sender As Object, ByVal e As PortfolioUnitedRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub settingsRowChangeEventHandler(ByVal sender As Object, ByVal e As settingsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub BondDescriptionsRowChangeEventHandler(ByVal sender As Object, ByVal e As BondDescriptionsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub hawserRowChangeEventHandler(ByVal sender As Object, ByVal e As hawserRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub HawserDataRowChangeEventHandler(ByVal sender As Object, ByVal e As HawserDataRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub hawser_to_bondRowChangeEventHandler(ByVal sender As Object, ByVal e As hawser_to_bondRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub _portfolioByBondsRowChangeEventHandler(ByVal sender As Object, ByVal e As _portfolioByBondsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub _portfolioByChainRowChangeEventHandler(ByVal sender As Object, ByVal e As _portfolioByChainRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub _portfolioByHawserRowChangeEventHandler(ByVal sender As Object, ByVal e As _portfolioByHawserRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ChainsInPortfolioRowChangeEventHandler(ByVal sender As Object, ByVal e As ChainsInPortfolioRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub HawsersInPortfolioRowChangeEventHandler(ByVal sender As Object, ByVal e As HawsersInPortfolioRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub portfolio_to_bondRowChangeEventHandler(ByVal sender As Object, ByVal e As portfolio_to_bondRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub portfolio_to_chainRowChangeEventHandler(ByVal sender As Object, ByVal e As portfolio_to_chainRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub portfolio_to_hawserRowChangeEventHandler(ByVal sender As Object, ByVal e As portfolio_to_hawserRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PortfolioSourcesRowChangeEventHandler(ByVal sender As Object, ByVal e As PortfolioSourcesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub _ricsInChainRowChangeEventHandler(ByVal sender As Object, ByVal e As _ricsInChainRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub _ricsInHawserRowChangeEventHandler(ByVal sender As Object, ByVal e As _ricsInHawserRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class bondDataTable
        Inherits Global.System.Data.TypedTableBase(Of bondRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnric As Global.System.Data.DataColumn
        
        Private columnpayments As Global.System.Data.DataColumn
        
        Private columnrates As Global.System.Data.DataColumn
        
        Private columndescr As Global.System.Data.DataColumn
        
        Private columnseries As Global.System.Data.DataColumn
        
        Private columnissuer_id As Global.System.Data.DataColumn
        
        Private columncurrency_id As Global.System.Data.DataColumn
        
        Private columnir_fixing_ric As Global.System.Data.DataColumn
        
        Private columndsply_name As Global.System.Data.DataColumn
        
        Private columnis_straight As Global.System.Data.DataColumn
        
        Private columnis_putable As Global.System.Data.DataColumn
        
        Private columnis_floater As Global.System.Data.DataColumn
        
        Private columnis_convertible As Global.System.Data.DataColumn
        
        Private columnissue_size As Global.System.Data.DataColumn
        
        Private columnmaturitydate As Global.System.Data.DataColumn
        
        Private columnissuedate As Global.System.Data.DataColumn
        
        Private columnnextputdate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "bond"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ricColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnric
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property paymentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpayments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ratesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrates
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property descrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property seriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnseries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property issuer_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnissuer_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property currency_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncurrency_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ir_fixing_ricColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnir_fixing_ric
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property dsply_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndsply_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property is_straightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnis_straight
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property is_putableColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnis_putable
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property is_floaterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnis_floater
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property is_convertibleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnis_convertible
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property issue_sizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnissue_size
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property maturitydateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmaturitydate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property issuedateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnissuedate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nextputdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnextputdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As bondRow
            Get
                Return CType(Me.Rows(index),bondRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event bondRowChanging As bondRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event bondRowChanged As bondRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event bondRowDeleting As bondRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event bondRowDeleted As bondRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddbondRow(ByVal row As bondRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddbondRow( _
                    ByVal ric As String,  _
                    ByVal payments As String,  _
                    ByVal rates As String,  _
                    ByVal descr As String,  _
                    ByVal series As String,  _
                    ByVal issuer_id As Long,  _
                    ByVal currency_id As Long,  _
                    ByVal ir_fixing_ric As String,  _
                    ByVal dsply_name As String,  _
                    ByVal is_straight As Boolean,  _
                    ByVal is_putable As Boolean,  _
                    ByVal is_floater As Boolean,  _
                    ByVal is_convertible As Boolean,  _
                    ByVal issue_size As Double,  _
                    ByVal maturitydate As String,  _
                    ByVal issuedate As String,  _
                    ByVal nextputdate As String) As bondRow
            Dim rowbondRow As bondRow = CType(Me.NewRow,bondRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ric, payments, rates, descr, series, issuer_id, currency_id, ir_fixing_ric, dsply_name, is_straight, is_putable, is_floater, is_convertible, issue_size, maturitydate, issuedate, nextputdate}
            rowbondRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowbondRow)
            Return rowbondRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As bondRow
            Return CType(Me.Rows.Find(New Object() {id}),bondRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As bondDataTable = CType(MyBase.Clone,bondDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New bondDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnric = MyBase.Columns("ric")
            Me.columnpayments = MyBase.Columns("payments")
            Me.columnrates = MyBase.Columns("rates")
            Me.columndescr = MyBase.Columns("descr")
            Me.columnseries = MyBase.Columns("series")
            Me.columnissuer_id = MyBase.Columns("issuer_id")
            Me.columncurrency_id = MyBase.Columns("currency_id")
            Me.columnir_fixing_ric = MyBase.Columns("ir_fixing_ric")
            Me.columndsply_name = MyBase.Columns("dsply_name")
            Me.columnis_straight = MyBase.Columns("is_straight")
            Me.columnis_putable = MyBase.Columns("is_putable")
            Me.columnis_floater = MyBase.Columns("is_floater")
            Me.columnis_convertible = MyBase.Columns("is_convertible")
            Me.columnissue_size = MyBase.Columns("issue_size")
            Me.columnmaturitydate = MyBase.Columns("maturitydate")
            Me.columnissuedate = MyBase.Columns("issuedate")
            Me.columnnextputdate = MyBase.Columns("nextputdate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnric = New Global.System.Data.DataColumn("ric", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnric)
            Me.columnpayments = New Global.System.Data.DataColumn("payments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpayments)
            Me.columnrates = New Global.System.Data.DataColumn("rates", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrates)
            Me.columndescr = New Global.System.Data.DataColumn("descr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescr)
            Me.columnseries = New Global.System.Data.DataColumn("series", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnseries)
            Me.columnissuer_id = New Global.System.Data.DataColumn("issuer_id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnissuer_id)
            Me.columncurrency_id = New Global.System.Data.DataColumn("currency_id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncurrency_id)
            Me.columnir_fixing_ric = New Global.System.Data.DataColumn("ir_fixing_ric", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnir_fixing_ric)
            Me.columndsply_name = New Global.System.Data.DataColumn("dsply_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndsply_name)
            Me.columnis_straight = New Global.System.Data.DataColumn("is_straight", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnis_straight)
            Me.columnis_putable = New Global.System.Data.DataColumn("is_putable", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnis_putable)
            Me.columnis_floater = New Global.System.Data.DataColumn("is_floater", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnis_floater)
            Me.columnis_convertible = New Global.System.Data.DataColumn("is_convertible", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnis_convertible)
            Me.columnissue_size = New Global.System.Data.DataColumn("issue_size", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnissue_size)
            Me.columnmaturitydate = New Global.System.Data.DataColumn("maturitydate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmaturitydate)
            Me.columnissuedate = New Global.System.Data.DataColumn("issuedate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnissuedate)
            Me.columnnextputdate = New Global.System.Data.DataColumn("nextputdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnextputdate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columnric.MaxLength = 2147483647
            Me.columnpayments.MaxLength = 2147483647
            Me.columnrates.MaxLength = 2147483647
            Me.columndescr.MaxLength = 2147483647
            Me.columnseries.MaxLength = 2147483647
            Me.columnir_fixing_ric.MaxLength = 2147483647
            Me.columndsply_name.MaxLength = 2147483647
            Me.columnmaturitydate.MaxLength = 2147483647
            Me.columnissuedate.MaxLength = 2147483647
            Me.columnnextputdate.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewbondRow() As bondRow
            Return CType(Me.NewRow,bondRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New bondRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(bondRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bondRowChangedEvent) Is Nothing) Then
                RaiseEvent bondRowChanged(Me, New bondRowChangeEvent(CType(e.Row,bondRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bondRowChangingEvent) Is Nothing) Then
                RaiseEvent bondRowChanging(Me, New bondRowChangeEvent(CType(e.Row,bondRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bondRowDeletedEvent) Is Nothing) Then
                RaiseEvent bondRowDeleted(Me, New bondRowChangeEvent(CType(e.Row,bondRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bondRowDeletingEvent) Is Nothing) Then
                RaiseEvent bondRowDeleting(Me, New bondRowChangeEvent(CType(e.Row,bondRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovebondRow(ByVal row As bondRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "bondDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class portfolioDataTable
        Inherits Global.System.Data.TypedTableBase(Of portfolioRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnportfolio_name As Global.System.Data.DataColumn
        
        Private columnis_default As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "portfolio"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property portfolio_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnportfolio_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property is_defaultColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnis_default
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As portfolioRow
            Get
                Return CType(Me.Rows(index),portfolioRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event portfolioRowChanging As portfolioRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event portfolioRowChanged As portfolioRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event portfolioRowDeleting As portfolioRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event portfolioRowDeleted As portfolioRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddportfolioRow(ByVal row As portfolioRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddportfolioRow(ByVal portfolio_name As String, ByVal is_default As Boolean) As portfolioRow
            Dim rowportfolioRow As portfolioRow = CType(Me.NewRow,portfolioRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, portfolio_name, is_default}
            rowportfolioRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowportfolioRow)
            Return rowportfolioRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As portfolioRow
            Return CType(Me.Rows.Find(New Object() {id}),portfolioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As portfolioDataTable = CType(MyBase.Clone,portfolioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New portfolioDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnportfolio_name = MyBase.Columns("portfolio_name")
            Me.columnis_default = MyBase.Columns("is_default")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnportfolio_name = New Global.System.Data.DataColumn("portfolio_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnportfolio_name)
            Me.columnis_default = New Global.System.Data.DataColumn("is_default", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnis_default)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columnportfolio_name.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewportfolioRow() As portfolioRow
            Return CType(Me.NewRow,portfolioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New portfolioRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(portfolioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.portfolioRowChangedEvent) Is Nothing) Then
                RaiseEvent portfolioRowChanged(Me, New portfolioRowChangeEvent(CType(e.Row,portfolioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.portfolioRowChangingEvent) Is Nothing) Then
                RaiseEvent portfolioRowChanging(Me, New portfolioRowChangeEvent(CType(e.Row,portfolioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.portfolioRowDeletedEvent) Is Nothing) Then
                RaiseEvent portfolioRowDeleted(Me, New portfolioRowChangeEvent(CType(e.Row,portfolioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.portfolioRowDeletingEvent) Is Nothing) Then
                RaiseEvent portfolioRowDeleting(Me, New portfolioRowChangeEvent(CType(e.Row,portfolioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveportfolioRow(ByVal row As portfolioRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "portfolioDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class chain_itemsDataTable
        Inherits Global.System.Data.TypedTableBase(Of chain_itemsRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnitem_ric As Global.System.Data.DataColumn
        
        Private columnid_chain As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "chain_items"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property item_ricColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitem_ric
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_chainColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_chain
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As chain_itemsRow
            Get
                Return CType(Me.Rows(index),chain_itemsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event chain_itemsRowChanging As chain_itemsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event chain_itemsRowChanged As chain_itemsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event chain_itemsRowDeleting As chain_itemsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event chain_itemsRowDeleted As chain_itemsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addchain_itemsRow(ByVal row As chain_itemsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addchain_itemsRow(ByVal item_ric As String, ByVal id_chain As Long) As chain_itemsRow
            Dim rowchain_itemsRow As chain_itemsRow = CType(Me.NewRow,chain_itemsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, item_ric, id_chain}
            rowchain_itemsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowchain_itemsRow)
            Return rowchain_itemsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As chain_itemsRow
            Return CType(Me.Rows.Find(New Object() {id}),chain_itemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As chain_itemsDataTable = CType(MyBase.Clone,chain_itemsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New chain_itemsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnitem_ric = MyBase.Columns("item_ric")
            Me.columnid_chain = MyBase.Columns("id_chain")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnitem_ric = New Global.System.Data.DataColumn("item_ric", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitem_ric)
            Me.columnid_chain = New Global.System.Data.DataColumn("id_chain", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_chain)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columnitem_ric.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newchain_itemsRow() As chain_itemsRow
            Return CType(Me.NewRow,chain_itemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New chain_itemsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(chain_itemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.chain_itemsRowChangedEvent) Is Nothing) Then
                RaiseEvent chain_itemsRowChanged(Me, New chain_itemsRowChangeEvent(CType(e.Row,chain_itemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.chain_itemsRowChangingEvent) Is Nothing) Then
                RaiseEvent chain_itemsRowChanging(Me, New chain_itemsRowChangeEvent(CType(e.Row,chain_itemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.chain_itemsRowDeletedEvent) Is Nothing) Then
                RaiseEvent chain_itemsRowDeleted(Me, New chain_itemsRowChangeEvent(CType(e.Row,chain_itemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.chain_itemsRowDeletingEvent) Is Nothing) Then
                RaiseEvent chain_itemsRowDeleting(Me, New chain_itemsRowChangeEvent(CType(e.Row,chain_itemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removechain_itemsRow(ByVal row As chain_itemsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "chain_itemsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class chainDataTable
        Inherits Global.System.Data.TypedTableBase(Of chainRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnchain_name As Global.System.Data.DataColumn
        
        Private columndescr As Global.System.Data.DataColumn
        
        Private columncurve As Global.System.Data.DataColumn
        
        Private columnsort_num As Global.System.Data.DataColumn
        
        Private columnis_necessary As Global.System.Data.DataColumn
        
        Private columntype As Global.System.Data.DataColumn
        
        Private columncolor As Global.System.Data.DataColumn
        
        Private columnbid_field As Global.System.Data.DataColumn
        
        Private columnask_field As Global.System.Data.DataColumn
        
        Private columnlast_field As Global.System.Data.DataColumn
        
        Private columnhist_field As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "chain"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property chain_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchain_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property descrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property curveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncurve
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sort_numColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsort_num
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property is_necessaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnis_necessary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property colorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncolor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bid_fieldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbid_field
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ask_fieldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnask_field
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property last_fieldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlast_field
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property hist_fieldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhist_field
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As chainRow
            Get
                Return CType(Me.Rows(index),chainRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event chainRowChanging As chainRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event chainRowChanged As chainRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event chainRowDeleting As chainRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event chainRowDeleted As chainRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddchainRow(ByVal row As chainRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddchainRow(ByVal chain_name As String, ByVal descr As String, ByVal curve As Boolean, ByVal sort_num As Long, ByVal is_necessary As Boolean, ByVal type As String, ByVal color As String, ByVal bid_field As String, ByVal ask_field As String, ByVal last_field As String, ByVal hist_field As String) As chainRow
            Dim rowchainRow As chainRow = CType(Me.NewRow,chainRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, chain_name, descr, curve, sort_num, is_necessary, type, color, bid_field, ask_field, last_field, hist_field}
            rowchainRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowchainRow)
            Return rowchainRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As chainRow
            Return CType(Me.Rows.Find(New Object() {id}),chainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As chainDataTable = CType(MyBase.Clone,chainDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New chainDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnchain_name = MyBase.Columns("chain_name")
            Me.columndescr = MyBase.Columns("descr")
            Me.columncurve = MyBase.Columns("curve")
            Me.columnsort_num = MyBase.Columns("sort_num")
            Me.columnis_necessary = MyBase.Columns("is_necessary")
            Me.columntype = MyBase.Columns("type")
            Me.columncolor = MyBase.Columns("color")
            Me.columnbid_field = MyBase.Columns("bid_field")
            Me.columnask_field = MyBase.Columns("ask_field")
            Me.columnlast_field = MyBase.Columns("last_field")
            Me.columnhist_field = MyBase.Columns("hist_field")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnchain_name = New Global.System.Data.DataColumn("chain_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchain_name)
            Me.columndescr = New Global.System.Data.DataColumn("descr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescr)
            Me.columncurve = New Global.System.Data.DataColumn("curve", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncurve)
            Me.columnsort_num = New Global.System.Data.DataColumn("sort_num", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsort_num)
            Me.columnis_necessary = New Global.System.Data.DataColumn("is_necessary", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnis_necessary)
            Me.columntype = New Global.System.Data.DataColumn("type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntype)
            Me.columncolor = New Global.System.Data.DataColumn("color", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolor)
            Me.columnbid_field = New Global.System.Data.DataColumn("bid_field", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbid_field)
            Me.columnask_field = New Global.System.Data.DataColumn("ask_field", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnask_field)
            Me.columnlast_field = New Global.System.Data.DataColumn("last_field", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlast_field)
            Me.columnhist_field = New Global.System.Data.DataColumn("hist_field", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhist_field)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columnchain_name.MaxLength = 2147483647
            Me.columndescr.MaxLength = 2147483647
            Me.columntype.MaxLength = 2147483647
            Me.columncolor.MaxLength = 2147483647
            Me.columnbid_field.MaxLength = 2147483647
            Me.columnask_field.MaxLength = 2147483647
            Me.columnlast_field.MaxLength = 2147483647
            Me.columnhist_field.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewchainRow() As chainRow
            Return CType(Me.NewRow,chainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New chainRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(chainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.chainRowChangedEvent) Is Nothing) Then
                RaiseEvent chainRowChanged(Me, New chainRowChangeEvent(CType(e.Row,chainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.chainRowChangingEvent) Is Nothing) Then
                RaiseEvent chainRowChanging(Me, New chainRowChangeEvent(CType(e.Row,chainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.chainRowDeletedEvent) Is Nothing) Then
                RaiseEvent chainRowDeleted(Me, New chainRowChangeEvent(CType(e.Row,chainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.chainRowDeletingEvent) Is Nothing) Then
                RaiseEvent chainRowDeleting(Me, New chainRowChangeEvent(CType(e.Row,chainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovechainRow(ByVal row As chainRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "chainDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class countryDataTable
        Inherits Global.System.Data.TypedTableBase(Of countryRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columncountry As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "country"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property countryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncountry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As countryRow
            Get
                Return CType(Me.Rows(index),countryRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event countryRowChanging As countryRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event countryRowChanged As countryRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event countryRowDeleting As countryRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event countryRowDeleted As countryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddcountryRow(ByVal row As countryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddcountryRow(ByVal country As String) As countryRow
            Dim rowcountryRow As countryRow = CType(Me.NewRow,countryRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, country}
            rowcountryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcountryRow)
            Return rowcountryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As countryRow
            Return CType(Me.Rows.Find(New Object() {id}),countryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As countryDataTable = CType(MyBase.Clone,countryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New countryDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columncountry = MyBase.Columns("country")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columncountry = New Global.System.Data.DataColumn("country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncountry)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columncountry.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewcountryRow() As countryRow
            Return CType(Me.NewRow,countryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New countryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(countryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.countryRowChangedEvent) Is Nothing) Then
                RaiseEvent countryRowChanged(Me, New countryRowChangeEvent(CType(e.Row,countryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.countryRowChangingEvent) Is Nothing) Then
                RaiseEvent countryRowChanging(Me, New countryRowChangeEvent(CType(e.Row,countryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.countryRowDeletedEvent) Is Nothing) Then
                RaiseEvent countryRowDeleted(Me, New countryRowChangeEvent(CType(e.Row,countryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.countryRowDeletingEvent) Is Nothing) Then
                RaiseEvent countryRowDeleting(Me, New countryRowChangeEvent(CType(e.Row,countryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovecountryRow(ByVal row As countryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "countryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class currencyDataTable
        Inherits Global.System.Data.TypedTableBase(Of currencyRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columncurrency As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "currency"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property currencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As currencyRow
            Get
                Return CType(Me.Rows(index),currencyRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event currencyRowChanging As currencyRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event currencyRowChanged As currencyRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event currencyRowDeleting As currencyRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event currencyRowDeleted As currencyRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddcurrencyRow(ByVal row As currencyRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddcurrencyRow(ByVal currency As String) As currencyRow
            Dim rowcurrencyRow As currencyRow = CType(Me.NewRow,currencyRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, currency}
            rowcurrencyRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcurrencyRow)
            Return rowcurrencyRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As currencyRow
            Return CType(Me.Rows.Find(New Object() {id}),currencyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As currencyDataTable = CType(MyBase.Clone,currencyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New currencyDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columncurrency = MyBase.Columns("currency")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columncurrency = New Global.System.Data.DataColumn("currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncurrency)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columncurrency.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewcurrencyRow() As currencyRow
            Return CType(Me.NewRow,currencyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New currencyRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(currencyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.currencyRowChangedEvent) Is Nothing) Then
                RaiseEvent currencyRowChanged(Me, New currencyRowChangeEvent(CType(e.Row,currencyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.currencyRowChangingEvent) Is Nothing) Then
                RaiseEvent currencyRowChanging(Me, New currencyRowChangeEvent(CType(e.Row,currencyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.currencyRowDeletedEvent) Is Nothing) Then
                RaiseEvent currencyRowDeleted(Me, New currencyRowChangeEvent(CType(e.Row,currencyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.currencyRowDeletingEvent) Is Nothing) Then
                RaiseEvent currencyRowDeleting(Me, New currencyRowChangeEvent(CType(e.Row,currencyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovecurrencyRow(ByVal row As currencyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "currencyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class issuerDataTable
        Inherits Global.System.Data.TypedTableBase(Of issuerRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnshortname As Global.System.Data.DataColumn
        
        Private columnissuername As Global.System.Data.DataColumn
        
        Private columnticker As Global.System.Data.DataColumn
        
        Private columncountry_id As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "issuer"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property shortnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnshortname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property issuernameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnissuername
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tickerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnticker
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property country_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncountry_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As issuerRow
            Get
                Return CType(Me.Rows(index),issuerRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event issuerRowChanging As issuerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event issuerRowChanged As issuerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event issuerRowDeleting As issuerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event issuerRowDeleted As issuerRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddissuerRow(ByVal row As issuerRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddissuerRow(ByVal shortname As String, ByVal issuername As String, ByVal ticker As String, ByVal country_id As Long) As issuerRow
            Dim rowissuerRow As issuerRow = CType(Me.NewRow,issuerRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, shortname, issuername, ticker, country_id}
            rowissuerRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowissuerRow)
            Return rowissuerRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As issuerRow
            Return CType(Me.Rows.Find(New Object() {id}),issuerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As issuerDataTable = CType(MyBase.Clone,issuerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New issuerDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnshortname = MyBase.Columns("shortname")
            Me.columnissuername = MyBase.Columns("issuername")
            Me.columnticker = MyBase.Columns("ticker")
            Me.columncountry_id = MyBase.Columns("country_id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnshortname = New Global.System.Data.DataColumn("shortname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnshortname)
            Me.columnissuername = New Global.System.Data.DataColumn("issuername", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnissuername)
            Me.columnticker = New Global.System.Data.DataColumn("ticker", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnticker)
            Me.columncountry_id = New Global.System.Data.DataColumn("country_id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncountry_id)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columnshortname.MaxLength = 2147483647
            Me.columnissuername.MaxLength = 2147483647
            Me.columnticker.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewissuerRow() As issuerRow
            Return CType(Me.NewRow,issuerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New issuerRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(issuerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.issuerRowChangedEvent) Is Nothing) Then
                RaiseEvent issuerRowChanged(Me, New issuerRowChangeEvent(CType(e.Row,issuerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.issuerRowChangingEvent) Is Nothing) Then
                RaiseEvent issuerRowChanging(Me, New issuerRowChangeEvent(CType(e.Row,issuerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.issuerRowDeletedEvent) Is Nothing) Then
                RaiseEvent issuerRowDeleted(Me, New issuerRowChangeEvent(CType(e.Row,issuerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.issuerRowDeletingEvent) Is Nothing) Then
                RaiseEvent issuerRowDeleting(Me, New issuerRowChangeEvent(CType(e.Row,issuerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveissuerRow(ByVal row As issuerRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "issuerDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PortfolioUnitedDataTable
        Inherits Global.System.Data.TypedTableBase(Of PortfolioUnitedRow)
        
        Private columnpid As Global.System.Data.DataColumn
        
        Private columnbid As Global.System.Data.DataColumn
        
        Private columnric As Global.System.Data.DataColumn
        
        Private columndescr As Global.System.Data.DataColumn
        
        Private columnpayments As Global.System.Data.DataColumn
        
        Private columnrates As Global.System.Data.DataColumn
        
        Private columnbondshortname As Global.System.Data.DataColumn
        
        Private columndsply_name As Global.System.Data.DataColumn
        
        Private columninclude As Global.System.Data.DataColumn
        
        Private columncolor As Global.System.Data.DataColumn
        
        Private columnwhereFrom As Global.System.Data.DataColumn
        
        Private columnfromID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PortfolioUnited"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property pidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ricColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnric
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property descrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property paymentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpayments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ratesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrates
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bondshortnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbondshortname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property dsply_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndsply_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property includeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninclude
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property colorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncolor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property whereFromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwhereFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property fromIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfromID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PortfolioUnitedRow
            Get
                Return CType(Me.Rows(index),PortfolioUnitedRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PortfolioUnitedRowChanging As PortfolioUnitedRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PortfolioUnitedRowChanged As PortfolioUnitedRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PortfolioUnitedRowDeleting As PortfolioUnitedRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PortfolioUnitedRowDeleted As PortfolioUnitedRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPortfolioUnitedRow(ByVal row As PortfolioUnitedRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPortfolioUnitedRow(ByVal ric As String, ByVal descr As String, ByVal payments As String, ByVal rates As String, ByVal bondshortname As Object, ByVal dsply_name As String, ByVal include As Boolean, ByVal color As String, ByVal whereFrom As Object) As PortfolioUnitedRow
            Dim rowPortfolioUnitedRow As PortfolioUnitedRow = CType(Me.NewRow,PortfolioUnitedRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, ric, descr, payments, rates, bondshortname, dsply_name, include, color, whereFrom, Nothing}
            rowPortfolioUnitedRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPortfolioUnitedRow)
            Return rowPortfolioUnitedRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PortfolioUnitedDataTable = CType(MyBase.Clone,PortfolioUnitedDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PortfolioUnitedDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnpid = MyBase.Columns("pid")
            Me.columnbid = MyBase.Columns("bid")
            Me.columnric = MyBase.Columns("ric")
            Me.columndescr = MyBase.Columns("descr")
            Me.columnpayments = MyBase.Columns("payments")
            Me.columnrates = MyBase.Columns("rates")
            Me.columnbondshortname = MyBase.Columns("bondshortname")
            Me.columndsply_name = MyBase.Columns("dsply_name")
            Me.columninclude = MyBase.Columns("include")
            Me.columncolor = MyBase.Columns("color")
            Me.columnwhereFrom = MyBase.Columns("whereFrom")
            Me.columnfromID = MyBase.Columns("fromID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnpid = New Global.System.Data.DataColumn("pid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpid)
            Me.columnbid = New Global.System.Data.DataColumn("bid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbid)
            Me.columnric = New Global.System.Data.DataColumn("ric", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnric)
            Me.columndescr = New Global.System.Data.DataColumn("descr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescr)
            Me.columnpayments = New Global.System.Data.DataColumn("payments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpayments)
            Me.columnrates = New Global.System.Data.DataColumn("rates", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrates)
            Me.columnbondshortname = New Global.System.Data.DataColumn("bondshortname", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbondshortname)
            Me.columndsply_name = New Global.System.Data.DataColumn("dsply_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndsply_name)
            Me.columninclude = New Global.System.Data.DataColumn("include", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninclude)
            Me.columncolor = New Global.System.Data.DataColumn("color", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolor)
            Me.columnwhereFrom = New Global.System.Data.DataColumn("whereFrom", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwhereFrom)
            Me.columnfromID = New Global.System.Data.DataColumn("fromID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfromID)
            Me.columnpid.AutoIncrement = true
            Me.columnpid.AutoIncrementSeed = -1
            Me.columnpid.AutoIncrementStep = -1
            Me.columnpid.AllowDBNull = false
            Me.columnbid.AutoIncrement = true
            Me.columnbid.AutoIncrementSeed = -1
            Me.columnbid.AutoIncrementStep = -1
            Me.columnbid.AllowDBNull = false
            Me.columnric.MaxLength = 2147483647
            Me.columndescr.MaxLength = 2147483647
            Me.columnpayments.MaxLength = 2147483647
            Me.columnrates.MaxLength = 2147483647
            Me.columndsply_name.MaxLength = 2147483647
            Me.columncolor.MaxLength = 2147483647
            Me.columnfromID.AutoIncrement = true
            Me.columnfromID.AutoIncrementSeed = -1
            Me.columnfromID.AutoIncrementStep = -1
            Me.columnfromID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPortfolioUnitedRow() As PortfolioUnitedRow
            Return CType(Me.NewRow,PortfolioUnitedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PortfolioUnitedRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PortfolioUnitedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PortfolioUnitedRowChangedEvent) Is Nothing) Then
                RaiseEvent PortfolioUnitedRowChanged(Me, New PortfolioUnitedRowChangeEvent(CType(e.Row,PortfolioUnitedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PortfolioUnitedRowChangingEvent) Is Nothing) Then
                RaiseEvent PortfolioUnitedRowChanging(Me, New PortfolioUnitedRowChangeEvent(CType(e.Row,PortfolioUnitedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PortfolioUnitedRowDeletedEvent) Is Nothing) Then
                RaiseEvent PortfolioUnitedRowDeleted(Me, New PortfolioUnitedRowChangeEvent(CType(e.Row,PortfolioUnitedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PortfolioUnitedRowDeletingEvent) Is Nothing) Then
                RaiseEvent PortfolioUnitedRowDeleting(Me, New PortfolioUnitedRowChangeEvent(CType(e.Row,PortfolioUnitedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePortfolioUnitedRow(ByVal row As PortfolioUnitedRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PortfolioUnitedDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class settingsDataTable
        Inherits Global.System.Data.TypedTableBase(Of settingsRow)
        
        Private columnlastupdatedate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "settings"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property lastupdatedateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlastupdatedate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As settingsRow
            Get
                Return CType(Me.Rows(index),settingsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event settingsRowChanging As settingsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event settingsRowChanged As settingsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event settingsRowDeleting As settingsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event settingsRowDeleted As settingsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddsettingsRow(ByVal row As settingsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddsettingsRow(ByVal lastupdatedate As String) As settingsRow
            Dim rowsettingsRow As settingsRow = CType(Me.NewRow,settingsRow)
            Dim columnValuesArray() As Object = New Object() {lastupdatedate}
            rowsettingsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsettingsRow)
            Return rowsettingsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As settingsDataTable = CType(MyBase.Clone,settingsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New settingsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnlastupdatedate = MyBase.Columns("lastupdatedate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnlastupdatedate = New Global.System.Data.DataColumn("lastupdatedate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlastupdatedate)
            Me.columnlastupdatedate.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewsettingsRow() As settingsRow
            Return CType(Me.NewRow,settingsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New settingsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(settingsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.settingsRowChangedEvent) Is Nothing) Then
                RaiseEvent settingsRowChanged(Me, New settingsRowChangeEvent(CType(e.Row,settingsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.settingsRowChangingEvent) Is Nothing) Then
                RaiseEvent settingsRowChanging(Me, New settingsRowChangeEvent(CType(e.Row,settingsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.settingsRowDeletedEvent) Is Nothing) Then
                RaiseEvent settingsRowDeleted(Me, New settingsRowChangeEvent(CType(e.Row,settingsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.settingsRowDeletingEvent) Is Nothing) Then
                RaiseEvent settingsRowDeleting(Me, New settingsRowChangeEvent(CType(e.Row,settingsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovesettingsRow(ByVal row As settingsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "settingsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BondDescriptionsDataTable
        Inherits Global.System.Data.TypedTableBase(Of BondDescriptionsRow)
        
        Private columnric As Global.System.Data.DataColumn
        
        Private columndescr As Global.System.Data.DataColumn
        
        Private columnpayments As Global.System.Data.DataColumn
        
        Private columnrates As Global.System.Data.DataColumn
        
        Private columnmaturitydate As Global.System.Data.DataColumn
        
        Private columnbondshortname As Global.System.Data.DataColumn
        
        Private columnis_putable As Global.System.Data.DataColumn
        
        Private columnissuedate As Global.System.Data.DataColumn
        
        Private columncoupon As Global.System.Data.DataColumn
        
        Private columnissuer_id As Global.System.Data.DataColumn
        
        Private columnissname As Global.System.Data.DataColumn
        
        Private columnissue_size As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BondDescriptions"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ricColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnric
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property descrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property paymentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpayments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ratesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrates
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property maturitydateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmaturitydate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bondshortnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbondshortname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property is_putableColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnis_putable
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property issuedateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnissuedate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property couponColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoupon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property issuer_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnissuer_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property issnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnissname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property issue_sizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnissue_size
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BondDescriptionsRow
            Get
                Return CType(Me.Rows(index),BondDescriptionsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BondDescriptionsRowChanging As BondDescriptionsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BondDescriptionsRowChanged As BondDescriptionsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BondDescriptionsRowDeleting As BondDescriptionsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BondDescriptionsRowDeleted As BondDescriptionsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddBondDescriptionsRow(ByVal row As BondDescriptionsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddBondDescriptionsRow(ByVal ric As String, ByVal descr As String, ByVal payments As String, ByVal rates As String, ByVal maturitydate As String, ByVal bondshortname As Object, ByVal is_putable As Boolean, ByVal issuedate As String, ByVal coupon As Double, ByVal issuer_id As Long, ByVal issname As String, ByVal issue_size As Double) As BondDescriptionsRow
            Dim rowBondDescriptionsRow As BondDescriptionsRow = CType(Me.NewRow,BondDescriptionsRow)
            Dim columnValuesArray() As Object = New Object() {ric, descr, payments, rates, maturitydate, bondshortname, is_putable, issuedate, coupon, issuer_id, issname, issue_size}
            rowBondDescriptionsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBondDescriptionsRow)
            Return rowBondDescriptionsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BondDescriptionsDataTable = CType(MyBase.Clone,BondDescriptionsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BondDescriptionsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnric = MyBase.Columns("ric")
            Me.columndescr = MyBase.Columns("descr")
            Me.columnpayments = MyBase.Columns("payments")
            Me.columnrates = MyBase.Columns("rates")
            Me.columnmaturitydate = MyBase.Columns("maturitydate")
            Me.columnbondshortname = MyBase.Columns("bondshortname")
            Me.columnis_putable = MyBase.Columns("is_putable")
            Me.columnissuedate = MyBase.Columns("issuedate")
            Me.columncoupon = MyBase.Columns("coupon")
            Me.columnissuer_id = MyBase.Columns("issuer_id")
            Me.columnissname = MyBase.Columns("issname")
            Me.columnissue_size = MyBase.Columns("issue_size")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnric = New Global.System.Data.DataColumn("ric", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnric)
            Me.columndescr = New Global.System.Data.DataColumn("descr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescr)
            Me.columnpayments = New Global.System.Data.DataColumn("payments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpayments)
            Me.columnrates = New Global.System.Data.DataColumn("rates", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrates)
            Me.columnmaturitydate = New Global.System.Data.DataColumn("maturitydate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmaturitydate)
            Me.columnbondshortname = New Global.System.Data.DataColumn("bondshortname", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbondshortname)
            Me.columnis_putable = New Global.System.Data.DataColumn("is_putable", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnis_putable)
            Me.columnissuedate = New Global.System.Data.DataColumn("issuedate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnissuedate)
            Me.columncoupon = New Global.System.Data.DataColumn("coupon", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoupon)
            Me.columnissuer_id = New Global.System.Data.DataColumn("issuer_id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnissuer_id)
            Me.columnissname = New Global.System.Data.DataColumn("issname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnissname)
            Me.columnissue_size = New Global.System.Data.DataColumn("issue_size", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnissue_size)
            Me.columnric.MaxLength = 2147483647
            Me.columndescr.MaxLength = 2147483647
            Me.columnpayments.MaxLength = 2147483647
            Me.columnrates.MaxLength = 2147483647
            Me.columnmaturitydate.MaxLength = 2147483647
            Me.columnissuedate.MaxLength = 2147483647
            Me.columnissname.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewBondDescriptionsRow() As BondDescriptionsRow
            Return CType(Me.NewRow,BondDescriptionsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BondDescriptionsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BondDescriptionsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BondDescriptionsRowChangedEvent) Is Nothing) Then
                RaiseEvent BondDescriptionsRowChanged(Me, New BondDescriptionsRowChangeEvent(CType(e.Row,BondDescriptionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BondDescriptionsRowChangingEvent) Is Nothing) Then
                RaiseEvent BondDescriptionsRowChanging(Me, New BondDescriptionsRowChangeEvent(CType(e.Row,BondDescriptionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BondDescriptionsRowDeletedEvent) Is Nothing) Then
                RaiseEvent BondDescriptionsRowDeleted(Me, New BondDescriptionsRowChangeEvent(CType(e.Row,BondDescriptionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BondDescriptionsRowDeletingEvent) Is Nothing) Then
                RaiseEvent BondDescriptionsRowDeleting(Me, New BondDescriptionsRowChangeEvent(CType(e.Row,BondDescriptionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveBondDescriptionsRow(ByVal row As BondDescriptionsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BondDescriptionsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class hawserDataTable
        Inherits Global.System.Data.TypedTableBase(Of hawserRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnhawser_name As Global.System.Data.DataColumn
        
        Private columncolor As Global.System.Data.DataColumn
        
        Private columnbid_field As Global.System.Data.DataColumn
        
        Private columnlast_field As Global.System.Data.DataColumn
        
        Private columnask_field As Global.System.Data.DataColumn
        
        Private columnhist_field As Global.System.Data.DataColumn
        
        Private columncurve As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "hawser"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property hawser_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhawser_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property colorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncolor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bid_fieldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbid_field
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property last_fieldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlast_field
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ask_fieldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnask_field
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property hist_fieldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhist_field
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property curveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncurve
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As hawserRow
            Get
                Return CType(Me.Rows(index),hawserRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event hawserRowChanging As hawserRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event hawserRowChanged As hawserRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event hawserRowDeleting As hawserRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event hawserRowDeleted As hawserRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddhawserRow(ByVal row As hawserRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddhawserRow(ByVal hawser_name As String, ByVal color As String, ByVal bid_field As String, ByVal last_field As String, ByVal ask_field As String, ByVal hist_field As String, ByVal curve As Boolean) As hawserRow
            Dim rowhawserRow As hawserRow = CType(Me.NewRow,hawserRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, hawser_name, color, bid_field, last_field, ask_field, hist_field, curve}
            rowhawserRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowhawserRow)
            Return rowhawserRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As hawserRow
            Return CType(Me.Rows.Find(New Object() {id}),hawserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As hawserDataTable = CType(MyBase.Clone,hawserDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New hawserDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnhawser_name = MyBase.Columns("hawser_name")
            Me.columncolor = MyBase.Columns("color")
            Me.columnbid_field = MyBase.Columns("bid_field")
            Me.columnlast_field = MyBase.Columns("last_field")
            Me.columnask_field = MyBase.Columns("ask_field")
            Me.columnhist_field = MyBase.Columns("hist_field")
            Me.columncurve = MyBase.Columns("curve")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnhawser_name = New Global.System.Data.DataColumn("hawser_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhawser_name)
            Me.columncolor = New Global.System.Data.DataColumn("color", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolor)
            Me.columnbid_field = New Global.System.Data.DataColumn("bid_field", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbid_field)
            Me.columnlast_field = New Global.System.Data.DataColumn("last_field", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlast_field)
            Me.columnask_field = New Global.System.Data.DataColumn("ask_field", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnask_field)
            Me.columnhist_field = New Global.System.Data.DataColumn("hist_field", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhist_field)
            Me.columncurve = New Global.System.Data.DataColumn("curve", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncurve)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columnhawser_name.MaxLength = 2147483647
            Me.columncolor.MaxLength = 2147483647
            Me.columnbid_field.MaxLength = 2147483647
            Me.columnlast_field.MaxLength = 2147483647
            Me.columnask_field.MaxLength = 2147483647
            Me.columnhist_field.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewhawserRow() As hawserRow
            Return CType(Me.NewRow,hawserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New hawserRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(hawserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.hawserRowChangedEvent) Is Nothing) Then
                RaiseEvent hawserRowChanged(Me, New hawserRowChangeEvent(CType(e.Row,hawserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.hawserRowChangingEvent) Is Nothing) Then
                RaiseEvent hawserRowChanging(Me, New hawserRowChangeEvent(CType(e.Row,hawserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.hawserRowDeletedEvent) Is Nothing) Then
                RaiseEvent hawserRowDeleted(Me, New hawserRowChangeEvent(CType(e.Row,hawserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.hawserRowDeletingEvent) Is Nothing) Then
                RaiseEvent hawserRowDeleting(Me, New hawserRowChangeEvent(CType(e.Row,hawserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovehawserRow(ByVal row As hawserRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "hawserDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class HawserDataDataTable
        Inherits Global.System.Data.TypedTableBase(Of HawserDataRow)
        
        Private columnhawser_id As Global.System.Data.DataColumn
        
        Private columnRIC As Global.System.Data.DataColumn
        
        Private columnBond As Global.System.Data.DataColumn
        
        Private columnbond_id As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "HawserData"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property hawser_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhawser_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RICColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BondColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBond
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bond_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbond_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As HawserDataRow
            Get
                Return CType(Me.Rows(index),HawserDataRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event HawserDataRowChanging As HawserDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event HawserDataRowChanged As HawserDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event HawserDataRowDeleting As HawserDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event HawserDataRowDeleted As HawserDataRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddHawserDataRow(ByVal row As HawserDataRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddHawserDataRow(ByVal RIC As String, ByVal Bond As Object, ByVal bond_id As Long) As HawserDataRow
            Dim rowHawserDataRow As HawserDataRow = CType(Me.NewRow,HawserDataRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, RIC, Bond, bond_id}
            rowHawserDataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowHawserDataRow)
            Return rowHawserDataRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByhawser_idbond_id(ByVal hawser_id As Long, ByVal bond_id As Long) As HawserDataRow
            Return CType(Me.Rows.Find(New Object() {hawser_id, bond_id}),HawserDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As HawserDataDataTable = CType(MyBase.Clone,HawserDataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New HawserDataDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnhawser_id = MyBase.Columns("hawser_id")
            Me.columnRIC = MyBase.Columns("RIC")
            Me.columnBond = MyBase.Columns("Bond")
            Me.columnbond_id = MyBase.Columns("bond_id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnhawser_id = New Global.System.Data.DataColumn("hawser_id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhawser_id)
            Me.columnRIC = New Global.System.Data.DataColumn("RIC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIC)
            Me.columnBond = New Global.System.Data.DataColumn("Bond", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBond)
            Me.columnbond_id = New Global.System.Data.DataColumn("bond_id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbond_id)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnhawser_id, Me.columnbond_id}, true))
            Me.columnhawser_id.AutoIncrement = true
            Me.columnhawser_id.AutoIncrementSeed = -1
            Me.columnhawser_id.AutoIncrementStep = -1
            Me.columnhawser_id.AllowDBNull = false
            Me.columnhawser_id.Caption = "[hawser_id]"
            Me.columnRIC.Caption = "[RIC]"
            Me.columnRIC.MaxLength = 2147483647
            Me.columnBond.Caption = "[Bond]"
            Me.columnbond_id.AllowDBNull = false
            Me.columnbond_id.Caption = "[bond_id]"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewHawserDataRow() As HawserDataRow
            Return CType(Me.NewRow,HawserDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New HawserDataRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(HawserDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.HawserDataRowChangedEvent) Is Nothing) Then
                RaiseEvent HawserDataRowChanged(Me, New HawserDataRowChangeEvent(CType(e.Row,HawserDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.HawserDataRowChangingEvent) Is Nothing) Then
                RaiseEvent HawserDataRowChanging(Me, New HawserDataRowChangeEvent(CType(e.Row,HawserDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.HawserDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent HawserDataRowDeleted(Me, New HawserDataRowChangeEvent(CType(e.Row,HawserDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.HawserDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent HawserDataRowDeleting(Me, New HawserDataRowChangeEvent(CType(e.Row,HawserDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveHawserDataRow(ByVal row As HawserDataRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "HawserDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class hawser_to_bondDataTable
        Inherits Global.System.Data.TypedTableBase(Of hawser_to_bondRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnid_hawser As Global.System.Data.DataColumn
        
        Private columnbond_ric As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "hawser_to_bond"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_hawserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_hawser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bond_ricColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbond_ric
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As hawser_to_bondRow
            Get
                Return CType(Me.Rows(index),hawser_to_bondRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event hawser_to_bondRowChanging As hawser_to_bondRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event hawser_to_bondRowChanged As hawser_to_bondRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event hawser_to_bondRowDeleting As hawser_to_bondRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event hawser_to_bondRowDeleted As hawser_to_bondRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addhawser_to_bondRow(ByVal row As hawser_to_bondRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addhawser_to_bondRow(ByVal id As Long, ByVal id_hawser As Long, ByVal bond_ric As String) As hawser_to_bondRow
            Dim rowhawser_to_bondRow As hawser_to_bondRow = CType(Me.NewRow,hawser_to_bondRow)
            Dim columnValuesArray() As Object = New Object() {id, id_hawser, bond_ric}
            rowhawser_to_bondRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowhawser_to_bondRow)
            Return rowhawser_to_bondRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As hawser_to_bondRow
            Return CType(Me.Rows.Find(New Object() {id}),hawser_to_bondRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As hawser_to_bondDataTable = CType(MyBase.Clone,hawser_to_bondDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New hawser_to_bondDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnid_hawser = MyBase.Columns("id_hawser")
            Me.columnbond_ric = MyBase.Columns("bond_ric")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnid_hawser = New Global.System.Data.DataColumn("id_hawser", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_hawser)
            Me.columnbond_ric = New Global.System.Data.DataColumn("bond_ric", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbond_ric)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columnid_hawser.AllowDBNull = false
            Me.columnbond_ric.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newhawser_to_bondRow() As hawser_to_bondRow
            Return CType(Me.NewRow,hawser_to_bondRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New hawser_to_bondRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(hawser_to_bondRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.hawser_to_bondRowChangedEvent) Is Nothing) Then
                RaiseEvent hawser_to_bondRowChanged(Me, New hawser_to_bondRowChangeEvent(CType(e.Row,hawser_to_bondRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.hawser_to_bondRowChangingEvent) Is Nothing) Then
                RaiseEvent hawser_to_bondRowChanging(Me, New hawser_to_bondRowChangeEvent(CType(e.Row,hawser_to_bondRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.hawser_to_bondRowDeletedEvent) Is Nothing) Then
                RaiseEvent hawser_to_bondRowDeleted(Me, New hawser_to_bondRowChangeEvent(CType(e.Row,hawser_to_bondRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.hawser_to_bondRowDeletingEvent) Is Nothing) Then
                RaiseEvent hawser_to_bondRowDeleting(Me, New hawser_to_bondRowChangeEvent(CType(e.Row,hawser_to_bondRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removehawser_to_bondRow(ByVal row As hawser_to_bondRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "hawser_to_bondDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class _portfolioByBondsDataTable
        Inherits Global.System.Data.TypedTableBase(Of _portfolioByBondsRow)
        
        Private columnpid As Global.System.Data.DataColumn
        
        Private columnbid As Global.System.Data.DataColumn
        
        Private columnric As Global.System.Data.DataColumn
        
        Private columndescr As Global.System.Data.DataColumn
        
        Private columnpayments As Global.System.Data.DataColumn
        
        Private columnrates As Global.System.Data.DataColumn
        
        Private columnbondshortname As Global.System.Data.DataColumn
        
        Private columndsply_name As Global.System.Data.DataColumn
        
        Private columninclude As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "_portfolioByBonds"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property pidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ricColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnric
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property descrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property paymentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpayments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ratesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrates
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bondshortnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbondshortname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property dsply_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndsply_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property includeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninclude
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As _portfolioByBondsRow
            Get
                Return CType(Me.Rows(index),_portfolioByBondsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event _portfolioByBondsRowChanging As _portfolioByBondsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event _portfolioByBondsRowChanged As _portfolioByBondsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event _portfolioByBondsRowDeleting As _portfolioByBondsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event _portfolioByBondsRowDeleted As _portfolioByBondsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Add_portfolioByBondsRow(ByVal row As _portfolioByBondsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Add_portfolioByBondsRow(ByVal bid As Long, ByVal ric As String, ByVal descr As String, ByVal payments As String, ByVal rates As String, ByVal bondshortname As Object, ByVal dsply_name As String, ByVal include As Boolean) As _portfolioByBondsRow
            Dim row_portfolioByBondsRow As _portfolioByBondsRow = CType(Me.NewRow,_portfolioByBondsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, bid, ric, descr, payments, rates, bondshortname, dsply_name, include}
            row_portfolioByBondsRow.ItemArray = columnValuesArray
            Me.Rows.Add(row_portfolioByBondsRow)
            Return row_portfolioByBondsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As _portfolioByBondsDataTable = CType(MyBase.Clone,_portfolioByBondsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New _portfolioByBondsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnpid = MyBase.Columns("pid")
            Me.columnbid = MyBase.Columns("bid")
            Me.columnric = MyBase.Columns("ric")
            Me.columndescr = MyBase.Columns("descr")
            Me.columnpayments = MyBase.Columns("payments")
            Me.columnrates = MyBase.Columns("rates")
            Me.columnbondshortname = MyBase.Columns("bondshortname")
            Me.columndsply_name = MyBase.Columns("dsply_name")
            Me.columninclude = MyBase.Columns("include")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnpid = New Global.System.Data.DataColumn("pid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpid)
            Me.columnbid = New Global.System.Data.DataColumn("bid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbid)
            Me.columnric = New Global.System.Data.DataColumn("ric", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnric)
            Me.columndescr = New Global.System.Data.DataColumn("descr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescr)
            Me.columnpayments = New Global.System.Data.DataColumn("payments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpayments)
            Me.columnrates = New Global.System.Data.DataColumn("rates", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrates)
            Me.columnbondshortname = New Global.System.Data.DataColumn("bondshortname", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbondshortname)
            Me.columndsply_name = New Global.System.Data.DataColumn("dsply_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndsply_name)
            Me.columninclude = New Global.System.Data.DataColumn("include", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninclude)
            Me.columnpid.AutoIncrement = true
            Me.columnpid.AutoIncrementSeed = -1
            Me.columnpid.AutoIncrementStep = -1
            Me.columnpid.AllowDBNull = false
            Me.columnpid.Caption = "[pid]"
            Me.columnbid.AllowDBNull = false
            Me.columnbid.Caption = "[bid]"
            Me.columnric.Caption = "[ric]"
            Me.columnric.MaxLength = 2147483647
            Me.columndescr.Caption = "[descr]"
            Me.columndescr.MaxLength = 2147483647
            Me.columnpayments.Caption = "[payments]"
            Me.columnpayments.MaxLength = 2147483647
            Me.columnrates.Caption = "[rates]"
            Me.columnrates.MaxLength = 2147483647
            Me.columnbondshortname.Caption = "[bondshortname]"
            Me.columndsply_name.Caption = "[dsply_name]"
            Me.columndsply_name.MaxLength = 2147483647
            Me.columninclude.Caption = "[include]"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function New_portfolioByBondsRow() As _portfolioByBondsRow
            Return CType(Me.NewRow,_portfolioByBondsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New _portfolioByBondsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(_portfolioByBondsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._portfolioByBondsRowChangedEvent) Is Nothing) Then
                RaiseEvent _portfolioByBondsRowChanged(Me, New _portfolioByBondsRowChangeEvent(CType(e.Row,_portfolioByBondsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._portfolioByBondsRowChangingEvent) Is Nothing) Then
                RaiseEvent _portfolioByBondsRowChanging(Me, New _portfolioByBondsRowChangeEvent(CType(e.Row,_portfolioByBondsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._portfolioByBondsRowDeletedEvent) Is Nothing) Then
                RaiseEvent _portfolioByBondsRowDeleted(Me, New _portfolioByBondsRowChangeEvent(CType(e.Row,_portfolioByBondsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._portfolioByBondsRowDeletingEvent) Is Nothing) Then
                RaiseEvent _portfolioByBondsRowDeleting(Me, New _portfolioByBondsRowChangeEvent(CType(e.Row,_portfolioByBondsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Remove_portfolioByBondsRow(ByVal row As _portfolioByBondsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "_portfolioByBondsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class _portfolioByChainDataTable
        Inherits Global.System.Data.TypedTableBase(Of _portfolioByChainRow)
        
        Private columnpid As Global.System.Data.DataColumn
        
        Private _column_bid_ As Global.System.Data.DataColumn
        
        Private _column_ric_ As Global.System.Data.DataColumn
        
        Private _column_descr_ As Global.System.Data.DataColumn
        
        Private _column_payments_ As Global.System.Data.DataColumn
        
        Private _column_rates_ As Global.System.Data.DataColumn
        
        Private _column_bondshortname_ As Global.System.Data.DataColumn
        
        Private _column_dsply_name_ As Global.System.Data.DataColumn
        
        Private _column_include_ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "_portfolioByChain"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property pidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __bid_Column() As Global.System.Data.DataColumn
            Get
                Return Me._column_bid_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __ric_Column() As Global.System.Data.DataColumn
            Get
                Return Me._column_ric_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __descr_Column() As Global.System.Data.DataColumn
            Get
                Return Me._column_descr_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __payments_Column() As Global.System.Data.DataColumn
            Get
                Return Me._column_payments_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __rates_Column() As Global.System.Data.DataColumn
            Get
                Return Me._column_rates_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __bondshortname_Column() As Global.System.Data.DataColumn
            Get
                Return Me._column_bondshortname_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __dsply_name_Column() As Global.System.Data.DataColumn
            Get
                Return Me._column_dsply_name_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __include_Column() As Global.System.Data.DataColumn
            Get
                Return Me._column_include_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As _portfolioByChainRow
            Get
                Return CType(Me.Rows(index),_portfolioByChainRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event _portfolioByChainRowChanging As _portfolioByChainRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event _portfolioByChainRowChanged As _portfolioByChainRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event _portfolioByChainRowDeleting As _portfolioByChainRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event _portfolioByChainRowDeleted As _portfolioByChainRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Add_portfolioByChainRow(ByVal row As _portfolioByChainRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Add_portfolioByChainRow(ByVal [bid] As Long, ByVal [ric] As String, ByVal [descr] As String, ByVal [payments] As String, ByVal [rates] As String, ByVal [bondshortname] As Object, ByVal [dsply_name] As String, ByVal [include] As Boolean) As _portfolioByChainRow
            Dim row_portfolioByChainRow As _portfolioByChainRow = CType(Me.NewRow,_portfolioByChainRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, [bid], [ric], [descr], [payments], [rates], [bondshortname], [dsply_name], [include]}
            row_portfolioByChainRow.ItemArray = columnValuesArray
            Me.Rows.Add(row_portfolioByChainRow)
            Return row_portfolioByChainRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As _portfolioByChainDataTable = CType(MyBase.Clone,_portfolioByChainDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New _portfolioByChainDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnpid = MyBase.Columns("pid")
            Me._column_bid_ = MyBase.Columns("[bid]")
            Me._column_ric_ = MyBase.Columns("[ric]")
            Me._column_descr_ = MyBase.Columns("[descr]")
            Me._column_payments_ = MyBase.Columns("[payments]")
            Me._column_rates_ = MyBase.Columns("[rates]")
            Me._column_bondshortname_ = MyBase.Columns("[bondshortname]")
            Me._column_dsply_name_ = MyBase.Columns("[dsply_name]")
            Me._column_include_ = MyBase.Columns("[include]")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnpid = New Global.System.Data.DataColumn("pid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpid)
            Me._column_bid_ = New Global.System.Data.DataColumn("[bid]", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me._column_bid_)
            Me._column_ric_ = New Global.System.Data.DataColumn("[ric]", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me._column_ric_)
            Me._column_descr_ = New Global.System.Data.DataColumn("[descr]", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me._column_descr_)
            Me._column_payments_ = New Global.System.Data.DataColumn("[payments]", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me._column_payments_)
            Me._column_rates_ = New Global.System.Data.DataColumn("[rates]", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me._column_rates_)
            Me._column_bondshortname_ = New Global.System.Data.DataColumn("[bondshortname]", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me._column_bondshortname_)
            Me._column_dsply_name_ = New Global.System.Data.DataColumn("[dsply_name]", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me._column_dsply_name_)
            Me._column_include_ = New Global.System.Data.DataColumn("[include]", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me._column_include_)
            Me.columnpid.AutoIncrement = true
            Me.columnpid.AutoIncrementSeed = -1
            Me.columnpid.AutoIncrementStep = -1
            Me.columnpid.AllowDBNull = false
            Me.columnpid.Caption = "[pid]"
            Me._column_bid_.AllowDBNull = false
            Me._column_ric_.MaxLength = 2147483647
            Me._column_descr_.MaxLength = 2147483647
            Me._column_payments_.MaxLength = 2147483647
            Me._column_rates_.MaxLength = 2147483647
            Me._column_dsply_name_.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function New_portfolioByChainRow() As _portfolioByChainRow
            Return CType(Me.NewRow,_portfolioByChainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New _portfolioByChainRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(_portfolioByChainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._portfolioByChainRowChangedEvent) Is Nothing) Then
                RaiseEvent _portfolioByChainRowChanged(Me, New _portfolioByChainRowChangeEvent(CType(e.Row,_portfolioByChainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._portfolioByChainRowChangingEvent) Is Nothing) Then
                RaiseEvent _portfolioByChainRowChanging(Me, New _portfolioByChainRowChangeEvent(CType(e.Row,_portfolioByChainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._portfolioByChainRowDeletedEvent) Is Nothing) Then
                RaiseEvent _portfolioByChainRowDeleted(Me, New _portfolioByChainRowChangeEvent(CType(e.Row,_portfolioByChainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._portfolioByChainRowDeletingEvent) Is Nothing) Then
                RaiseEvent _portfolioByChainRowDeleting(Me, New _portfolioByChainRowChangeEvent(CType(e.Row,_portfolioByChainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Remove_portfolioByChainRow(ByVal row As _portfolioByChainRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "_portfolioByChainDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class _portfolioByHawserDataTable
        Inherits Global.System.Data.TypedTableBase(Of _portfolioByHawserRow)
        
        Private columnpid As Global.System.Data.DataColumn
        
        Private _column_bid_ As Global.System.Data.DataColumn
        
        Private _column_ric_ As Global.System.Data.DataColumn
        
        Private _column_descr_ As Global.System.Data.DataColumn
        
        Private _column_payments_ As Global.System.Data.DataColumn
        
        Private _column_rates_ As Global.System.Data.DataColumn
        
        Private _column_bondshortname_ As Global.System.Data.DataColumn
        
        Private _column_dsply_name_ As Global.System.Data.DataColumn
        
        Private _column_include_ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "_portfolioByHawser"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property pidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __bid_Column() As Global.System.Data.DataColumn
            Get
                Return Me._column_bid_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __ric_Column() As Global.System.Data.DataColumn
            Get
                Return Me._column_ric_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __descr_Column() As Global.System.Data.DataColumn
            Get
                Return Me._column_descr_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __payments_Column() As Global.System.Data.DataColumn
            Get
                Return Me._column_payments_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __rates_Column() As Global.System.Data.DataColumn
            Get
                Return Me._column_rates_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __bondshortname_Column() As Global.System.Data.DataColumn
            Get
                Return Me._column_bondshortname_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __dsply_name_Column() As Global.System.Data.DataColumn
            Get
                Return Me._column_dsply_name_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __include_Column() As Global.System.Data.DataColumn
            Get
                Return Me._column_include_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As _portfolioByHawserRow
            Get
                Return CType(Me.Rows(index),_portfolioByHawserRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event _portfolioByHawserRowChanging As _portfolioByHawserRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event _portfolioByHawserRowChanged As _portfolioByHawserRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event _portfolioByHawserRowDeleting As _portfolioByHawserRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event _portfolioByHawserRowDeleted As _portfolioByHawserRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Add_portfolioByHawserRow(ByVal row As _portfolioByHawserRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Add_portfolioByHawserRow(ByVal [bid] As Long, ByVal [ric] As String, ByVal [descr] As String, ByVal [payments] As String, ByVal [rates] As String, ByVal [bondshortname] As Object, ByVal [dsply_name] As String, ByVal [include] As Boolean) As _portfolioByHawserRow
            Dim row_portfolioByHawserRow As _portfolioByHawserRow = CType(Me.NewRow,_portfolioByHawserRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, [bid], [ric], [descr], [payments], [rates], [bondshortname], [dsply_name], [include]}
            row_portfolioByHawserRow.ItemArray = columnValuesArray
            Me.Rows.Add(row_portfolioByHawserRow)
            Return row_portfolioByHawserRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As _portfolioByHawserDataTable = CType(MyBase.Clone,_portfolioByHawserDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New _portfolioByHawserDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnpid = MyBase.Columns("pid")
            Me._column_bid_ = MyBase.Columns("[bid]")
            Me._column_ric_ = MyBase.Columns("[ric]")
            Me._column_descr_ = MyBase.Columns("[descr]")
            Me._column_payments_ = MyBase.Columns("[payments]")
            Me._column_rates_ = MyBase.Columns("[rates]")
            Me._column_bondshortname_ = MyBase.Columns("[bondshortname]")
            Me._column_dsply_name_ = MyBase.Columns("[dsply_name]")
            Me._column_include_ = MyBase.Columns("[include]")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnpid = New Global.System.Data.DataColumn("pid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpid)
            Me._column_bid_ = New Global.System.Data.DataColumn("[bid]", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me._column_bid_)
            Me._column_ric_ = New Global.System.Data.DataColumn("[ric]", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me._column_ric_)
            Me._column_descr_ = New Global.System.Data.DataColumn("[descr]", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me._column_descr_)
            Me._column_payments_ = New Global.System.Data.DataColumn("[payments]", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me._column_payments_)
            Me._column_rates_ = New Global.System.Data.DataColumn("[rates]", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me._column_rates_)
            Me._column_bondshortname_ = New Global.System.Data.DataColumn("[bondshortname]", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me._column_bondshortname_)
            Me._column_dsply_name_ = New Global.System.Data.DataColumn("[dsply_name]", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me._column_dsply_name_)
            Me._column_include_ = New Global.System.Data.DataColumn("[include]", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me._column_include_)
            Me.columnpid.AutoIncrement = true
            Me.columnpid.AutoIncrementSeed = -1
            Me.columnpid.AutoIncrementStep = -1
            Me.columnpid.AllowDBNull = false
            Me.columnpid.Caption = "[pid]"
            Me._column_bid_.AllowDBNull = false
            Me._column_ric_.MaxLength = 2147483647
            Me._column_descr_.MaxLength = 2147483647
            Me._column_payments_.MaxLength = 2147483647
            Me._column_rates_.MaxLength = 2147483647
            Me._column_dsply_name_.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function New_portfolioByHawserRow() As _portfolioByHawserRow
            Return CType(Me.NewRow,_portfolioByHawserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New _portfolioByHawserRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(_portfolioByHawserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._portfolioByHawserRowChangedEvent) Is Nothing) Then
                RaiseEvent _portfolioByHawserRowChanged(Me, New _portfolioByHawserRowChangeEvent(CType(e.Row,_portfolioByHawserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._portfolioByHawserRowChangingEvent) Is Nothing) Then
                RaiseEvent _portfolioByHawserRowChanging(Me, New _portfolioByHawserRowChangeEvent(CType(e.Row,_portfolioByHawserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._portfolioByHawserRowDeletedEvent) Is Nothing) Then
                RaiseEvent _portfolioByHawserRowDeleted(Me, New _portfolioByHawserRowChangeEvent(CType(e.Row,_portfolioByHawserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._portfolioByHawserRowDeletingEvent) Is Nothing) Then
                RaiseEvent _portfolioByHawserRowDeleting(Me, New _portfolioByHawserRowChangeEvent(CType(e.Row,_portfolioByHawserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Remove_portfolioByHawserRow(ByVal row As _portfolioByHawserRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "_portfolioByHawserDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ChainsInPortfolioDataTable
        Inherits Global.System.Data.TypedTableBase(Of ChainsInPortfolioRow)
        
        Private columnpid As Global.System.Data.DataColumn
        
        Private columncid As Global.System.Data.DataColumn
        
        Private columnchain_name As Global.System.Data.DataColumn
        
        Private columninclude As Global.System.Data.DataColumn
        
        Private columncolor As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ChainsInPortfolio"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property pidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property cidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property chain_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchain_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property includeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninclude
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property colorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncolor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ChainsInPortfolioRow
            Get
                Return CType(Me.Rows(index),ChainsInPortfolioRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ChainsInPortfolioRowChanging As ChainsInPortfolioRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ChainsInPortfolioRowChanged As ChainsInPortfolioRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ChainsInPortfolioRowDeleting As ChainsInPortfolioRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ChainsInPortfolioRowDeleted As ChainsInPortfolioRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddChainsInPortfolioRow(ByVal row As ChainsInPortfolioRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddChainsInPortfolioRow(ByVal chain_name As String, ByVal include As Boolean, ByVal color As String) As ChainsInPortfolioRow
            Dim rowChainsInPortfolioRow As ChainsInPortfolioRow = CType(Me.NewRow,ChainsInPortfolioRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, chain_name, include, color}
            rowChainsInPortfolioRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowChainsInPortfolioRow)
            Return rowChainsInPortfolioRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ChainsInPortfolioDataTable = CType(MyBase.Clone,ChainsInPortfolioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ChainsInPortfolioDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnpid = MyBase.Columns("pid")
            Me.columncid = MyBase.Columns("cid")
            Me.columnchain_name = MyBase.Columns("chain_name")
            Me.columninclude = MyBase.Columns("include")
            Me.columncolor = MyBase.Columns("color")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnpid = New Global.System.Data.DataColumn("pid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpid)
            Me.columncid = New Global.System.Data.DataColumn("cid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncid)
            Me.columnchain_name = New Global.System.Data.DataColumn("chain_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchain_name)
            Me.columninclude = New Global.System.Data.DataColumn("include", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninclude)
            Me.columncolor = New Global.System.Data.DataColumn("color", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolor)
            Me.columnpid.AutoIncrement = true
            Me.columnpid.AutoIncrementSeed = -1
            Me.columnpid.AutoIncrementStep = -1
            Me.columnpid.AllowDBNull = false
            Me.columnpid.Caption = "[pid]"
            Me.columncid.AutoIncrement = true
            Me.columncid.AutoIncrementSeed = -1
            Me.columncid.AutoIncrementStep = -1
            Me.columncid.AllowDBNull = false
            Me.columncid.Caption = "[cid]"
            Me.columnchain_name.Caption = "[chain_name]"
            Me.columnchain_name.MaxLength = 2147483647
            Me.columninclude.Caption = "[include]"
            Me.columncolor.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewChainsInPortfolioRow() As ChainsInPortfolioRow
            Return CType(Me.NewRow,ChainsInPortfolioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ChainsInPortfolioRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ChainsInPortfolioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ChainsInPortfolioRowChangedEvent) Is Nothing) Then
                RaiseEvent ChainsInPortfolioRowChanged(Me, New ChainsInPortfolioRowChangeEvent(CType(e.Row,ChainsInPortfolioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ChainsInPortfolioRowChangingEvent) Is Nothing) Then
                RaiseEvent ChainsInPortfolioRowChanging(Me, New ChainsInPortfolioRowChangeEvent(CType(e.Row,ChainsInPortfolioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ChainsInPortfolioRowDeletedEvent) Is Nothing) Then
                RaiseEvent ChainsInPortfolioRowDeleted(Me, New ChainsInPortfolioRowChangeEvent(CType(e.Row,ChainsInPortfolioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ChainsInPortfolioRowDeletingEvent) Is Nothing) Then
                RaiseEvent ChainsInPortfolioRowDeleting(Me, New ChainsInPortfolioRowChangeEvent(CType(e.Row,ChainsInPortfolioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveChainsInPortfolioRow(ByVal row As ChainsInPortfolioRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ChainsInPortfolioDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class HawsersInPortfolioDataTable
        Inherits Global.System.Data.TypedTableBase(Of HawsersInPortfolioRow)
        
        Private columnpid As Global.System.Data.DataColumn
        
        Private columnhid As Global.System.Data.DataColumn
        
        Private columnhawser_name As Global.System.Data.DataColumn
        
        Private columninclude As Global.System.Data.DataColumn
        
        Private columncolor As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "HawsersInPortfolio"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property pidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property hidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property hawser_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhawser_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property includeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninclude
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property colorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncolor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As HawsersInPortfolioRow
            Get
                Return CType(Me.Rows(index),HawsersInPortfolioRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event HawsersInPortfolioRowChanging As HawsersInPortfolioRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event HawsersInPortfolioRowChanged As HawsersInPortfolioRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event HawsersInPortfolioRowDeleting As HawsersInPortfolioRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event HawsersInPortfolioRowDeleted As HawsersInPortfolioRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddHawsersInPortfolioRow(ByVal row As HawsersInPortfolioRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddHawsersInPortfolioRow(ByVal hawser_name As String, ByVal include As Boolean, ByVal color As String) As HawsersInPortfolioRow
            Dim rowHawsersInPortfolioRow As HawsersInPortfolioRow = CType(Me.NewRow,HawsersInPortfolioRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, hawser_name, include, color}
            rowHawsersInPortfolioRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowHawsersInPortfolioRow)
            Return rowHawsersInPortfolioRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As HawsersInPortfolioDataTable = CType(MyBase.Clone,HawsersInPortfolioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New HawsersInPortfolioDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnpid = MyBase.Columns("pid")
            Me.columnhid = MyBase.Columns("hid")
            Me.columnhawser_name = MyBase.Columns("hawser_name")
            Me.columninclude = MyBase.Columns("include")
            Me.columncolor = MyBase.Columns("color")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnpid = New Global.System.Data.DataColumn("pid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpid)
            Me.columnhid = New Global.System.Data.DataColumn("hid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhid)
            Me.columnhawser_name = New Global.System.Data.DataColumn("hawser_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhawser_name)
            Me.columninclude = New Global.System.Data.DataColumn("include", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninclude)
            Me.columncolor = New Global.System.Data.DataColumn("color", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolor)
            Me.columnpid.AutoIncrement = true
            Me.columnpid.AutoIncrementSeed = -1
            Me.columnpid.AutoIncrementStep = -1
            Me.columnpid.AllowDBNull = false
            Me.columnpid.Caption = "[pid]"
            Me.columnhid.AutoIncrement = true
            Me.columnhid.AutoIncrementSeed = -1
            Me.columnhid.AutoIncrementStep = -1
            Me.columnhid.AllowDBNull = false
            Me.columnhid.Caption = "[hid]"
            Me.columnhawser_name.Caption = "[hawser_name]"
            Me.columnhawser_name.MaxLength = 2147483647
            Me.columninclude.Caption = "[include]"
            Me.columncolor.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewHawsersInPortfolioRow() As HawsersInPortfolioRow
            Return CType(Me.NewRow,HawsersInPortfolioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New HawsersInPortfolioRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(HawsersInPortfolioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.HawsersInPortfolioRowChangedEvent) Is Nothing) Then
                RaiseEvent HawsersInPortfolioRowChanged(Me, New HawsersInPortfolioRowChangeEvent(CType(e.Row,HawsersInPortfolioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.HawsersInPortfolioRowChangingEvent) Is Nothing) Then
                RaiseEvent HawsersInPortfolioRowChanging(Me, New HawsersInPortfolioRowChangeEvent(CType(e.Row,HawsersInPortfolioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.HawsersInPortfolioRowDeletedEvent) Is Nothing) Then
                RaiseEvent HawsersInPortfolioRowDeleted(Me, New HawsersInPortfolioRowChangeEvent(CType(e.Row,HawsersInPortfolioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.HawsersInPortfolioRowDeletingEvent) Is Nothing) Then
                RaiseEvent HawsersInPortfolioRowDeleting(Me, New HawsersInPortfolioRowChangeEvent(CType(e.Row,HawsersInPortfolioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveHawsersInPortfolioRow(ByVal row As HawsersInPortfolioRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "HawsersInPortfolioDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class portfolio_to_bondDataTable
        Inherits Global.System.Data.TypedTableBase(Of portfolio_to_bondRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnid_portfolio As Global.System.Data.DataColumn
        
        Private columninclude As Global.System.Data.DataColumn
        
        Private columnbond_ric As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "portfolio_to_bond"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_portfolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_portfolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property includeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninclude
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bond_ricColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbond_ric
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As portfolio_to_bondRow
            Get
                Return CType(Me.Rows(index),portfolio_to_bondRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event portfolio_to_bondRowChanging As portfolio_to_bondRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event portfolio_to_bondRowChanged As portfolio_to_bondRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event portfolio_to_bondRowDeleting As portfolio_to_bondRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event portfolio_to_bondRowDeleted As portfolio_to_bondRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addportfolio_to_bondRow(ByVal row As portfolio_to_bondRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addportfolio_to_bondRow(ByVal id As Long, ByVal id_portfolio As Long, ByVal include As Boolean, ByVal bond_ric As String) As portfolio_to_bondRow
            Dim rowportfolio_to_bondRow As portfolio_to_bondRow = CType(Me.NewRow,portfolio_to_bondRow)
            Dim columnValuesArray() As Object = New Object() {id, id_portfolio, include, bond_ric}
            rowportfolio_to_bondRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowportfolio_to_bondRow)
            Return rowportfolio_to_bondRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As portfolio_to_bondRow
            Return CType(Me.Rows.Find(New Object() {id}),portfolio_to_bondRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As portfolio_to_bondDataTable = CType(MyBase.Clone,portfolio_to_bondDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New portfolio_to_bondDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnid_portfolio = MyBase.Columns("id_portfolio")
            Me.columninclude = MyBase.Columns("include")
            Me.columnbond_ric = MyBase.Columns("bond_ric")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnid_portfolio = New Global.System.Data.DataColumn("id_portfolio", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_portfolio)
            Me.columninclude = New Global.System.Data.DataColumn("include", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninclude)
            Me.columnbond_ric = New Global.System.Data.DataColumn("bond_ric", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbond_ric)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columnbond_ric.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newportfolio_to_bondRow() As portfolio_to_bondRow
            Return CType(Me.NewRow,portfolio_to_bondRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New portfolio_to_bondRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(portfolio_to_bondRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.portfolio_to_bondRowChangedEvent) Is Nothing) Then
                RaiseEvent portfolio_to_bondRowChanged(Me, New portfolio_to_bondRowChangeEvent(CType(e.Row,portfolio_to_bondRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.portfolio_to_bondRowChangingEvent) Is Nothing) Then
                RaiseEvent portfolio_to_bondRowChanging(Me, New portfolio_to_bondRowChangeEvent(CType(e.Row,portfolio_to_bondRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.portfolio_to_bondRowDeletedEvent) Is Nothing) Then
                RaiseEvent portfolio_to_bondRowDeleted(Me, New portfolio_to_bondRowChangeEvent(CType(e.Row,portfolio_to_bondRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.portfolio_to_bondRowDeletingEvent) Is Nothing) Then
                RaiseEvent portfolio_to_bondRowDeleting(Me, New portfolio_to_bondRowChangeEvent(CType(e.Row,portfolio_to_bondRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removeportfolio_to_bondRow(ByVal row As portfolio_to_bondRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "portfolio_to_bondDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class portfolio_to_chainDataTable
        Inherits Global.System.Data.TypedTableBase(Of portfolio_to_chainRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnid_portfolio As Global.System.Data.DataColumn
        
        Private columnid_chain As Global.System.Data.DataColumn
        
        Private columninclude As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "portfolio_to_chain"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_portfolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_portfolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_chainColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_chain
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property includeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninclude
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As portfolio_to_chainRow
            Get
                Return CType(Me.Rows(index),portfolio_to_chainRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event portfolio_to_chainRowChanging As portfolio_to_chainRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event portfolio_to_chainRowChanged As portfolio_to_chainRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event portfolio_to_chainRowDeleting As portfolio_to_chainRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event portfolio_to_chainRowDeleted As portfolio_to_chainRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addportfolio_to_chainRow(ByVal row As portfolio_to_chainRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addportfolio_to_chainRow(ByVal id As Long, ByVal id_portfolio As Long, ByVal id_chain As Long, ByVal include As Boolean) As portfolio_to_chainRow
            Dim rowportfolio_to_chainRow As portfolio_to_chainRow = CType(Me.NewRow,portfolio_to_chainRow)
            Dim columnValuesArray() As Object = New Object() {id, id_portfolio, id_chain, include}
            rowportfolio_to_chainRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowportfolio_to_chainRow)
            Return rowportfolio_to_chainRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As portfolio_to_chainRow
            Return CType(Me.Rows.Find(New Object() {id}),portfolio_to_chainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As portfolio_to_chainDataTable = CType(MyBase.Clone,portfolio_to_chainDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New portfolio_to_chainDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnid_portfolio = MyBase.Columns("id_portfolio")
            Me.columnid_chain = MyBase.Columns("id_chain")
            Me.columninclude = MyBase.Columns("include")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnid_portfolio = New Global.System.Data.DataColumn("id_portfolio", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_portfolio)
            Me.columnid_chain = New Global.System.Data.DataColumn("id_chain", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_chain)
            Me.columninclude = New Global.System.Data.DataColumn("include", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninclude)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newportfolio_to_chainRow() As portfolio_to_chainRow
            Return CType(Me.NewRow,portfolio_to_chainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New portfolio_to_chainRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(portfolio_to_chainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.portfolio_to_chainRowChangedEvent) Is Nothing) Then
                RaiseEvent portfolio_to_chainRowChanged(Me, New portfolio_to_chainRowChangeEvent(CType(e.Row,portfolio_to_chainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.portfolio_to_chainRowChangingEvent) Is Nothing) Then
                RaiseEvent portfolio_to_chainRowChanging(Me, New portfolio_to_chainRowChangeEvent(CType(e.Row,portfolio_to_chainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.portfolio_to_chainRowDeletedEvent) Is Nothing) Then
                RaiseEvent portfolio_to_chainRowDeleted(Me, New portfolio_to_chainRowChangeEvent(CType(e.Row,portfolio_to_chainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.portfolio_to_chainRowDeletingEvent) Is Nothing) Then
                RaiseEvent portfolio_to_chainRowDeleting(Me, New portfolio_to_chainRowChangeEvent(CType(e.Row,portfolio_to_chainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removeportfolio_to_chainRow(ByVal row As portfolio_to_chainRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "portfolio_to_chainDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class portfolio_to_hawserDataTable
        Inherits Global.System.Data.TypedTableBase(Of portfolio_to_hawserRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnid_portfolio As Global.System.Data.DataColumn
        
        Private columnid_hawser As Global.System.Data.DataColumn
        
        Private columninclude As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "portfolio_to_hawser"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_portfolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_portfolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_hawserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_hawser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property includeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninclude
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As portfolio_to_hawserRow
            Get
                Return CType(Me.Rows(index),portfolio_to_hawserRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event portfolio_to_hawserRowChanging As portfolio_to_hawserRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event portfolio_to_hawserRowChanged As portfolio_to_hawserRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event portfolio_to_hawserRowDeleting As portfolio_to_hawserRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event portfolio_to_hawserRowDeleted As portfolio_to_hawserRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addportfolio_to_hawserRow(ByVal row As portfolio_to_hawserRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addportfolio_to_hawserRow(ByVal id As Long, ByVal id_portfolio As Long, ByVal id_hawser As Long, ByVal include As Boolean) As portfolio_to_hawserRow
            Dim rowportfolio_to_hawserRow As portfolio_to_hawserRow = CType(Me.NewRow,portfolio_to_hawserRow)
            Dim columnValuesArray() As Object = New Object() {id, id_portfolio, id_hawser, include}
            rowportfolio_to_hawserRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowportfolio_to_hawserRow)
            Return rowportfolio_to_hawserRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As portfolio_to_hawserRow
            Return CType(Me.Rows.Find(New Object() {id}),portfolio_to_hawserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As portfolio_to_hawserDataTable = CType(MyBase.Clone,portfolio_to_hawserDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New portfolio_to_hawserDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnid_portfolio = MyBase.Columns("id_portfolio")
            Me.columnid_hawser = MyBase.Columns("id_hawser")
            Me.columninclude = MyBase.Columns("include")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnid_portfolio = New Global.System.Data.DataColumn("id_portfolio", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_portfolio)
            Me.columnid_hawser = New Global.System.Data.DataColumn("id_hawser", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_hawser)
            Me.columninclude = New Global.System.Data.DataColumn("include", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninclude)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newportfolio_to_hawserRow() As portfolio_to_hawserRow
            Return CType(Me.NewRow,portfolio_to_hawserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New portfolio_to_hawserRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(portfolio_to_hawserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.portfolio_to_hawserRowChangedEvent) Is Nothing) Then
                RaiseEvent portfolio_to_hawserRowChanged(Me, New portfolio_to_hawserRowChangeEvent(CType(e.Row,portfolio_to_hawserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.portfolio_to_hawserRowChangingEvent) Is Nothing) Then
                RaiseEvent portfolio_to_hawserRowChanging(Me, New portfolio_to_hawserRowChangeEvent(CType(e.Row,portfolio_to_hawserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.portfolio_to_hawserRowDeletedEvent) Is Nothing) Then
                RaiseEvent portfolio_to_hawserRowDeleted(Me, New portfolio_to_hawserRowChangeEvent(CType(e.Row,portfolio_to_hawserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.portfolio_to_hawserRowDeletingEvent) Is Nothing) Then
                RaiseEvent portfolio_to_hawserRowDeleting(Me, New portfolio_to_hawserRowChangeEvent(CType(e.Row,portfolio_to_hawserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removeportfolio_to_hawserRow(ByVal row As portfolio_to_hawserRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "portfolio_to_hawserDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PortfolioSourcesDataTable
        Inherits Global.System.Data.TypedTableBase(Of PortfolioSourcesRow)
        
        Private columnportfolioID As Global.System.Data.DataColumn
        
        Private columnwhereFrom As Global.System.Data.DataColumn
        
        Private columnfromID As Global.System.Data.DataColumn
        
        Private columnbid_field As Global.System.Data.DataColumn
        
        Private columnask_field As Global.System.Data.DataColumn
        
        Private columnlast_field As Global.System.Data.DataColumn
        
        Private columnhist_field As Global.System.Data.DataColumn
        
        Private columnportfolio_name As Global.System.Data.DataColumn
        
        Private columnric_structure As Global.System.Data.DataColumn
        
        Private columnwhereFromName As Global.System.Data.DataColumn
        
        Private columnwhereFromDescr As Global.System.Data.DataColumn
        
        Private columncolor As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PortfolioSources"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property portfolioIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnportfolioID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property whereFromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwhereFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property fromIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfromID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bid_fieldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbid_field
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ask_fieldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnask_field
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property last_fieldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlast_field
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property hist_fieldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhist_field
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property portfolio_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnportfolio_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ric_structureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnric_structure
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property whereFromNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwhereFromName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property whereFromDescrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwhereFromDescr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property colorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncolor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PortfolioSourcesRow
            Get
                Return CType(Me.Rows(index),PortfolioSourcesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PortfolioSourcesRowChanging As PortfolioSourcesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PortfolioSourcesRowChanged As PortfolioSourcesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PortfolioSourcesRowDeleting As PortfolioSourcesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PortfolioSourcesRowDeleted As PortfolioSourcesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPortfolioSourcesRow(ByVal row As PortfolioSourcesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPortfolioSourcesRow(ByVal whereFrom As Object, ByVal bid_field As String, ByVal ask_field As String, ByVal last_field As String, ByVal hist_field As String, ByVal portfolio_name As String, ByVal ric_structure As String, ByVal whereFromName As String, ByVal whereFromDescr As String, ByVal color As String) As PortfolioSourcesRow
            Dim rowPortfolioSourcesRow As PortfolioSourcesRow = CType(Me.NewRow,PortfolioSourcesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, whereFrom, Nothing, bid_field, ask_field, last_field, hist_field, portfolio_name, ric_structure, whereFromName, whereFromDescr, color}
            rowPortfolioSourcesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPortfolioSourcesRow)
            Return rowPortfolioSourcesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByportfolioIDfromID(ByVal portfolioID As Long, ByVal fromID As Long) As PortfolioSourcesRow
            Return CType(Me.Rows.Find(New Object() {portfolioID, fromID}),PortfolioSourcesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PortfolioSourcesDataTable = CType(MyBase.Clone,PortfolioSourcesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PortfolioSourcesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnportfolioID = MyBase.Columns("portfolioID")
            Me.columnwhereFrom = MyBase.Columns("whereFrom")
            Me.columnfromID = MyBase.Columns("fromID")
            Me.columnbid_field = MyBase.Columns("bid_field")
            Me.columnask_field = MyBase.Columns("ask_field")
            Me.columnlast_field = MyBase.Columns("last_field")
            Me.columnhist_field = MyBase.Columns("hist_field")
            Me.columnportfolio_name = MyBase.Columns("portfolio_name")
            Me.columnric_structure = MyBase.Columns("ric_structure")
            Me.columnwhereFromName = MyBase.Columns("whereFromName")
            Me.columnwhereFromDescr = MyBase.Columns("whereFromDescr")
            Me.columncolor = MyBase.Columns("color")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnportfolioID = New Global.System.Data.DataColumn("portfolioID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnportfolioID)
            Me.columnwhereFrom = New Global.System.Data.DataColumn("whereFrom", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwhereFrom)
            Me.columnfromID = New Global.System.Data.DataColumn("fromID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfromID)
            Me.columnbid_field = New Global.System.Data.DataColumn("bid_field", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbid_field)
            Me.columnask_field = New Global.System.Data.DataColumn("ask_field", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnask_field)
            Me.columnlast_field = New Global.System.Data.DataColumn("last_field", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlast_field)
            Me.columnhist_field = New Global.System.Data.DataColumn("hist_field", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhist_field)
            Me.columnportfolio_name = New Global.System.Data.DataColumn("portfolio_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnportfolio_name)
            Me.columnric_structure = New Global.System.Data.DataColumn("ric_structure", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnric_structure)
            Me.columnwhereFromName = New Global.System.Data.DataColumn("whereFromName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwhereFromName)
            Me.columnwhereFromDescr = New Global.System.Data.DataColumn("whereFromDescr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwhereFromDescr)
            Me.columncolor = New Global.System.Data.DataColumn("color", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolor)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnportfolioID, Me.columnfromID}, true))
            Me.columnportfolioID.AutoIncrement = true
            Me.columnportfolioID.AutoIncrementSeed = -1
            Me.columnportfolioID.AutoIncrementStep = -1
            Me.columnportfolioID.AllowDBNull = false
            Me.columnfromID.AutoIncrement = true
            Me.columnfromID.AutoIncrementSeed = -1
            Me.columnfromID.AutoIncrementStep = -1
            Me.columnfromID.AllowDBNull = false
            Me.columnbid_field.MaxLength = 2147483647
            Me.columnask_field.MaxLength = 2147483647
            Me.columnlast_field.MaxLength = 2147483647
            Me.columnhist_field.MaxLength = 2147483647
            Me.columnportfolio_name.MaxLength = 2147483647
            Me.columnric_structure.MaxLength = 2147483647
            Me.columnwhereFromName.MaxLength = 2147483647
            Me.columnwhereFromDescr.MaxLength = 2147483647
            Me.columncolor.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPortfolioSourcesRow() As PortfolioSourcesRow
            Return CType(Me.NewRow,PortfolioSourcesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PortfolioSourcesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PortfolioSourcesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PortfolioSourcesRowChangedEvent) Is Nothing) Then
                RaiseEvent PortfolioSourcesRowChanged(Me, New PortfolioSourcesRowChangeEvent(CType(e.Row,PortfolioSourcesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PortfolioSourcesRowChangingEvent) Is Nothing) Then
                RaiseEvent PortfolioSourcesRowChanging(Me, New PortfolioSourcesRowChangeEvent(CType(e.Row,PortfolioSourcesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PortfolioSourcesRowDeletedEvent) Is Nothing) Then
                RaiseEvent PortfolioSourcesRowDeleted(Me, New PortfolioSourcesRowChangeEvent(CType(e.Row,PortfolioSourcesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PortfolioSourcesRowDeletingEvent) Is Nothing) Then
                RaiseEvent PortfolioSourcesRowDeleting(Me, New PortfolioSourcesRowChangeEvent(CType(e.Row,PortfolioSourcesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePortfolioSourcesRow(ByVal row As PortfolioSourcesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PortfolioSourcesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class _ricsInChainDataTable
        Inherits Global.System.Data.TypedTableBase(Of _ricsInChainRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnric As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "_ricsInChain"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ricColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnric
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As _ricsInChainRow
            Get
                Return CType(Me.Rows(index),_ricsInChainRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event _ricsInChainRowChanging As _ricsInChainRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event _ricsInChainRowChanged As _ricsInChainRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event _ricsInChainRowDeleting As _ricsInChainRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event _ricsInChainRowDeleted As _ricsInChainRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Add_ricsInChainRow(ByVal row As _ricsInChainRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Add_ricsInChainRow(ByVal id As Long, ByVal ric As String) As _ricsInChainRow
            Dim row_ricsInChainRow As _ricsInChainRow = CType(Me.NewRow,_ricsInChainRow)
            Dim columnValuesArray() As Object = New Object() {id, ric}
            row_ricsInChainRow.ItemArray = columnValuesArray
            Me.Rows.Add(row_ricsInChainRow)
            Return row_ricsInChainRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As _ricsInChainDataTable = CType(MyBase.Clone,_ricsInChainDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New _ricsInChainDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnric = MyBase.Columns("ric")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnric = New Global.System.Data.DataColumn("ric", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnric)
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnric.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function New_ricsInChainRow() As _ricsInChainRow
            Return CType(Me.NewRow,_ricsInChainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New _ricsInChainRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(_ricsInChainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._ricsInChainRowChangedEvent) Is Nothing) Then
                RaiseEvent _ricsInChainRowChanged(Me, New _ricsInChainRowChangeEvent(CType(e.Row,_ricsInChainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._ricsInChainRowChangingEvent) Is Nothing) Then
                RaiseEvent _ricsInChainRowChanging(Me, New _ricsInChainRowChangeEvent(CType(e.Row,_ricsInChainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._ricsInChainRowDeletedEvent) Is Nothing) Then
                RaiseEvent _ricsInChainRowDeleted(Me, New _ricsInChainRowChangeEvent(CType(e.Row,_ricsInChainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._ricsInChainRowDeletingEvent) Is Nothing) Then
                RaiseEvent _ricsInChainRowDeleting(Me, New _ricsInChainRowChangeEvent(CType(e.Row,_ricsInChainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Remove_ricsInChainRow(ByVal row As _ricsInChainRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "_ricsInChainDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class _ricsInHawserDataTable
        Inherits Global.System.Data.TypedTableBase(Of _ricsInHawserRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnric As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "_ricsInHawser"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ricColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnric
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As _ricsInHawserRow
            Get
                Return CType(Me.Rows(index),_ricsInHawserRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event _ricsInHawserRowChanging As _ricsInHawserRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event _ricsInHawserRowChanged As _ricsInHawserRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event _ricsInHawserRowDeleting As _ricsInHawserRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event _ricsInHawserRowDeleted As _ricsInHawserRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Add_ricsInHawserRow(ByVal row As _ricsInHawserRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Add_ricsInHawserRow(ByVal ric As String) As _ricsInHawserRow
            Dim row_ricsInHawserRow As _ricsInHawserRow = CType(Me.NewRow,_ricsInHawserRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ric}
            row_ricsInHawserRow.ItemArray = columnValuesArray
            Me.Rows.Add(row_ricsInHawserRow)
            Return row_ricsInHawserRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As _ricsInHawserDataTable = CType(MyBase.Clone,_ricsInHawserDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New _ricsInHawserDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnric = MyBase.Columns("ric")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnric = New Global.System.Data.DataColumn("ric", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnric)
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnric.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function New_ricsInHawserRow() As _ricsInHawserRow
            Return CType(Me.NewRow,_ricsInHawserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New _ricsInHawserRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(_ricsInHawserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._ricsInHawserRowChangedEvent) Is Nothing) Then
                RaiseEvent _ricsInHawserRowChanged(Me, New _ricsInHawserRowChangeEvent(CType(e.Row,_ricsInHawserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._ricsInHawserRowChangingEvent) Is Nothing) Then
                RaiseEvent _ricsInHawserRowChanging(Me, New _ricsInHawserRowChangeEvent(CType(e.Row,_ricsInHawserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._ricsInHawserRowDeletedEvent) Is Nothing) Then
                RaiseEvent _ricsInHawserRowDeleted(Me, New _ricsInHawserRowChangeEvent(CType(e.Row,_ricsInHawserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._ricsInHawserRowDeletingEvent) Is Nothing) Then
                RaiseEvent _ricsInHawserRowDeleting(Me, New _ricsInHawserRowChangeEvent(CType(e.Row,_ricsInHawserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Remove_ricsInHawserRow(ByVal row As _ricsInHawserRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As BondsDataSet = New BondsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "_ricsInHawserDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class bondRow
        Inherits Global.System.Data.DataRow
        
        Private tablebond As bondDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablebond = CType(Me.Table,bondDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablebond.idColumn),Long)
            End Get
            Set
                Me(Me.tablebond.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ric() As String
            Get
                Try 
                    Return CType(Me(Me.tablebond.ricColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ric' в таблице 'bond' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebond.ricColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property payments() As String
            Get
                Try 
                    Return CType(Me(Me.tablebond.paymentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'payments' в таблице 'bond' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebond.paymentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rates() As String
            Get
                Try 
                    Return CType(Me(Me.tablebond.ratesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'rates' в таблице 'bond' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebond.ratesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property descr() As String
            Get
                Try 
                    Return CType(Me(Me.tablebond.descrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'descr' в таблице 'bond' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebond.descrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property series() As String
            Get
                Try 
                    Return CType(Me(Me.tablebond.seriesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'series' в таблице 'bond' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebond.seriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property issuer_id() As Long
            Get
                Try 
                    Return CType(Me(Me.tablebond.issuer_idColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'issuer_id' в таблице 'bond' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebond.issuer_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property currency_id() As Long
            Get
                Try 
                    Return CType(Me(Me.tablebond.currency_idColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'currency_id' в таблице 'bond' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebond.currency_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ir_fixing_ric() As String
            Get
                Try 
                    Return CType(Me(Me.tablebond.ir_fixing_ricColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ir_fixing_ric' в таблице 'bond' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebond.ir_fixing_ricColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property dsply_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablebond.dsply_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'dsply_name' в таблице 'bond' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebond.dsply_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property is_straight() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebond.is_straightColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'is_straight' в таблице 'bond' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebond.is_straightColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property is_putable() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebond.is_putableColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'is_putable' в таблице 'bond' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebond.is_putableColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property is_floater() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebond.is_floaterColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'is_floater' в таблице 'bond' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebond.is_floaterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property is_convertible() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebond.is_convertibleColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'is_convertible' в таблице 'bond' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebond.is_convertibleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property issue_size() As Double
            Get
                Try 
                    Return CType(Me(Me.tablebond.issue_sizeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'issue_size' в таблице 'bond' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebond.issue_sizeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property maturitydate() As String
            Get
                Try 
                    Return CType(Me(Me.tablebond.maturitydateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'maturitydate' в таблице 'bond' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebond.maturitydateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property issuedate() As String
            Get
                Try 
                    Return CType(Me(Me.tablebond.issuedateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'issuedate' в таблице 'bond' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebond.issuedateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nextputdate() As String
            Get
                Try 
                    Return CType(Me(Me.tablebond.nextputdateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'nextputdate' в таблице 'bond' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebond.nextputdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsricNull() As Boolean
            Return Me.IsNull(Me.tablebond.ricColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetricNull()
            Me(Me.tablebond.ricColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IspaymentsNull() As Boolean
            Return Me.IsNull(Me.tablebond.paymentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetpaymentsNull()
            Me(Me.tablebond.paymentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsratesNull() As Boolean
            Return Me.IsNull(Me.tablebond.ratesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetratesNull()
            Me(Me.tablebond.ratesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsdescrNull() As Boolean
            Return Me.IsNull(Me.tablebond.descrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetdescrNull()
            Me(Me.tablebond.descrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsseriesNull() As Boolean
            Return Me.IsNull(Me.tablebond.seriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetseriesNull()
            Me(Me.tablebond.seriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isissuer_idNull() As Boolean
            Return Me.IsNull(Me.tablebond.issuer_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setissuer_idNull()
            Me(Me.tablebond.issuer_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Iscurrency_idNull() As Boolean
            Return Me.IsNull(Me.tablebond.currency_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setcurrency_idNull()
            Me(Me.tablebond.currency_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isir_fixing_ricNull() As Boolean
            Return Me.IsNull(Me.tablebond.ir_fixing_ricColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setir_fixing_ricNull()
            Me(Me.tablebond.ir_fixing_ricColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isdsply_nameNull() As Boolean
            Return Me.IsNull(Me.tablebond.dsply_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setdsply_nameNull()
            Me(Me.tablebond.dsply_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isis_straightNull() As Boolean
            Return Me.IsNull(Me.tablebond.is_straightColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setis_straightNull()
            Me(Me.tablebond.is_straightColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isis_putableNull() As Boolean
            Return Me.IsNull(Me.tablebond.is_putableColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setis_putableNull()
            Me(Me.tablebond.is_putableColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isis_floaterNull() As Boolean
            Return Me.IsNull(Me.tablebond.is_floaterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setis_floaterNull()
            Me(Me.tablebond.is_floaterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isis_convertibleNull() As Boolean
            Return Me.IsNull(Me.tablebond.is_convertibleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setis_convertibleNull()
            Me(Me.tablebond.is_convertibleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isissue_sizeNull() As Boolean
            Return Me.IsNull(Me.tablebond.issue_sizeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setissue_sizeNull()
            Me(Me.tablebond.issue_sizeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmaturitydateNull() As Boolean
            Return Me.IsNull(Me.tablebond.maturitydateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmaturitydateNull()
            Me(Me.tablebond.maturitydateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsissuedateNull() As Boolean
            Return Me.IsNull(Me.tablebond.issuedateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetissuedateNull()
            Me(Me.tablebond.issuedateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsnextputdateNull() As Boolean
            Return Me.IsNull(Me.tablebond.nextputdateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetnextputdateNull()
            Me(Me.tablebond.nextputdateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class portfolioRow
        Inherits Global.System.Data.DataRow
        
        Private tableportfolio As portfolioDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableportfolio = CType(Me.Table,portfolioDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tableportfolio.idColumn),Long)
            End Get
            Set
                Me(Me.tableportfolio.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property portfolio_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableportfolio.portfolio_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'portfolio_name' в таблице 'portfolio' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableportfolio.portfolio_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property is_default() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableportfolio.is_defaultColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'is_default' в таблице 'portfolio' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableportfolio.is_defaultColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isportfolio_nameNull() As Boolean
            Return Me.IsNull(Me.tableportfolio.portfolio_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setportfolio_nameNull()
            Me(Me.tableportfolio.portfolio_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isis_defaultNull() As Boolean
            Return Me.IsNull(Me.tableportfolio.is_defaultColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setis_defaultNull()
            Me(Me.tableportfolio.is_defaultColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class chain_itemsRow
        Inherits Global.System.Data.DataRow
        
        Private tablechain_items As chain_itemsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablechain_items = CType(Me.Table,chain_itemsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablechain_items.idColumn),Long)
            End Get
            Set
                Me(Me.tablechain_items.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property item_ric() As String
            Get
                Try 
                    Return CType(Me(Me.tablechain_items.item_ricColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'item_ric' в таблице 'chain_items' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablechain_items.item_ricColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_chain() As Long
            Get
                Try 
                    Return CType(Me(Me.tablechain_items.id_chainColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'id_chain' в таблице 'chain_items' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablechain_items.id_chainColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isitem_ricNull() As Boolean
            Return Me.IsNull(Me.tablechain_items.item_ricColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setitem_ricNull()
            Me(Me.tablechain_items.item_ricColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isid_chainNull() As Boolean
            Return Me.IsNull(Me.tablechain_items.id_chainColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setid_chainNull()
            Me(Me.tablechain_items.id_chainColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class chainRow
        Inherits Global.System.Data.DataRow
        
        Private tablechain As chainDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablechain = CType(Me.Table,chainDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablechain.idColumn),Long)
            End Get
            Set
                Me(Me.tablechain.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property chain_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablechain.chain_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'chain_name' в таблице 'chain' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablechain.chain_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property descr() As String
            Get
                Try 
                    Return CType(Me(Me.tablechain.descrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'descr' в таблице 'chain' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablechain.descrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property curve() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablechain.curveColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'curve' в таблице 'chain' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablechain.curveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sort_num() As Long
            Get
                Try 
                    Return CType(Me(Me.tablechain.sort_numColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'sort_num' в таблице 'chain' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablechain.sort_numColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property is_necessary() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablechain.is_necessaryColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'is_necessary' в таблице 'chain' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablechain.is_necessaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property type() As String
            Get
                Try 
                    Return CType(Me(Me.tablechain.typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'type' в таблице 'chain' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablechain.typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property color() As String
            Get
                Try 
                    Return CType(Me(Me.tablechain.colorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'color' в таблице 'chain' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablechain.colorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bid_field() As String
            Get
                Try 
                    Return CType(Me(Me.tablechain.bid_fieldColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'bid_field' в таблице 'chain' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablechain.bid_fieldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ask_field() As String
            Get
                Try 
                    Return CType(Me(Me.tablechain.ask_fieldColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ask_field' в таблице 'chain' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablechain.ask_fieldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property last_field() As String
            Get
                Try 
                    Return CType(Me(Me.tablechain.last_fieldColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'last_field' в таблице 'chain' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablechain.last_fieldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property hist_field() As String
            Get
                Try 
                    Return CType(Me(Me.tablechain.hist_fieldColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'hist_field' в таблице 'chain' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablechain.hist_fieldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ischain_nameNull() As Boolean
            Return Me.IsNull(Me.tablechain.chain_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setchain_nameNull()
            Me(Me.tablechain.chain_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsdescrNull() As Boolean
            Return Me.IsNull(Me.tablechain.descrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetdescrNull()
            Me(Me.tablechain.descrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscurveNull() As Boolean
            Return Me.IsNull(Me.tablechain.curveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcurveNull()
            Me(Me.tablechain.curveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issort_numNull() As Boolean
            Return Me.IsNull(Me.tablechain.sort_numColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsort_numNull()
            Me(Me.tablechain.sort_numColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isis_necessaryNull() As Boolean
            Return Me.IsNull(Me.tablechain.is_necessaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setis_necessaryNull()
            Me(Me.tablechain.is_necessaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IstypeNull() As Boolean
            Return Me.IsNull(Me.tablechain.typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SettypeNull()
            Me(Me.tablechain.typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscolorNull() As Boolean
            Return Me.IsNull(Me.tablechain.colorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcolorNull()
            Me(Me.tablechain.colorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbid_fieldNull() As Boolean
            Return Me.IsNull(Me.tablechain.bid_fieldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbid_fieldNull()
            Me(Me.tablechain.bid_fieldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isask_fieldNull() As Boolean
            Return Me.IsNull(Me.tablechain.ask_fieldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setask_fieldNull()
            Me(Me.tablechain.ask_fieldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islast_fieldNull() As Boolean
            Return Me.IsNull(Me.tablechain.last_fieldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlast_fieldNull()
            Me(Me.tablechain.last_fieldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ishist_fieldNull() As Boolean
            Return Me.IsNull(Me.tablechain.hist_fieldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Sethist_fieldNull()
            Me(Me.tablechain.hist_fieldColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class countryRow
        Inherits Global.System.Data.DataRow
        
        Private tablecountry As countryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecountry = CType(Me.Table,countryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablecountry.idColumn),Long)
            End Get
            Set
                Me(Me.tablecountry.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property country() As String
            Get
                Try 
                    Return CType(Me(Me.tablecountry.countryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'country' в таблице 'country' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecountry.countryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscountryNull() As Boolean
            Return Me.IsNull(Me.tablecountry.countryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcountryNull()
            Me(Me.tablecountry.countryColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class currencyRow
        Inherits Global.System.Data.DataRow
        
        Private tablecurrency As currencyDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecurrency = CType(Me.Table,currencyDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablecurrency.idColumn),Long)
            End Get
            Set
                Me(Me.tablecurrency.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property currency() As String
            Get
                Try 
                    Return CType(Me(Me.tablecurrency.currencyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'currency' в таблице 'currency' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecurrency.currencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscurrencyNull() As Boolean
            Return Me.IsNull(Me.tablecurrency.currencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcurrencyNull()
            Me(Me.tablecurrency.currencyColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class issuerRow
        Inherits Global.System.Data.DataRow
        
        Private tableissuer As issuerDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableissuer = CType(Me.Table,issuerDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tableissuer.idColumn),Long)
            End Get
            Set
                Me(Me.tableissuer.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property shortname() As String
            Get
                Try 
                    Return CType(Me(Me.tableissuer.shortnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'shortname' в таблице 'issuer' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableissuer.shortnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property issuername() As String
            Get
                Try 
                    Return CType(Me(Me.tableissuer.issuernameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'issuername' в таблице 'issuer' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableissuer.issuernameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ticker() As String
            Get
                Try 
                    Return CType(Me(Me.tableissuer.tickerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ticker' в таблице 'issuer' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableissuer.tickerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property country_id() As Long
            Get
                Try 
                    Return CType(Me(Me.tableissuer.country_idColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'country_id' в таблице 'issuer' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableissuer.country_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsshortnameNull() As Boolean
            Return Me.IsNull(Me.tableissuer.shortnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetshortnameNull()
            Me(Me.tableissuer.shortnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsissuernameNull() As Boolean
            Return Me.IsNull(Me.tableissuer.issuernameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetissuernameNull()
            Me(Me.tableissuer.issuernameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IstickerNull() As Boolean
            Return Me.IsNull(Me.tableissuer.tickerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SettickerNull()
            Me(Me.tableissuer.tickerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Iscountry_idNull() As Boolean
            Return Me.IsNull(Me.tableissuer.country_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setcountry_idNull()
            Me(Me.tableissuer.country_idColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PortfolioUnitedRow
        Inherits Global.System.Data.DataRow
        
        Private tablePortfolioUnited As PortfolioUnitedDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePortfolioUnited = CType(Me.Table,PortfolioUnitedDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property pid() As Long
            Get
                Return CType(Me(Me.tablePortfolioUnited.pidColumn),Long)
            End Get
            Set
                Me(Me.tablePortfolioUnited.pidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bid() As Long
            Get
                Return CType(Me(Me.tablePortfolioUnited.bidColumn),Long)
            End Get
            Set
                Me(Me.tablePortfolioUnited.bidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ric() As String
            Get
                Try 
                    Return CType(Me(Me.tablePortfolioUnited.ricColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ric' в таблице 'PortfolioUnited' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePortfolioUnited.ricColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property descr() As String
            Get
                Try 
                    Return CType(Me(Me.tablePortfolioUnited.descrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'descr' в таблице 'PortfolioUnited' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePortfolioUnited.descrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property payments() As String
            Get
                Try 
                    Return CType(Me(Me.tablePortfolioUnited.paymentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'payments' в таблице 'PortfolioUnited' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePortfolioUnited.paymentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rates() As String
            Get
                Try 
                    Return CType(Me(Me.tablePortfolioUnited.ratesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'rates' в таблице 'PortfolioUnited' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePortfolioUnited.ratesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bondshortname() As Object
            Get
                Try 
                    Return CType(Me(Me.tablePortfolioUnited.bondshortnameColumn),Object)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'bondshortname' в таблице 'PortfolioUnited' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePortfolioUnited.bondshortnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property dsply_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablePortfolioUnited.dsply_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'dsply_name' в таблице 'PortfolioUnited' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePortfolioUnited.dsply_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property include() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePortfolioUnited.includeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'include' в таблице 'PortfolioUnited' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePortfolioUnited.includeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property color() As String
            Get
                Try 
                    Return CType(Me(Me.tablePortfolioUnited.colorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'color' в таблице 'PortfolioUnited' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePortfolioUnited.colorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property whereFrom() As Object
            Get
                Try 
                    Return CType(Me(Me.tablePortfolioUnited.whereFromColumn),Object)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'whereFrom' в таблице 'PortfolioUnited' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePortfolioUnited.whereFromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property fromID() As Long
            Get
                Return CType(Me(Me.tablePortfolioUnited.fromIDColumn),Long)
            End Get
            Set
                Me(Me.tablePortfolioUnited.fromIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsricNull() As Boolean
            Return Me.IsNull(Me.tablePortfolioUnited.ricColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetricNull()
            Me(Me.tablePortfolioUnited.ricColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsdescrNull() As Boolean
            Return Me.IsNull(Me.tablePortfolioUnited.descrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetdescrNull()
            Me(Me.tablePortfolioUnited.descrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IspaymentsNull() As Boolean
            Return Me.IsNull(Me.tablePortfolioUnited.paymentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetpaymentsNull()
            Me(Me.tablePortfolioUnited.paymentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsratesNull() As Boolean
            Return Me.IsNull(Me.tablePortfolioUnited.ratesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetratesNull()
            Me(Me.tablePortfolioUnited.ratesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsbondshortnameNull() As Boolean
            Return Me.IsNull(Me.tablePortfolioUnited.bondshortnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetbondshortnameNull()
            Me(Me.tablePortfolioUnited.bondshortnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isdsply_nameNull() As Boolean
            Return Me.IsNull(Me.tablePortfolioUnited.dsply_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setdsply_nameNull()
            Me(Me.tablePortfolioUnited.dsply_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsincludeNull() As Boolean
            Return Me.IsNull(Me.tablePortfolioUnited.includeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetincludeNull()
            Me(Me.tablePortfolioUnited.includeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscolorNull() As Boolean
            Return Me.IsNull(Me.tablePortfolioUnited.colorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcolorNull()
            Me(Me.tablePortfolioUnited.colorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IswhereFromNull() As Boolean
            Return Me.IsNull(Me.tablePortfolioUnited.whereFromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetwhereFromNull()
            Me(Me.tablePortfolioUnited.whereFromColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class settingsRow
        Inherits Global.System.Data.DataRow
        
        Private tablesettings As settingsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesettings = CType(Me.Table,settingsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property lastupdatedate() As String
            Get
                Try 
                    Return CType(Me(Me.tablesettings.lastupdatedateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'lastupdatedate' в таблице 'settings' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesettings.lastupdatedateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IslastupdatedateNull() As Boolean
            Return Me.IsNull(Me.tablesettings.lastupdatedateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetlastupdatedateNull()
            Me(Me.tablesettings.lastupdatedateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class BondDescriptionsRow
        Inherits Global.System.Data.DataRow
        
        Private tableBondDescriptions As BondDescriptionsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBondDescriptions = CType(Me.Table,BondDescriptionsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ric() As String
            Get
                Try 
                    Return CType(Me(Me.tableBondDescriptions.ricColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ric' в таблице 'BondDescriptions' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBondDescriptions.ricColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property descr() As String
            Get
                Try 
                    Return CType(Me(Me.tableBondDescriptions.descrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'descr' в таблице 'BondDescriptions' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBondDescriptions.descrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property payments() As String
            Get
                Try 
                    Return CType(Me(Me.tableBondDescriptions.paymentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'payments' в таблице 'BondDescriptions' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBondDescriptions.paymentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rates() As String
            Get
                Try 
                    Return CType(Me(Me.tableBondDescriptions.ratesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'rates' в таблице 'BondDescriptions' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBondDescriptions.ratesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property maturitydate() As String
            Get
                Try 
                    Return CType(Me(Me.tableBondDescriptions.maturitydateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'maturitydate' в таблице 'BondDescriptions' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBondDescriptions.maturitydateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bondshortname() As Object
            Get
                Try 
                    Return CType(Me(Me.tableBondDescriptions.bondshortnameColumn),Object)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'bondshortname' в таблице 'BondDescriptions' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBondDescriptions.bondshortnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property is_putable() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBondDescriptions.is_putableColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'is_putable' в таблице 'BondDescriptions' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBondDescriptions.is_putableColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property issuedate() As String
            Get
                Try 
                    Return CType(Me(Me.tableBondDescriptions.issuedateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'issuedate' в таблице 'BondDescriptions' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBondDescriptions.issuedateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property coupon() As Double
            Get
                Try 
                    Return CType(Me(Me.tableBondDescriptions.couponColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'coupon' в таблице 'BondDescriptions' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBondDescriptions.couponColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property issuer_id() As Long
            Get
                Try 
                    Return CType(Me(Me.tableBondDescriptions.issuer_idColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'issuer_id' в таблице 'BondDescriptions' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBondDescriptions.issuer_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property issname() As String
            Get
                Try 
                    Return CType(Me(Me.tableBondDescriptions.issnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'issname' в таблице 'BondDescriptions' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBondDescriptions.issnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property issue_size() As Double
            Get
                Try 
                    Return CType(Me(Me.tableBondDescriptions.issue_sizeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'issue_size' в таблице 'BondDescriptions' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBondDescriptions.issue_sizeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsricNull() As Boolean
            Return Me.IsNull(Me.tableBondDescriptions.ricColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetricNull()
            Me(Me.tableBondDescriptions.ricColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsdescrNull() As Boolean
            Return Me.IsNull(Me.tableBondDescriptions.descrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetdescrNull()
            Me(Me.tableBondDescriptions.descrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IspaymentsNull() As Boolean
            Return Me.IsNull(Me.tableBondDescriptions.paymentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetpaymentsNull()
            Me(Me.tableBondDescriptions.paymentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsratesNull() As Boolean
            Return Me.IsNull(Me.tableBondDescriptions.ratesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetratesNull()
            Me(Me.tableBondDescriptions.ratesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmaturitydateNull() As Boolean
            Return Me.IsNull(Me.tableBondDescriptions.maturitydateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmaturitydateNull()
            Me(Me.tableBondDescriptions.maturitydateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsbondshortnameNull() As Boolean
            Return Me.IsNull(Me.tableBondDescriptions.bondshortnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetbondshortnameNull()
            Me(Me.tableBondDescriptions.bondshortnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isis_putableNull() As Boolean
            Return Me.IsNull(Me.tableBondDescriptions.is_putableColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setis_putableNull()
            Me(Me.tableBondDescriptions.is_putableColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsissuedateNull() As Boolean
            Return Me.IsNull(Me.tableBondDescriptions.issuedateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetissuedateNull()
            Me(Me.tableBondDescriptions.issuedateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscouponNull() As Boolean
            Return Me.IsNull(Me.tableBondDescriptions.couponColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcouponNull()
            Me(Me.tableBondDescriptions.couponColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isissuer_idNull() As Boolean
            Return Me.IsNull(Me.tableBondDescriptions.issuer_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setissuer_idNull()
            Me(Me.tableBondDescriptions.issuer_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsissnameNull() As Boolean
            Return Me.IsNull(Me.tableBondDescriptions.issnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetissnameNull()
            Me(Me.tableBondDescriptions.issnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isissue_sizeNull() As Boolean
            Return Me.IsNull(Me.tableBondDescriptions.issue_sizeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setissue_sizeNull()
            Me(Me.tableBondDescriptions.issue_sizeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class hawserRow
        Inherits Global.System.Data.DataRow
        
        Private tablehawser As hawserDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablehawser = CType(Me.Table,hawserDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablehawser.idColumn),Long)
            End Get
            Set
                Me(Me.tablehawser.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property hawser_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablehawser.hawser_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'hawser_name' в таблице 'hawser' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehawser.hawser_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property color() As String
            Get
                Try 
                    Return CType(Me(Me.tablehawser.colorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'color' в таблице 'hawser' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehawser.colorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bid_field() As String
            Get
                Try 
                    Return CType(Me(Me.tablehawser.bid_fieldColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'bid_field' в таблице 'hawser' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehawser.bid_fieldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property last_field() As String
            Get
                Try 
                    Return CType(Me(Me.tablehawser.last_fieldColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'last_field' в таблице 'hawser' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehawser.last_fieldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ask_field() As String
            Get
                Try 
                    Return CType(Me(Me.tablehawser.ask_fieldColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ask_field' в таблице 'hawser' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehawser.ask_fieldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property hist_field() As String
            Get
                Try 
                    Return CType(Me(Me.tablehawser.hist_fieldColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'hist_field' в таблице 'hawser' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehawser.hist_fieldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property curve() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablehawser.curveColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'curve' в таблице 'hawser' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehawser.curveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ishawser_nameNull() As Boolean
            Return Me.IsNull(Me.tablehawser.hawser_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Sethawser_nameNull()
            Me(Me.tablehawser.hawser_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscolorNull() As Boolean
            Return Me.IsNull(Me.tablehawser.colorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcolorNull()
            Me(Me.tablehawser.colorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbid_fieldNull() As Boolean
            Return Me.IsNull(Me.tablehawser.bid_fieldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbid_fieldNull()
            Me(Me.tablehawser.bid_fieldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islast_fieldNull() As Boolean
            Return Me.IsNull(Me.tablehawser.last_fieldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlast_fieldNull()
            Me(Me.tablehawser.last_fieldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isask_fieldNull() As Boolean
            Return Me.IsNull(Me.tablehawser.ask_fieldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setask_fieldNull()
            Me(Me.tablehawser.ask_fieldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ishist_fieldNull() As Boolean
            Return Me.IsNull(Me.tablehawser.hist_fieldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Sethist_fieldNull()
            Me(Me.tablehawser.hist_fieldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscurveNull() As Boolean
            Return Me.IsNull(Me.tablehawser.curveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcurveNull()
            Me(Me.tablehawser.curveColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class HawserDataRow
        Inherits Global.System.Data.DataRow
        
        Private tableHawserData As HawserDataDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableHawserData = CType(Me.Table,HawserDataDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property hawser_id() As Long
            Get
                Return CType(Me(Me.tableHawserData.hawser_idColumn),Long)
            End Get
            Set
                Me(Me.tableHawserData.hawser_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RIC() As String
            Get
                Try 
                    Return CType(Me(Me.tableHawserData.RICColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'RIC' в таблице 'HawserData' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHawserData.RICColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Bond() As Object
            Get
                Try 
                    Return CType(Me(Me.tableHawserData.BondColumn),Object)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Bond' в таблице 'HawserData' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHawserData.BondColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bond_id() As Long
            Get
                Return CType(Me(Me.tableHawserData.bond_idColumn),Long)
            End Get
            Set
                Me(Me.tableHawserData.bond_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRICNull() As Boolean
            Return Me.IsNull(Me.tableHawserData.RICColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRICNull()
            Me(Me.tableHawserData.RICColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBondNull() As Boolean
            Return Me.IsNull(Me.tableHawserData.BondColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBondNull()
            Me(Me.tableHawserData.BondColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class hawser_to_bondRow
        Inherits Global.System.Data.DataRow
        
        Private tablehawser_to_bond As hawser_to_bondDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablehawser_to_bond = CType(Me.Table,hawser_to_bondDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablehawser_to_bond.idColumn),Long)
            End Get
            Set
                Me(Me.tablehawser_to_bond.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_hawser() As Long
            Get
                Return CType(Me(Me.tablehawser_to_bond.id_hawserColumn),Long)
            End Get
            Set
                Me(Me.tablehawser_to_bond.id_hawserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bond_ric() As String
            Get
                Try 
                    Return CType(Me(Me.tablehawser_to_bond.bond_ricColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'bond_ric' в таблице 'hawser_to_bond' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehawser_to_bond.bond_ricColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbond_ricNull() As Boolean
            Return Me.IsNull(Me.tablehawser_to_bond.bond_ricColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbond_ricNull()
            Me(Me.tablehawser_to_bond.bond_ricColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class _portfolioByBondsRow
        Inherits Global.System.Data.DataRow
        
        Private table_portfolioByBonds As _portfolioByBondsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.table_portfolioByBonds = CType(Me.Table,_portfolioByBondsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property pid() As Long
            Get
                Return CType(Me(Me.table_portfolioByBonds.pidColumn),Long)
            End Get
            Set
                Me(Me.table_portfolioByBonds.pidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bid() As Long
            Get
                Return CType(Me(Me.table_portfolioByBonds.bidColumn),Long)
            End Get
            Set
                Me(Me.table_portfolioByBonds.bidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ric() As String
            Get
                Try 
                    Return CType(Me(Me.table_portfolioByBonds.ricColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ric' в таблице '_portfolioByBonds' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_portfolioByBonds.ricColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property descr() As String
            Get
                Try 
                    Return CType(Me(Me.table_portfolioByBonds.descrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'descr' в таблице '_portfolioByBonds' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_portfolioByBonds.descrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property payments() As String
            Get
                Try 
                    Return CType(Me(Me.table_portfolioByBonds.paymentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'payments' в таблице '_portfolioByBonds' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_portfolioByBonds.paymentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rates() As String
            Get
                Try 
                    Return CType(Me(Me.table_portfolioByBonds.ratesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'rates' в таблице '_portfolioByBonds' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_portfolioByBonds.ratesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bondshortname() As Object
            Get
                Try 
                    Return CType(Me(Me.table_portfolioByBonds.bondshortnameColumn),Object)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'bondshortname' в таблице '_portfolioByBonds' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_portfolioByBonds.bondshortnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property dsply_name() As String
            Get
                Try 
                    Return CType(Me(Me.table_portfolioByBonds.dsply_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'dsply_name' в таблице '_portfolioByBonds' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_portfolioByBonds.dsply_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property include() As Boolean
            Get
                Try 
                    Return CType(Me(Me.table_portfolioByBonds.includeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'include' в таблице '_portfolioByBonds' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_portfolioByBonds.includeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsricNull() As Boolean
            Return Me.IsNull(Me.table_portfolioByBonds.ricColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetricNull()
            Me(Me.table_portfolioByBonds.ricColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsdescrNull() As Boolean
            Return Me.IsNull(Me.table_portfolioByBonds.descrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetdescrNull()
            Me(Me.table_portfolioByBonds.descrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IspaymentsNull() As Boolean
            Return Me.IsNull(Me.table_portfolioByBonds.paymentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetpaymentsNull()
            Me(Me.table_portfolioByBonds.paymentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsratesNull() As Boolean
            Return Me.IsNull(Me.table_portfolioByBonds.ratesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetratesNull()
            Me(Me.table_portfolioByBonds.ratesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsbondshortnameNull() As Boolean
            Return Me.IsNull(Me.table_portfolioByBonds.bondshortnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetbondshortnameNull()
            Me(Me.table_portfolioByBonds.bondshortnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isdsply_nameNull() As Boolean
            Return Me.IsNull(Me.table_portfolioByBonds.dsply_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setdsply_nameNull()
            Me(Me.table_portfolioByBonds.dsply_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsincludeNull() As Boolean
            Return Me.IsNull(Me.table_portfolioByBonds.includeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetincludeNull()
            Me(Me.table_portfolioByBonds.includeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class _portfolioByChainRow
        Inherits Global.System.Data.DataRow
        
        Private table_portfolioByChain As _portfolioByChainDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.table_portfolioByChain = CType(Me.Table,_portfolioByChainDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property pid() As Long
            Get
                Return CType(Me(Me.table_portfolioByChain.pidColumn),Long)
            End Get
            Set
                Me(Me.table_portfolioByChain.pidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property [bid]() As Long
            Get
                Return CType(Me(Me.table_portfolioByChain.__bid_Column),Long)
            End Get
            Set
                Me(Me.table_portfolioByChain.__bid_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property [ric]() As String
            Get
                Try 
                    Return CType(Me(Me.table_portfolioByChain.__ric_Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца '[ric]' в таблице '_portfolioByChain' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_portfolioByChain.__ric_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property [descr]() As String
            Get
                Try 
                    Return CType(Me(Me.table_portfolioByChain.__descr_Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца '[descr]' в таблице '_portfolioByChain' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_portfolioByChain.__descr_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property [payments]() As String
            Get
                Try 
                    Return CType(Me(Me.table_portfolioByChain.__payments_Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца '[payments]' в таблице '_portfolioByChain' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_portfolioByChain.__payments_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property [rates]() As String
            Get
                Try 
                    Return CType(Me(Me.table_portfolioByChain.__rates_Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца '[rates]' в таблице '_portfolioByChain' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_portfolioByChain.__rates_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property [bondshortname]() As Object
            Get
                Try 
                    Return CType(Me(Me.table_portfolioByChain.__bondshortname_Column),Object)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца '[bondshortname]' в таблице '_portfolioByChain' равно DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.table_portfolioByChain.__bondshortname_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property [dsply_name]() As String
            Get
                Try 
                    Return CType(Me(Me.table_portfolioByChain.__dsply_name_Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца '[dsply_name]' в таблице '_portfolioByChain' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_portfolioByChain.__dsply_name_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property [include]() As Boolean
            Get
                Try 
                    Return CType(Me(Me.table_portfolioByChain.__include_Column),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца '[include]' в таблице '_portfolioByChain' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_portfolioByChain.__include_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function _Is_ric_Null() As Boolean
            Return Me.IsNull(Me.table_portfolioByChain.__ric_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub _Set_ric_Null()
            Me(Me.table_portfolioByChain.__ric_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function _Is_descr_Null() As Boolean
            Return Me.IsNull(Me.table_portfolioByChain.__descr_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub _Set_descr_Null()
            Me(Me.table_portfolioByChain.__descr_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function _Is_payments_Null() As Boolean
            Return Me.IsNull(Me.table_portfolioByChain.__payments_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub _Set_payments_Null()
            Me(Me.table_portfolioByChain.__payments_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function _Is_rates_Null() As Boolean
            Return Me.IsNull(Me.table_portfolioByChain.__rates_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub _Set_rates_Null()
            Me(Me.table_portfolioByChain.__rates_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function _Is_bondshortname_Null() As Boolean
            Return Me.IsNull(Me.table_portfolioByChain.__bondshortname_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub _Set_bondshortname_Null()
            Me(Me.table_portfolioByChain.__bondshortname_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function _Is_dsply_name_Null() As Boolean
            Return Me.IsNull(Me.table_portfolioByChain.__dsply_name_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub _Set_dsply_name_Null()
            Me(Me.table_portfolioByChain.__dsply_name_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function _Is_include_Null() As Boolean
            Return Me.IsNull(Me.table_portfolioByChain.__include_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub _Set_include_Null()
            Me(Me.table_portfolioByChain.__include_Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class _portfolioByHawserRow
        Inherits Global.System.Data.DataRow
        
        Private table_portfolioByHawser As _portfolioByHawserDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.table_portfolioByHawser = CType(Me.Table,_portfolioByHawserDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property pid() As Long
            Get
                Return CType(Me(Me.table_portfolioByHawser.pidColumn),Long)
            End Get
            Set
                Me(Me.table_portfolioByHawser.pidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property [bid]() As Long
            Get
                Return CType(Me(Me.table_portfolioByHawser.__bid_Column),Long)
            End Get
            Set
                Me(Me.table_portfolioByHawser.__bid_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property [ric]() As String
            Get
                Try 
                    Return CType(Me(Me.table_portfolioByHawser.__ric_Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца '[ric]' в таблице '_portfolioByHawser' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_portfolioByHawser.__ric_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property [descr]() As String
            Get
                Try 
                    Return CType(Me(Me.table_portfolioByHawser.__descr_Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца '[descr]' в таблице '_portfolioByHawser' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_portfolioByHawser.__descr_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property [payments]() As String
            Get
                Try 
                    Return CType(Me(Me.table_portfolioByHawser.__payments_Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца '[payments]' в таблице '_portfolioByHawser' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_portfolioByHawser.__payments_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property [rates]() As String
            Get
                Try 
                    Return CType(Me(Me.table_portfolioByHawser.__rates_Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца '[rates]' в таблице '_portfolioByHawser' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_portfolioByHawser.__rates_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property [bondshortname]() As Object
            Get
                Try 
                    Return CType(Me(Me.table_portfolioByHawser.__bondshortname_Column),Object)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца '[bondshortname]' в таблице '_portfolioByHawser' равно DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.table_portfolioByHawser.__bondshortname_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property [dsply_name]() As String
            Get
                Try 
                    Return CType(Me(Me.table_portfolioByHawser.__dsply_name_Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца '[dsply_name]' в таблице '_portfolioByHawser' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_portfolioByHawser.__dsply_name_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property [include]() As Boolean
            Get
                Try 
                    Return CType(Me(Me.table_portfolioByHawser.__include_Column),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца '[include]' в таблице '_portfolioByHawser' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_portfolioByHawser.__include_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function _Is_ric_Null() As Boolean
            Return Me.IsNull(Me.table_portfolioByHawser.__ric_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub _Set_ric_Null()
            Me(Me.table_portfolioByHawser.__ric_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function _Is_descr_Null() As Boolean
            Return Me.IsNull(Me.table_portfolioByHawser.__descr_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub _Set_descr_Null()
            Me(Me.table_portfolioByHawser.__descr_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function _Is_payments_Null() As Boolean
            Return Me.IsNull(Me.table_portfolioByHawser.__payments_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub _Set_payments_Null()
            Me(Me.table_portfolioByHawser.__payments_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function _Is_rates_Null() As Boolean
            Return Me.IsNull(Me.table_portfolioByHawser.__rates_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub _Set_rates_Null()
            Me(Me.table_portfolioByHawser.__rates_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function _Is_bondshortname_Null() As Boolean
            Return Me.IsNull(Me.table_portfolioByHawser.__bondshortname_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub _Set_bondshortname_Null()
            Me(Me.table_portfolioByHawser.__bondshortname_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function _Is_dsply_name_Null() As Boolean
            Return Me.IsNull(Me.table_portfolioByHawser.__dsply_name_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub _Set_dsply_name_Null()
            Me(Me.table_portfolioByHawser.__dsply_name_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function _Is_include_Null() As Boolean
            Return Me.IsNull(Me.table_portfolioByHawser.__include_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub _Set_include_Null()
            Me(Me.table_portfolioByHawser.__include_Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ChainsInPortfolioRow
        Inherits Global.System.Data.DataRow
        
        Private tableChainsInPortfolio As ChainsInPortfolioDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableChainsInPortfolio = CType(Me.Table,ChainsInPortfolioDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property pid() As Long
            Get
                Return CType(Me(Me.tableChainsInPortfolio.pidColumn),Long)
            End Get
            Set
                Me(Me.tableChainsInPortfolio.pidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property cid() As Long
            Get
                Return CType(Me(Me.tableChainsInPortfolio.cidColumn),Long)
            End Get
            Set
                Me(Me.tableChainsInPortfolio.cidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property chain_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableChainsInPortfolio.chain_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'chain_name' в таблице 'ChainsInPortfolio' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChainsInPortfolio.chain_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property include() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableChainsInPortfolio.includeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'include' в таблице 'ChainsInPortfolio' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChainsInPortfolio.includeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property color() As String
            Get
                Try 
                    Return CType(Me(Me.tableChainsInPortfolio.colorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'color' в таблице 'ChainsInPortfolio' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChainsInPortfolio.colorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ischain_nameNull() As Boolean
            Return Me.IsNull(Me.tableChainsInPortfolio.chain_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setchain_nameNull()
            Me(Me.tableChainsInPortfolio.chain_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsincludeNull() As Boolean
            Return Me.IsNull(Me.tableChainsInPortfolio.includeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetincludeNull()
            Me(Me.tableChainsInPortfolio.includeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscolorNull() As Boolean
            Return Me.IsNull(Me.tableChainsInPortfolio.colorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcolorNull()
            Me(Me.tableChainsInPortfolio.colorColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class HawsersInPortfolioRow
        Inherits Global.System.Data.DataRow
        
        Private tableHawsersInPortfolio As HawsersInPortfolioDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableHawsersInPortfolio = CType(Me.Table,HawsersInPortfolioDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property pid() As Long
            Get
                Return CType(Me(Me.tableHawsersInPortfolio.pidColumn),Long)
            End Get
            Set
                Me(Me.tableHawsersInPortfolio.pidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property hid() As Long
            Get
                Return CType(Me(Me.tableHawsersInPortfolio.hidColumn),Long)
            End Get
            Set
                Me(Me.tableHawsersInPortfolio.hidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property hawser_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableHawsersInPortfolio.hawser_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'hawser_name' в таблице 'HawsersInPortfolio' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHawsersInPortfolio.hawser_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property include() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableHawsersInPortfolio.includeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'include' в таблице 'HawsersInPortfolio' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHawsersInPortfolio.includeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property color() As String
            Get
                Try 
                    Return CType(Me(Me.tableHawsersInPortfolio.colorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'color' в таблице 'HawsersInPortfolio' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHawsersInPortfolio.colorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ishawser_nameNull() As Boolean
            Return Me.IsNull(Me.tableHawsersInPortfolio.hawser_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Sethawser_nameNull()
            Me(Me.tableHawsersInPortfolio.hawser_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsincludeNull() As Boolean
            Return Me.IsNull(Me.tableHawsersInPortfolio.includeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetincludeNull()
            Me(Me.tableHawsersInPortfolio.includeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscolorNull() As Boolean
            Return Me.IsNull(Me.tableHawsersInPortfolio.colorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcolorNull()
            Me(Me.tableHawsersInPortfolio.colorColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class portfolio_to_bondRow
        Inherits Global.System.Data.DataRow
        
        Private tableportfolio_to_bond As portfolio_to_bondDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableportfolio_to_bond = CType(Me.Table,portfolio_to_bondDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tableportfolio_to_bond.idColumn),Long)
            End Get
            Set
                Me(Me.tableportfolio_to_bond.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_portfolio() As Long
            Get
                Try 
                    Return CType(Me(Me.tableportfolio_to_bond.id_portfolioColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'id_portfolio' в таблице 'portfolio_to_bond' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableportfolio_to_bond.id_portfolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property include() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableportfolio_to_bond.includeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'include' в таблице 'portfolio_to_bond' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableportfolio_to_bond.includeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bond_ric() As String
            Get
                Try 
                    Return CType(Me(Me.tableportfolio_to_bond.bond_ricColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'bond_ric' в таблице 'portfolio_to_bond' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableportfolio_to_bond.bond_ricColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isid_portfolioNull() As Boolean
            Return Me.IsNull(Me.tableportfolio_to_bond.id_portfolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setid_portfolioNull()
            Me(Me.tableportfolio_to_bond.id_portfolioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsincludeNull() As Boolean
            Return Me.IsNull(Me.tableportfolio_to_bond.includeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetincludeNull()
            Me(Me.tableportfolio_to_bond.includeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbond_ricNull() As Boolean
            Return Me.IsNull(Me.tableportfolio_to_bond.bond_ricColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbond_ricNull()
            Me(Me.tableportfolio_to_bond.bond_ricColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class portfolio_to_chainRow
        Inherits Global.System.Data.DataRow
        
        Private tableportfolio_to_chain As portfolio_to_chainDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableportfolio_to_chain = CType(Me.Table,portfolio_to_chainDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tableportfolio_to_chain.idColumn),Long)
            End Get
            Set
                Me(Me.tableportfolio_to_chain.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_portfolio() As Long
            Get
                Try 
                    Return CType(Me(Me.tableportfolio_to_chain.id_portfolioColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'id_portfolio' в таблице 'portfolio_to_chain' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableportfolio_to_chain.id_portfolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_chain() As Long
            Get
                Try 
                    Return CType(Me(Me.tableportfolio_to_chain.id_chainColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'id_chain' в таблице 'portfolio_to_chain' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableportfolio_to_chain.id_chainColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property include() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableportfolio_to_chain.includeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'include' в таблице 'portfolio_to_chain' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableportfolio_to_chain.includeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isid_portfolioNull() As Boolean
            Return Me.IsNull(Me.tableportfolio_to_chain.id_portfolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setid_portfolioNull()
            Me(Me.tableportfolio_to_chain.id_portfolioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isid_chainNull() As Boolean
            Return Me.IsNull(Me.tableportfolio_to_chain.id_chainColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setid_chainNull()
            Me(Me.tableportfolio_to_chain.id_chainColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsincludeNull() As Boolean
            Return Me.IsNull(Me.tableportfolio_to_chain.includeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetincludeNull()
            Me(Me.tableportfolio_to_chain.includeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class portfolio_to_hawserRow
        Inherits Global.System.Data.DataRow
        
        Private tableportfolio_to_hawser As portfolio_to_hawserDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableportfolio_to_hawser = CType(Me.Table,portfolio_to_hawserDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tableportfolio_to_hawser.idColumn),Long)
            End Get
            Set
                Me(Me.tableportfolio_to_hawser.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_portfolio() As Long
            Get
                Try 
                    Return CType(Me(Me.tableportfolio_to_hawser.id_portfolioColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'id_portfolio' в таблице 'portfolio_to_hawser' равно DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableportfolio_to_hawser.id_portfolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_hawser() As Long
            Get
                Try 
                    Return CType(Me(Me.tableportfolio_to_hawser.id_hawserColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'id_hawser' в таблице 'portfolio_to_hawser' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableportfolio_to_hawser.id_hawserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property include() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableportfolio_to_hawser.includeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'include' в таблице 'portfolio_to_hawser' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableportfolio_to_hawser.includeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isid_portfolioNull() As Boolean
            Return Me.IsNull(Me.tableportfolio_to_hawser.id_portfolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setid_portfolioNull()
            Me(Me.tableportfolio_to_hawser.id_portfolioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isid_hawserNull() As Boolean
            Return Me.IsNull(Me.tableportfolio_to_hawser.id_hawserColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setid_hawserNull()
            Me(Me.tableportfolio_to_hawser.id_hawserColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsincludeNull() As Boolean
            Return Me.IsNull(Me.tableportfolio_to_hawser.includeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetincludeNull()
            Me(Me.tableportfolio_to_hawser.includeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PortfolioSourcesRow
        Inherits Global.System.Data.DataRow
        
        Private tablePortfolioSources As PortfolioSourcesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePortfolioSources = CType(Me.Table,PortfolioSourcesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property portfolioID() As Long
            Get
                Return CType(Me(Me.tablePortfolioSources.portfolioIDColumn),Long)
            End Get
            Set
                Me(Me.tablePortfolioSources.portfolioIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property whereFrom() As Object
            Get
                Try 
                    Return CType(Me(Me.tablePortfolioSources.whereFromColumn),Object)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'whereFrom' в таблице 'PortfolioSources' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePortfolioSources.whereFromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property fromID() As Long
            Get
                Return CType(Me(Me.tablePortfolioSources.fromIDColumn),Long)
            End Get
            Set
                Me(Me.tablePortfolioSources.fromIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bid_field() As String
            Get
                Try 
                    Return CType(Me(Me.tablePortfolioSources.bid_fieldColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'bid_field' в таблице 'PortfolioSources' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePortfolioSources.bid_fieldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ask_field() As String
            Get
                Try 
                    Return CType(Me(Me.tablePortfolioSources.ask_fieldColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ask_field' в таблице 'PortfolioSources' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePortfolioSources.ask_fieldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property last_field() As String
            Get
                Try 
                    Return CType(Me(Me.tablePortfolioSources.last_fieldColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'last_field' в таблице 'PortfolioSources' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePortfolioSources.last_fieldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property hist_field() As String
            Get
                Try 
                    Return CType(Me(Me.tablePortfolioSources.hist_fieldColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'hist_field' в таблице 'PortfolioSources' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePortfolioSources.hist_fieldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property portfolio_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablePortfolioSources.portfolio_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'portfolio_name' в таблице 'PortfolioSources' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePortfolioSources.portfolio_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ric_structure() As String
            Get
                Try 
                    Return CType(Me(Me.tablePortfolioSources.ric_structureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ric_structure' в таблице 'PortfolioSources' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePortfolioSources.ric_structureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property whereFromName() As String
            Get
                Try 
                    Return CType(Me(Me.tablePortfolioSources.whereFromNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'whereFromName' в таблице 'PortfolioSources' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePortfolioSources.whereFromNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property whereFromDescr() As String
            Get
                Try 
                    Return CType(Me(Me.tablePortfolioSources.whereFromDescrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'whereFromDescr' в таблице 'PortfolioSources' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePortfolioSources.whereFromDescrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property color() As String
            Get
                Try 
                    Return CType(Me(Me.tablePortfolioSources.colorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'color' в таблице 'PortfolioSources' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePortfolioSources.colorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IswhereFromNull() As Boolean
            Return Me.IsNull(Me.tablePortfolioSources.whereFromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetwhereFromNull()
            Me(Me.tablePortfolioSources.whereFromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbid_fieldNull() As Boolean
            Return Me.IsNull(Me.tablePortfolioSources.bid_fieldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbid_fieldNull()
            Me(Me.tablePortfolioSources.bid_fieldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isask_fieldNull() As Boolean
            Return Me.IsNull(Me.tablePortfolioSources.ask_fieldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setask_fieldNull()
            Me(Me.tablePortfolioSources.ask_fieldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islast_fieldNull() As Boolean
            Return Me.IsNull(Me.tablePortfolioSources.last_fieldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlast_fieldNull()
            Me(Me.tablePortfolioSources.last_fieldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ishist_fieldNull() As Boolean
            Return Me.IsNull(Me.tablePortfolioSources.hist_fieldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Sethist_fieldNull()
            Me(Me.tablePortfolioSources.hist_fieldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isportfolio_nameNull() As Boolean
            Return Me.IsNull(Me.tablePortfolioSources.portfolio_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setportfolio_nameNull()
            Me(Me.tablePortfolioSources.portfolio_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isric_structureNull() As Boolean
            Return Me.IsNull(Me.tablePortfolioSources.ric_structureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setric_structureNull()
            Me(Me.tablePortfolioSources.ric_structureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IswhereFromNameNull() As Boolean
            Return Me.IsNull(Me.tablePortfolioSources.whereFromNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetwhereFromNameNull()
            Me(Me.tablePortfolioSources.whereFromNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IswhereFromDescrNull() As Boolean
            Return Me.IsNull(Me.tablePortfolioSources.whereFromDescrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetwhereFromDescrNull()
            Me(Me.tablePortfolioSources.whereFromDescrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscolorNull() As Boolean
            Return Me.IsNull(Me.tablePortfolioSources.colorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcolorNull()
            Me(Me.tablePortfolioSources.colorColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class _ricsInChainRow
        Inherits Global.System.Data.DataRow
        
        Private table_ricsInChain As _ricsInChainDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.table_ricsInChain = CType(Me.Table,_ricsInChainDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.table_ricsInChain.idColumn),Long)
            End Get
            Set
                Me(Me.table_ricsInChain.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ric() As String
            Get
                Try 
                    Return CType(Me(Me.table_ricsInChain.ricColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ric' в таблице '_ricsInChain' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ricsInChain.ricColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsricNull() As Boolean
            Return Me.IsNull(Me.table_ricsInChain.ricColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetricNull()
            Me(Me.table_ricsInChain.ricColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class _ricsInHawserRow
        Inherits Global.System.Data.DataRow
        
        Private table_ricsInHawser As _ricsInHawserDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.table_ricsInHawser = CType(Me.Table,_ricsInHawserDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.table_ricsInHawser.idColumn),Long)
            End Get
            Set
                Me(Me.table_ricsInHawser.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ric() As String
            Get
                Try 
                    Return CType(Me(Me.table_ricsInHawser.ricColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ric' в таблице '_ricsInHawser' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ricsInHawser.ricColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsricNull() As Boolean
            Return Me.IsNull(Me.table_ricsInHawser.ricColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetricNull()
            Me(Me.table_ricsInHawser.ricColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class bondRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As bondRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As bondRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As bondRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class portfolioRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As portfolioRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As portfolioRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As portfolioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class chain_itemsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As chain_itemsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As chain_itemsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As chain_itemsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class chainRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As chainRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As chainRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As chainRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class countryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As countryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As countryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As countryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class currencyRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As currencyRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As currencyRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As currencyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class issuerRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As issuerRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As issuerRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As issuerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PortfolioUnitedRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PortfolioUnitedRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PortfolioUnitedRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PortfolioUnitedRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class settingsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As settingsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As settingsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As settingsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class BondDescriptionsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BondDescriptionsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As BondDescriptionsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As BondDescriptionsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class hawserRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As hawserRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As hawserRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As hawserRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class HawserDataRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As HawserDataRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As HawserDataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As HawserDataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class hawser_to_bondRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As hawser_to_bondRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As hawser_to_bondRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As hawser_to_bondRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class _portfolioByBondsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As _portfolioByBondsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As _portfolioByBondsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As _portfolioByBondsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class _portfolioByChainRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As _portfolioByChainRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As _portfolioByChainRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As _portfolioByChainRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class _portfolioByHawserRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As _portfolioByHawserRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As _portfolioByHawserRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As _portfolioByHawserRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ChainsInPortfolioRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ChainsInPortfolioRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ChainsInPortfolioRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ChainsInPortfolioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class HawsersInPortfolioRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As HawsersInPortfolioRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As HawsersInPortfolioRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As HawsersInPortfolioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class portfolio_to_bondRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As portfolio_to_bondRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As portfolio_to_bondRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As portfolio_to_bondRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class portfolio_to_chainRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As portfolio_to_chainRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As portfolio_to_chainRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As portfolio_to_chainRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class portfolio_to_hawserRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As portfolio_to_hawserRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As portfolio_to_hawserRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As portfolio_to_hawserRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PortfolioSourcesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PortfolioSourcesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PortfolioSourcesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PortfolioSourcesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class _ricsInChainRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As _ricsInChainRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As _ricsInChainRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As _ricsInChainRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class _ricsInHawserRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As _ricsInHawserRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As _ricsInHawserRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As _ricsInHawserRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace BondsDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class bondTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "bond"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("ric", "ric")
            tableMapping.ColumnMappings.Add("payments", "payments")
            tableMapping.ColumnMappings.Add("rates", "rates")
            tableMapping.ColumnMappings.Add("descr", "descr")
            tableMapping.ColumnMappings.Add("series", "series")
            tableMapping.ColumnMappings.Add("issuer_id", "issuer_id")
            tableMapping.ColumnMappings.Add("currency_id", "currency_id")
            tableMapping.ColumnMappings.Add("ir_fixing_ric", "ir_fixing_ric")
            tableMapping.ColumnMappings.Add("dsply_name", "dsply_name")
            tableMapping.ColumnMappings.Add("is_straight", "is_straight")
            tableMapping.ColumnMappings.Add("is_putable", "is_putable")
            tableMapping.ColumnMappings.Add("is_floater", "is_floater")
            tableMapping.ColumnMappings.Add("is_convertible", "is_convertible")
            tableMapping.ColumnMappings.Add("issue_size", "issue_size")
            tableMapping.ColumnMappings.Add("maturitydate", "maturitydate")
            tableMapping.ColumnMappings.Add("issuedate", "issuedate")
            tableMapping.ColumnMappings.Add("nextputdate", "nextputdate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [bond] WHERE (([id] = @Original_id) AND ((@IsNull_ric = 1 AND [ric] I"& _ 
                "S NULL) OR ([ric] = @Original_ric)) AND ((@IsNull_payments = 1 AND [payments] IS"& _ 
                " NULL) OR ([payments] = @Original_payments)) AND ((@IsNull_rates = 1 AND [rates]"& _ 
                " IS NULL) OR ([rates] = @Original_rates)) AND ((@IsNull_descr = 1 AND [descr] IS"& _ 
                " NULL) OR ([descr] = @Original_descr)) AND ((@IsNull_series = 1 AND [series] IS "& _ 
                "NULL) OR ([series] = @Original_series)) AND ((@IsNull_issuer_id = 1 AND [issuer_"& _ 
                "id] IS NULL) OR ([issuer_id] = @Original_issuer_id)) AND ((@IsNull_currency_id ="& _ 
                " 1 AND [currency_id] IS NULL) OR ([currency_id] = @Original_currency_id)) AND (("& _ 
                "@IsNull_ir_fixing_ric = 1 AND [ir_fixing_ric] IS NULL) OR ([ir_fixing_ric] = @Or"& _ 
                "iginal_ir_fixing_ric)) AND ((@IsNull_dsply_name = 1 AND [dsply_name] IS NULL) OR"& _ 
                " ([dsply_name] = @Original_dsply_name)) AND ((@IsNull_is_straight = 1 AND [is_st"& _ 
                "raight] IS NULL) OR ([is_straight] = @Original_is_straight)) AND ((@IsNull_is_pu"& _ 
                "table = 1 AND [is_putable] IS NULL) OR ([is_putable] = @Original_is_putable)) AN"& _ 
                "D ((@IsNull_is_floater = 1 AND [is_floater] IS NULL) OR ([is_floater] = @Origina"& _ 
                "l_is_floater)) AND ((@IsNull_is_convertible = 1 AND [is_convertible] IS NULL) OR"& _ 
                " ([is_convertible] = @Original_is_convertible)) AND ((@IsNull_issue_size = 1 AND"& _ 
                " [issue_size] IS NULL) OR ([issue_size] = @Original_issue_size)) AND ((@IsNull_m"& _ 
                "aturitydate = 1 AND [maturitydate] IS NULL) OR ([maturitydate] = @Original_matur"& _ 
                "itydate)) AND ((@IsNull_issuedate = 1 AND [issuedate] IS NULL) OR ([issuedate] ="& _ 
                " @Original_issuedate)) AND ((@IsNull_nextputdate = 1 AND [nextputdate] IS NULL) "& _ 
                "OR ([nextputdate] = @Original_nextputdate)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ric"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_payments"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "payments"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_payments"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "payments"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_rates"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "rates"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_rates"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "rates"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_descr"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "descr"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_descr"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "descr"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_series"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "series"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_series"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "series"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_issuer_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "issuer_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_issuer_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "issuer_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_currency_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "currency_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_currency_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "currency_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ir_fixing_ric"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ir_fixing_ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ir_fixing_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ir_fixing_ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_dsply_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "dsply_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_dsply_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "dsply_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_is_straight"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "is_straight"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_is_straight"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_straight"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_is_putable"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "is_putable"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_is_putable"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_putable"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_is_floater"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "is_floater"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_is_floater"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_floater"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_is_convertible"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "is_convertible"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_is_convertible"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_convertible"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_issue_size"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "issue_size"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_issue_size"
            param.DbType = Global.System.Data.DbType.[Double]
            param.DbType = Global.System.Data.DbType.[Double]
            param.SourceColumn = "issue_size"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_maturitydate"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "maturitydate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_maturitydate"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "maturitydate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_issuedate"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "issuedate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_issuedate"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "issuedate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_nextputdate"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "nextputdate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nextputdate"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "nextputdate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [bond] ([id], [ric], [payments], [rates], [descr], [series], [issuer_"& _ 
                "id], [currency_id], [ir_fixing_ric], [dsply_name], [is_straight], [is_putable], "& _ 
                "[is_floater], [is_convertible], [issue_size], [maturitydate], [issuedate], [next"& _ 
                "putdate]) VALUES (@id, @ric, @payments, @rates, @descr, @series, @issuer_id, @cu"& _ 
                "rrency_id, @ir_fixing_ric, @dsply_name, @is_straight, @is_putable, @is_floater, "& _ 
                "@is_convertible, @issue_size, @maturitydate, @issuedate, @nextputdate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ric"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@payments"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "payments"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@rates"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "rates"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@descr"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "descr"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@series"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "series"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@issuer_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "issuer_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@currency_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "currency_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ir_fixing_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ir_fixing_ric"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@dsply_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "dsply_name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@is_straight"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_straight"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@is_putable"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_putable"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@is_floater"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_floater"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@is_convertible"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_convertible"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@issue_size"
            param.DbType = Global.System.Data.DbType.[Double]
            param.DbType = Global.System.Data.DbType.[Double]
            param.SourceColumn = "issue_size"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@maturitydate"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "maturitydate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@issuedate"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "issuedate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nextputdate"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "nextputdate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [bond] SET [id] = @id, [ric] = @ric, [payments] = @payments, [rates] = @ra"& _ 
                "tes, [descr] = @descr, [series] = @series, [issuer_id] = @issuer_id, [currency_i"& _ 
                "d] = @currency_id, [ir_fixing_ric] = @ir_fixing_ric, [dsply_name] = @dsply_name,"& _ 
                " [is_straight] = @is_straight, [is_putable] = @is_putable, [is_floater] = @is_fl"& _ 
                "oater, [is_convertible] = @is_convertible, [issue_size] = @issue_size, [maturity"& _ 
                "date] = @maturitydate, [issuedate] = @issuedate, [nextputdate] = @nextputdate WH"& _ 
                "ERE (([id] = @Original_id) AND ((@IsNull_ric = 1 AND [ric] IS NULL) OR ([ric] = "& _ 
                "@Original_ric)) AND ((@IsNull_payments = 1 AND [payments] IS NULL) OR ([payments"& _ 
                "] = @Original_payments)) AND ((@IsNull_rates = 1 AND [rates] IS NULL) OR ([rates"& _ 
                "] = @Original_rates)) AND ((@IsNull_descr = 1 AND [descr] IS NULL) OR ([descr] ="& _ 
                " @Original_descr)) AND ((@IsNull_series = 1 AND [series] IS NULL) OR ([series] ="& _ 
                " @Original_series)) AND ((@IsNull_issuer_id = 1 AND [issuer_id] IS NULL) OR ([is"& _ 
                "suer_id] = @Original_issuer_id)) AND ((@IsNull_currency_id = 1 AND [currency_id]"& _ 
                " IS NULL) OR ([currency_id] = @Original_currency_id)) AND ((@IsNull_ir_fixing_ri"& _ 
                "c = 1 AND [ir_fixing_ric] IS NULL) OR ([ir_fixing_ric] = @Original_ir_fixing_ric"& _ 
                ")) AND ((@IsNull_dsply_name = 1 AND [dsply_name] IS NULL) OR ([dsply_name] = @Or"& _ 
                "iginal_dsply_name)) AND ((@IsNull_is_straight = 1 AND [is_straight] IS NULL) OR "& _ 
                "([is_straight] = @Original_is_straight)) AND ((@IsNull_is_putable = 1 AND [is_pu"& _ 
                "table] IS NULL) OR ([is_putable] = @Original_is_putable)) AND ((@IsNull_is_float"& _ 
                "er = 1 AND [is_floater] IS NULL) OR ([is_floater] = @Original_is_floater)) AND ("& _ 
                "(@IsNull_is_convertible = 1 AND [is_convertible] IS NULL) OR ([is_convertible] ="& _ 
                " @Original_is_convertible)) AND ((@IsNull_issue_size = 1 AND [issue_size] IS NUL"& _ 
                "L) OR ([issue_size] = @Original_issue_size)) AND ((@IsNull_maturitydate = 1 AND "& _ 
                "[maturitydate] IS NULL) OR ([maturitydate] = @Original_maturitydate)) AND ((@IsN"& _ 
                "ull_issuedate = 1 AND [issuedate] IS NULL) OR ([issuedate] = @Original_issuedate"& _ 
                ")) AND ((@IsNull_nextputdate = 1 AND [nextputdate] IS NULL) OR ([nextputdate] = "& _ 
                "@Original_nextputdate)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ric"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@payments"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "payments"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@rates"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "rates"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@descr"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "descr"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@series"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "series"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@issuer_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "issuer_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@currency_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "currency_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ir_fixing_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ir_fixing_ric"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@dsply_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "dsply_name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@is_straight"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_straight"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@is_putable"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_putable"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@is_floater"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_floater"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@is_convertible"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_convertible"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@issue_size"
            param.DbType = Global.System.Data.DbType.[Double]
            param.DbType = Global.System.Data.DbType.[Double]
            param.SourceColumn = "issue_size"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@maturitydate"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "maturitydate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@issuedate"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "issuedate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nextputdate"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "nextputdate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ric"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_payments"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "payments"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_payments"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "payments"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_rates"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "rates"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_rates"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "rates"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_descr"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "descr"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_descr"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "descr"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_series"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "series"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_series"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "series"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_issuer_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "issuer_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_issuer_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "issuer_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_currency_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "currency_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_currency_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "currency_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ir_fixing_ric"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ir_fixing_ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ir_fixing_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ir_fixing_ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_dsply_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "dsply_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_dsply_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "dsply_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_is_straight"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "is_straight"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_is_straight"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_straight"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_is_putable"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "is_putable"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_is_putable"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_putable"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_is_floater"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "is_floater"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_is_floater"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_floater"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_is_convertible"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "is_convertible"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_is_convertible"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_convertible"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_issue_size"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "issue_size"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_issue_size"
            param.DbType = Global.System.Data.DbType.[Double]
            param.DbType = Global.System.Data.DbType.[Double]
            param.SourceColumn = "issue_size"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_maturitydate"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "maturitydate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_maturitydate"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "maturitydate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_issuedate"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "issuedate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_issuedate"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "issuedate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_nextputdate"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "nextputdate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nextputdate"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "nextputdate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        id, ric, payments, rates, descr, series, issuer_id, currency_id, ir"& _ 
                "_fixing_ric, dsply_name, is_straight, is_putable, is_floater, is_convertible, is"& _ 
                "sue_size, maturitydate, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         issuedate, nextputdate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM "& _ 
                "           bond"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM [bond] "
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet.bondDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet.bondDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet.bondDataTable = New BondsDataSet.bondDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As BondsDataSet.bondDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As BondsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "bond")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_id As Long,  _
                    ByVal Original_ric As String,  _
                    ByVal Original_payments As String,  _
                    ByVal Original_rates As String,  _
                    ByVal Original_descr As String,  _
                    ByVal Original_series As String,  _
                    ByVal Original_issuer_id As Global.System.Nullable(Of Long),  _
                    ByVal Original_currency_id As Global.System.Nullable(Of Long),  _
                    ByVal Original_ir_fixing_ric As String,  _
                    ByVal Original_dsply_name As String,  _
                    ByVal Original_is_straight As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_is_putable As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_is_floater As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_is_convertible As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_issue_size As Global.System.Nullable(Of Double),  _
                    ByVal Original_maturitydate As String,  _
                    ByVal Original_issuedate As String,  _
                    ByVal Original_nextputdate As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_ric Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ric,String)
            End If
            If (Original_payments Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_payments,String)
            End If
            If (Original_rates Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_rates,String)
            End If
            If (Original_descr Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_descr,String)
            End If
            If (Original_series Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_series,String)
            End If
            If (Original_issuer_id.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_issuer_id.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_currency_id.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_currency_id.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_ir_fixing_ric Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_ir_fixing_ric,String)
            End If
            If (Original_dsply_name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_dsply_name,String)
            End If
            If (Original_is_straight.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_is_straight.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_is_putable.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_is_putable.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_is_floater.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_is_floater.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_is_convertible.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_is_convertible.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_issue_size.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_issue_size.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_maturitydate Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_maturitydate,String)
            End If
            If (Original_issuedate Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_issuedate,String)
            End If
            If (Original_nextputdate Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_nextputdate,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal id As Long,  _
                    ByVal ric As String,  _
                    ByVal payments As String,  _
                    ByVal rates As String,  _
                    ByVal descr As String,  _
                    ByVal series As String,  _
                    ByVal issuer_id As Global.System.Nullable(Of Long),  _
                    ByVal currency_id As Global.System.Nullable(Of Long),  _
                    ByVal ir_fixing_ric As String,  _
                    ByVal dsply_name As String,  _
                    ByVal is_straight As Global.System.Nullable(Of Boolean),  _
                    ByVal is_putable As Global.System.Nullable(Of Boolean),  _
                    ByVal is_floater As Global.System.Nullable(Of Boolean),  _
                    ByVal is_convertible As Global.System.Nullable(Of Boolean),  _
                    ByVal issue_size As Global.System.Nullable(Of Double),  _
                    ByVal maturitydate As String,  _
                    ByVal issuedate As String,  _
                    ByVal nextputdate As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id,Long)
            If (ric Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ric,String)
            End If
            If (payments Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(payments,String)
            End If
            If (rates Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(rates,String)
            End If
            If (descr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(descr,String)
            End If
            If (series Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(series,String)
            End If
            If (issuer_id.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(issuer_id.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (currency_id.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(currency_id.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (ir_fixing_ric Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ir_fixing_ric,String)
            End If
            If (dsply_name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(dsply_name,String)
            End If
            If (is_straight.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(is_straight.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (is_putable.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(is_putable.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (is_floater.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(is_floater.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (is_convertible.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(is_convertible.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (issue_size.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(issue_size.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (maturitydate Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(maturitydate,String)
            End If
            If (issuedate Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(issuedate,String)
            End If
            If (nextputdate Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(nextputdate,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal id As Long,  _
                    ByVal ric As String,  _
                    ByVal payments As String,  _
                    ByVal rates As String,  _
                    ByVal descr As String,  _
                    ByVal series As String,  _
                    ByVal issuer_id As Global.System.Nullable(Of Long),  _
                    ByVal currency_id As Global.System.Nullable(Of Long),  _
                    ByVal ir_fixing_ric As String,  _
                    ByVal dsply_name As String,  _
                    ByVal is_straight As Global.System.Nullable(Of Boolean),  _
                    ByVal is_putable As Global.System.Nullable(Of Boolean),  _
                    ByVal is_floater As Global.System.Nullable(Of Boolean),  _
                    ByVal is_convertible As Global.System.Nullable(Of Boolean),  _
                    ByVal issue_size As Global.System.Nullable(Of Double),  _
                    ByVal maturitydate As String,  _
                    ByVal issuedate As String,  _
                    ByVal nextputdate As String,  _
                    ByVal Original_id As Long,  _
                    ByVal Original_ric As String,  _
                    ByVal Original_payments As String,  _
                    ByVal Original_rates As String,  _
                    ByVal Original_descr As String,  _
                    ByVal Original_series As String,  _
                    ByVal Original_issuer_id As Global.System.Nullable(Of Long),  _
                    ByVal Original_currency_id As Global.System.Nullable(Of Long),  _
                    ByVal Original_ir_fixing_ric As String,  _
                    ByVal Original_dsply_name As String,  _
                    ByVal Original_is_straight As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_is_putable As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_is_floater As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_is_convertible As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_issue_size As Global.System.Nullable(Of Double),  _
                    ByVal Original_maturitydate As String,  _
                    ByVal Original_issuedate As String,  _
                    ByVal Original_nextputdate As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id,Long)
            If (ric Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ric,String)
            End If
            If (payments Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(payments,String)
            End If
            If (rates Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(rates,String)
            End If
            If (descr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(descr,String)
            End If
            If (series Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(series,String)
            End If
            If (issuer_id.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(issuer_id.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (currency_id.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(currency_id.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (ir_fixing_ric Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ir_fixing_ric,String)
            End If
            If (dsply_name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(dsply_name,String)
            End If
            If (is_straight.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(is_straight.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (is_putable.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(is_putable.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (is_floater.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(is_floater.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (is_convertible.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(is_convertible.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (issue_size.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(issue_size.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (maturitydate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(maturitydate,String)
            End If
            If (issuedate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(issuedate,String)
            End If
            If (nextputdate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(nextputdate,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_id,Long)
            If (Original_ric Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_ric,String)
            End If
            If (Original_payments Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_payments,String)
            End If
            If (Original_rates Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_rates,String)
            End If
            If (Original_descr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_descr,String)
            End If
            If (Original_series Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_series,String)
            End If
            If (Original_issuer_id.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_issuer_id.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_currency_id.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_currency_id.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_ir_fixing_ric Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_ir_fixing_ric,String)
            End If
            If (Original_dsply_name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_dsply_name,String)
            End If
            If (Original_is_straight.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_is_straight.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_is_putable.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_is_putable.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_is_floater.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_is_floater.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_is_convertible.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_is_convertible.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_issue_size.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_issue_size.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_maturitydate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_maturitydate,String)
            End If
            If (Original_issuedate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_issuedate,String)
            End If
            If (Original_nextputdate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_nextputdate,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ric As String,  _
                    ByVal payments As String,  _
                    ByVal rates As String,  _
                    ByVal descr As String,  _
                    ByVal series As String,  _
                    ByVal issuer_id As Global.System.Nullable(Of Long),  _
                    ByVal currency_id As Global.System.Nullable(Of Long),  _
                    ByVal ir_fixing_ric As String,  _
                    ByVal dsply_name As String,  _
                    ByVal is_straight As Global.System.Nullable(Of Boolean),  _
                    ByVal is_putable As Global.System.Nullable(Of Boolean),  _
                    ByVal is_floater As Global.System.Nullable(Of Boolean),  _
                    ByVal is_convertible As Global.System.Nullable(Of Boolean),  _
                    ByVal issue_size As Global.System.Nullable(Of Double),  _
                    ByVal maturitydate As String,  _
                    ByVal issuedate As String,  _
                    ByVal nextputdate As String,  _
                    ByVal Original_id As Long,  _
                    ByVal Original_ric As String,  _
                    ByVal Original_payments As String,  _
                    ByVal Original_rates As String,  _
                    ByVal Original_descr As String,  _
                    ByVal Original_series As String,  _
                    ByVal Original_issuer_id As Global.System.Nullable(Of Long),  _
                    ByVal Original_currency_id As Global.System.Nullable(Of Long),  _
                    ByVal Original_ir_fixing_ric As String,  _
                    ByVal Original_dsply_name As String,  _
                    ByVal Original_is_straight As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_is_putable As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_is_floater As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_is_convertible As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_issue_size As Global.System.Nullable(Of Double),  _
                    ByVal Original_maturitydate As String,  _
                    ByVal Original_issuedate As String,  _
                    ByVal Original_nextputdate As String) As Integer
            Return Me.Update(Original_id, ric, payments, rates, descr, series, issuer_id, currency_id, ir_fixing_ric, dsply_name, is_straight, is_putable, is_floater, is_convertible, issue_size, maturitydate, issuedate, nextputdate, Original_id, Original_ric, Original_payments, Original_rates, Original_descr, Original_series, Original_issuer_id, Original_currency_id, Original_ir_fixing_ric, Original_dsply_name, Original_is_straight, Original_is_putable, Original_is_floater, Original_is_convertible, Original_issue_size, Original_maturitydate, Original_issuedate, Original_nextputdate)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function ClearAllData() As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(1)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class portfolioTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "portfolio"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("portfolio_name", "portfolio_name")
            tableMapping.ColumnMappings.Add("is_default", "is_default")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [portfolio] WHERE (([id] = @Original_id) AND ((@IsNull_portfolio_name"& _ 
                " = 1 AND [portfolio_name] IS NULL) OR ([portfolio_name] = @Original_portfolio_na"& _ 
                "me)) AND ((@IsNull_is_default = 1 AND [is_default] IS NULL) OR ([is_default] = @"& _ 
                "Original_is_default)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_portfolio_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "portfolio_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_portfolio_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "portfolio_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_is_default"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "is_default"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_is_default"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_default"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [portfolio] ([portfolio_name], [is_default]) VALUES (@portfolio_name,"& _ 
                " @is_default)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@portfolio_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "portfolio_name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@is_default"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_default"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [portfolio] SET [portfolio_name] = @portfolio_name, [is_default] = @is_def"& _ 
                "ault WHERE (([id] = @Original_id) AND ((@IsNull_portfolio_name = 1 AND [portfoli"& _ 
                "o_name] IS NULL) OR ([portfolio_name] = @Original_portfolio_name)) AND ((@IsNull"& _ 
                "_is_default = 1 AND [is_default] IS NULL) OR ([is_default] = @Original_is_defaul"& _ 
                "t)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@portfolio_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "portfolio_name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@is_default"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_default"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_portfolio_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "portfolio_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_portfolio_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "portfolio_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_is_default"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "is_default"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_is_default"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_default"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id], [portfolio_name], [is_default] FROM [portfolio]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT [id], [portfolio_name], [is_default] FROM [portfolio] WHERE is_default = 1"& _ 
                ""
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "DELETE FROM [portfolio] WHERE ([id] = @Original_id)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(2).Parameters.Add(param)
            Me._commandCollection(3) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "UPDATE [portfolio] SET [portfolio_name] = @portfolio_name WHERE ([id] = @Original"& _ 
                "_id)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@portfolio_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "portfolio_name"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(3).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet.portfolioDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet.portfolioDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet.portfolioDataTable = New BondsDataSet.portfolioDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDefaultPortfolios() As BondsDataSet.portfolioDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As BondsDataSet.portfolioDataTable = New BondsDataSet.portfolioDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As BondsDataSet.portfolioDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As BondsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "portfolio")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_portfolio_name As String, ByVal Original_is_default As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_portfolio_name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_portfolio_name,String)
            End If
            If (Original_is_default.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_is_default.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal portfolio_name As String, ByVal is_default As Global.System.Nullable(Of Boolean)) As Integer
            If (portfolio_name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(portfolio_name,String)
            End If
            If (is_default.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(is_default.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal portfolio_name As String, ByVal is_default As Global.System.Nullable(Of Boolean), ByVal Original_id As Long, ByVal Original_portfolio_name As String, ByVal Original_is_default As Global.System.Nullable(Of Boolean)) As Integer
            If (portfolio_name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(portfolio_name,String)
            End If
            If (is_default.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(is_default.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_id,Long)
            If (Original_portfolio_name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_portfolio_name,String)
            End If
            If (Original_is_default.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_is_default.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function RemoveById(ByVal Original_id As Long) As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(2)
            command.Parameters(0).Value = CType(Original_id,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function RenameById(ByVal portfolio_name As String, ByVal Original_id As Long) As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(3)
            If (portfolio_name Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(portfolio_name,String)
            End If
            command.Parameters(1).Value = CType(Original_id,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class chain_itemsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "chain_items"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("item_ric", "item_ric")
            tableMapping.ColumnMappings.Add("id_chain", "id_chain")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [chain_items] WHERE (([id] = @Original_id) AND ((@IsNull_item_ric = 1"& _ 
                " AND [item_ric] IS NULL) OR ([item_ric] = @Original_item_ric)) AND ((@IsNull_id_"& _ 
                "chain = 1 AND [id_chain] IS NULL) OR ([id_chain] = @Original_id_chain)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_item_ric"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "item_ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_item_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "item_ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_id_chain"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "id_chain"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_chain"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_chain"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [chain_items] ([item_ric], [id_chain]) VALUES (@item_ric, @id_chain)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@item_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "item_ric"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_chain"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_chain"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [chain_items] SET [item_ric] = @item_ric, [id_chain] = @id_chain WHERE ((["& _ 
                "id] = @Original_id) AND ((@IsNull_item_ric = 1 AND [item_ric] IS NULL) OR ([item"& _ 
                "_ric] = @Original_item_ric)) AND ((@IsNull_id_chain = 1 AND [id_chain] IS NULL) "& _ 
                "OR ([id_chain] = @Original_id_chain)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@item_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "item_ric"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_chain"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_chain"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_item_ric"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "item_ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_item_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "item_ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_id_chain"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "id_chain"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_chain"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_chain"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id], [item_ric], [id_chain] FROM [chain_items]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM [chain_items]"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT [id], [item_ric], [id_chain] FROM [chain_items] WHERE id_chain = ?"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Param1"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id_chain"
            Me._commandCollection(2).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet.chain_itemsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet.chain_itemsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet.chain_itemsDataTable = New BondsDataSet.chain_itemsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetRicsByChain(ByVal Param1 As Global.System.Nullable(Of Long)) As BondsDataSet.chain_itemsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Param1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As BondsDataSet.chain_itemsDataTable = New BondsDataSet.chain_itemsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As BondsDataSet.chain_itemsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As BondsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "chain_items")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_item_ric As String, ByVal Original_id_chain As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_item_ric Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_item_ric,String)
            End If
            If (Original_id_chain.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_id_chain.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal item_ric As String, ByVal id_chain As Global.System.Nullable(Of Long)) As Integer
            If (item_ric Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(item_ric,String)
            End If
            If (id_chain.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(id_chain.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal item_ric As String, ByVal id_chain As Global.System.Nullable(Of Long), ByVal Original_id As Long, ByVal Original_item_ric As String, ByVal Original_id_chain As Global.System.Nullable(Of Long)) As Integer
            If (item_ric Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(item_ric,String)
            End If
            If (id_chain.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(id_chain.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_id,Long)
            If (Original_item_ric Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_item_ric,String)
            End If
            If (Original_id_chain.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_id_chain.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function ClearAllData() As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(1)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class chainTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "chain"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("chain_name", "chain_name")
            tableMapping.ColumnMappings.Add("descr", "descr")
            tableMapping.ColumnMappings.Add("curve", "curve")
            tableMapping.ColumnMappings.Add("sort_num", "sort_num")
            tableMapping.ColumnMappings.Add("is_necessary", "is_necessary")
            tableMapping.ColumnMappings.Add("type", "type")
            tableMapping.ColumnMappings.Add("color", "color")
            tableMapping.ColumnMappings.Add("bid_field", "bid_field")
            tableMapping.ColumnMappings.Add("ask_field", "ask_field")
            tableMapping.ColumnMappings.Add("last_field", "last_field")
            tableMapping.ColumnMappings.Add("hist_field", "hist_field")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[chain] WHERE (([id] = @Original_id) A"& _ 
                "ND ((@IsNull_chain_name = 1 AND [chain_name] IS NULL) OR ([chain_name] = @Origin"& _ 
                "al_chain_name)) AND ((@IsNull_descr = 1 AND [descr] IS NULL) OR ([descr] = @Orig"& _ 
                "inal_descr)) AND ((@IsNull_curve = 1 AND [curve] IS NULL) OR ([curve] = @Origina"& _ 
                "l_curve)) AND ((@IsNull_sort_num = 1 AND [sort_num] IS NULL) OR ([sort_num] = @O"& _ 
                "riginal_sort_num)) AND ((@IsNull_is_necessary = 1 AND [is_necessary] IS NULL) OR"& _ 
                " ([is_necessary] = @Original_is_necessary)) AND ((@IsNull_type = 1 AND [type] IS"& _ 
                " NULL) OR ([type] = @Original_type)) AND ((@IsNull_color = 1 AND [color] IS NULL"& _ 
                ") OR ([color] = @Original_color)) AND ((@IsNull_bid_field = 1 AND [bid_field] IS"& _ 
                " NULL) OR ([bid_field] = @Original_bid_field)) AND ((@IsNull_ask_field = 1 AND ["& _ 
                "ask_field] IS NULL) OR ([ask_field] = @Original_ask_field)) AND ((@IsNull_last_f"& _ 
                "ield = 1 AND [last_field] IS NULL) OR ([last_field] = @Original_last_field)) AND"& _ 
                " ((@IsNull_hist_field = 1 AND [hist_field] IS NULL) OR ([hist_field] = @Original"& _ 
                "_hist_field)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_chain_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "chain_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_chain_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "chain_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_descr"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "descr"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_descr"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "descr"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_curve"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "curve"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_curve"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "curve"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sort_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sort_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sort_num"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "sort_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_is_necessary"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "is_necessary"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_is_necessary"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_necessary"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_type"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_type"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_color"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "color"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_color"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "color"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bid_field"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bid_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bid_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "bid_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ask_field"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ask_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ask_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ask_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_last_field"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "last_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_last_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "last_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_hist_field"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "hist_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_hist_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "hist_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[chain] ([chain_name], [descr], [curve"& _ 
                "], [sort_num], [is_necessary], [type], [color], [bid_field], [ask_field], [last_"& _ 
                "field], [hist_field]) VALUES (@chain_name, @descr, @curve, @sort_num, @is_necess"& _ 
                "ary, @type, @color, @bid_field, @ask_field, @last_field, @hist_field)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@chain_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "chain_name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@descr"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "descr"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@curve"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "curve"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sort_num"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "sort_num"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@is_necessary"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_necessary"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@type"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "type"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@color"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "color"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bid_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "bid_field"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ask_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ask_field"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@last_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "last_field"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@hist_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "hist_field"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[chain] SET [chain_name] = @chain_name, [de"& _ 
                "scr] = @descr, [curve] = @curve, [sort_num] = @sort_num, [is_necessary] = @is_ne"& _ 
                "cessary, [type] = @type, [color] = @color, [bid_field] = @bid_field, [ask_field]"& _ 
                " = @ask_field, [last_field] = @last_field, [hist_field] = @hist_field WHERE (([i"& _ 
                "d] = @Original_id) AND ((@IsNull_chain_name = 1 AND [chain_name] IS NULL) OR ([c"& _ 
                "hain_name] = @Original_chain_name)) AND ((@IsNull_descr = 1 AND [descr] IS NULL)"& _ 
                " OR ([descr] = @Original_descr)) AND ((@IsNull_curve = 1 AND [curve] IS NULL) OR"& _ 
                " ([curve] = @Original_curve)) AND ((@IsNull_sort_num = 1 AND [sort_num] IS NULL)"& _ 
                " OR ([sort_num] = @Original_sort_num)) AND ((@IsNull_is_necessary = 1 AND [is_ne"& _ 
                "cessary] IS NULL) OR ([is_necessary] = @Original_is_necessary)) AND ((@IsNull_ty"& _ 
                "pe = 1 AND [type] IS NULL) OR ([type] = @Original_type)) AND ((@IsNull_color = 1"& _ 
                " AND [color] IS NULL) OR ([color] = @Original_color)) AND ((@IsNull_bid_field = "& _ 
                "1 AND [bid_field] IS NULL) OR ([bid_field] = @Original_bid_field)) AND ((@IsNull"& _ 
                "_ask_field = 1 AND [ask_field] IS NULL) OR ([ask_field] = @Original_ask_field)) "& _ 
                "AND ((@IsNull_last_field = 1 AND [last_field] IS NULL) OR ([last_field] = @Origi"& _ 
                "nal_last_field)) AND ((@IsNull_hist_field = 1 AND [hist_field] IS NULL) OR ([his"& _ 
                "t_field] = @Original_hist_field)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@chain_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "chain_name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@descr"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "descr"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@curve"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "curve"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sort_num"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "sort_num"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@is_necessary"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_necessary"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@type"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "type"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@color"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "color"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bid_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "bid_field"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ask_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ask_field"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@last_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "last_field"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@hist_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "hist_field"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_chain_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "chain_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_chain_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "chain_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_descr"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "descr"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_descr"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "descr"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_curve"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "curve"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_curve"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "curve"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sort_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sort_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sort_num"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "sort_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_is_necessary"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "is_necessary"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_is_necessary"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "is_necessary"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_type"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_type"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_color"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "color"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_color"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "color"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bid_field"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bid_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bid_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "bid_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ask_field"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ask_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ask_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ask_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_last_field"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "last_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_last_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "last_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_hist_field"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "hist_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_hist_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "hist_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(4) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     id, chain_name, descr, curve, sort_num, is_necessary, type, color, bid"& _ 
                "_field, ask_field, last_field, hist_field"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         chain"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ask_field, bid_field, chain_name, color, curve, descr, hist_field, id, is_"& _ 
                "necessary, last_field, sort_num, type FROM chain WHERE (chain_name = @Param1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Param1"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "chain_name"
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "INSERT INTO chain"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (chain_name, descr, color, bid_field, as"& _ 
                "k_field, last_field, hist_field, curve)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES     (@chain_name, @descr, @color"& _ 
                ", @bid, @ask, @last, @hist, @crv)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@chain_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "chain_name"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@descr"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "descr"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@color"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "color"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bid"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "bid_field"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ask"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "ask_field"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@last"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "last_field"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@hist"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "hist_field"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@crv"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.Size = 1
            param.SourceColumn = "curve"
            Me._commandCollection(2).Parameters.Add(param)
            Me._commandCollection(3) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "DELETE FROM [chain] WHERE ([id] = @Original_id) "
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(3).Parameters.Add(param)
            Me._commandCollection(4) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "UPDATE    chain"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET              chain_name = @chain_name, descr = @descr, color"& _ 
                " = @color, bid_field = @bid, ask_field = @ask, last_field = @last, hist_field = "& _ 
                "@hist, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      curve = @crv"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (id = @Original_id)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@chain_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "chain_name"
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@descr"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "descr"
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@color"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "color"
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bid"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "bid_field"
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ask"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "ask_field"
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@last"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "last_field"
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@hist"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "hist_field"
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@crv"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.Size = 1
            param.SourceColumn = "curve"
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(4).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet.chainDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet.chainDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet.chainDataTable = New BondsDataSet.chainDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetIdsByName(ByVal Param1 As String) As BondsDataSet.chainDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            Dim dataTable As BondsDataSet.chainDataTable = New BondsDataSet.chainDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As BondsDataSet.chainDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As BondsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "chain")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_chain_name As String, ByVal Original_descr As String, ByVal Original_curve As Global.System.Nullable(Of Boolean), ByVal Original_sort_num As Global.System.Nullable(Of Long), ByVal Original_is_necessary As Global.System.Nullable(Of Boolean), ByVal Original_type As String, ByVal Original_color As String, ByVal Original_bid_field As String, ByVal Original_ask_field As String, ByVal Original_last_field As String, ByVal Original_hist_field As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_chain_name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_chain_name,String)
            End If
            If (Original_descr Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_descr,String)
            End If
            If (Original_curve.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_curve.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_sort_num.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_sort_num.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_is_necessary.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_is_necessary.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_type Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_type,String)
            End If
            If (Original_color Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_color,String)
            End If
            If (Original_bid_field Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_bid_field,String)
            End If
            If (Original_ask_field Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_ask_field,String)
            End If
            If (Original_last_field Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_last_field,String)
            End If
            If (Original_hist_field Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_hist_field,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal chain_name As String, ByVal descr As String, ByVal curve As Global.System.Nullable(Of Boolean), ByVal sort_num As Global.System.Nullable(Of Long), ByVal is_necessary As Global.System.Nullable(Of Boolean), ByVal type As String, ByVal color As String, ByVal bid_field As String, ByVal ask_field As String, ByVal last_field As String, ByVal hist_field As String) As Integer
            If (chain_name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(chain_name,String)
            End If
            If (descr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(descr,String)
            End If
            If (curve.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(curve.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (sort_num.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(sort_num.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (is_necessary.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(is_necessary.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(type,String)
            End If
            If (color Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(color,String)
            End If
            If (bid_field Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(bid_field,String)
            End If
            If (ask_field Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ask_field,String)
            End If
            If (last_field Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(last_field,String)
            End If
            If (hist_field Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(hist_field,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal chain_name As String,  _
                    ByVal descr As String,  _
                    ByVal curve As Global.System.Nullable(Of Boolean),  _
                    ByVal sort_num As Global.System.Nullable(Of Long),  _
                    ByVal is_necessary As Global.System.Nullable(Of Boolean),  _
                    ByVal type As String,  _
                    ByVal color As String,  _
                    ByVal bid_field As String,  _
                    ByVal ask_field As String,  _
                    ByVal last_field As String,  _
                    ByVal hist_field As String,  _
                    ByVal Original_id As Long,  _
                    ByVal Original_chain_name As String,  _
                    ByVal Original_descr As String,  _
                    ByVal Original_curve As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_sort_num As Global.System.Nullable(Of Long),  _
                    ByVal Original_is_necessary As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_type As String,  _
                    ByVal Original_color As String,  _
                    ByVal Original_bid_field As String,  _
                    ByVal Original_ask_field As String,  _
                    ByVal Original_last_field As String,  _
                    ByVal Original_hist_field As String) As Integer
            If (chain_name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(chain_name,String)
            End If
            If (descr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(descr,String)
            End If
            If (curve.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(curve.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (sort_num.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(sort_num.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (is_necessary.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(is_necessary.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(type,String)
            End If
            If (color Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(color,String)
            End If
            If (bid_field Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(bid_field,String)
            End If
            If (ask_field Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ask_field,String)
            End If
            If (last_field Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(last_field,String)
            End If
            If (hist_field Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(hist_field,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_id,Long)
            If (Original_chain_name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_chain_name,String)
            End If
            If (Original_descr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_descr,String)
            End If
            If (Original_curve.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_curve.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_sort_num.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_sort_num.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_is_necessary.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_is_necessary.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_type,String)
            End If
            If (Original_color Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_color,String)
            End If
            If (Original_bid_field Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_bid_field,String)
            End If
            If (Original_ask_field Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_ask_field,String)
            End If
            If (Original_last_field Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_last_field,String)
            End If
            If (Original_hist_field Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_hist_field,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function InsertNew(ByVal chain_name As String, ByVal descr As String, ByVal color As String, ByVal bid As String, ByVal ask As String, ByVal last As String, ByVal hist As String, ByVal crv As Global.System.Nullable(Of Boolean)) As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(2)
            If (chain_name Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(chain_name,String)
            End If
            If (descr Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(descr,String)
            End If
            If (color Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(color,String)
            End If
            If (bid Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(bid,String)
            End If
            If (ask Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(ask,String)
            End If
            If (last Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(last,String)
            End If
            If (hist Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(hist,String)
            End If
            If (crv.HasValue = true) Then
                command.Parameters(7).Value = CType(crv.Value,Boolean)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function RemoveItem(ByVal Original_id As Long) As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(3)
            command.Parameters(0).Value = CType(Original_id,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function UpdateItem(ByVal chain_name As String, ByVal descr As String, ByVal color As String, ByVal bid As String, ByVal ask As String, ByVal last As String, ByVal hist As String, ByVal crv As Global.System.Nullable(Of Boolean), ByVal Original_id As Long) As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(4)
            If (chain_name Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(chain_name,String)
            End If
            If (descr Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(descr,String)
            End If
            If (color Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(color,String)
            End If
            If (bid Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(bid,String)
            End If
            If (ask Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(ask,String)
            End If
            If (last Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(last,String)
            End If
            If (hist Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(hist,String)
            End If
            If (crv.HasValue = true) Then
                command.Parameters(7).Value = CType(crv.Value,Boolean)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            command.Parameters(8).Value = CType(Original_id,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class countryTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "country"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("country", "country")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [country] WHERE (([id] = @Original_id) AND ((@IsNull_country = 1 AND "& _ 
                "[country] IS NULL) OR ([country] = @Original_country)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_country"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "country"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_country"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "country"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [country] ([country]) VALUES (@country)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@country"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "country"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [country] SET [country] = @country WHERE (([id] = @Original_id) AND ((@IsN"& _ 
                "ull_country = 1 AND [country] IS NULL) OR ([country] = @Original_country)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@country"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "country"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_country"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "country"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_country"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "country"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id], [country] FROM [country]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM [country] "
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet.countryDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet.countryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet.countryDataTable = New BondsDataSet.countryDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As BondsDataSet.countryDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As BondsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "country")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_country As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_country Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_country,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal country As String) As Integer
            If (country Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(country,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal country As String, ByVal Original_id As Long, ByVal Original_country As String) As Integer
            If (country Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(country,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_id,Long)
            If (Original_country Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_country,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function ClearAllData() As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(1)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class currencyTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "currency"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("currency", "currency")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [currency] WHERE (([id] = @Original_id) AND ((@IsNull_currency = 1 AN"& _ 
                "D [currency] IS NULL) OR ([currency] = @Original_currency)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_currency"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "currency"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_currency"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "currency"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [currency] ([currency]) VALUES (@currency)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@currency"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "currency"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [currency] SET [currency] = @currency WHERE (([id] = @Original_id) AND ((@"& _ 
                "IsNull_currency = 1 AND [currency] IS NULL) OR ([currency] = @Original_currency)"& _ 
                "))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@currency"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "currency"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_currency"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "currency"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_currency"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "currency"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id], [currency] FROM [currency]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM [currency] "
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet.currencyDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet.currencyDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet.currencyDataTable = New BondsDataSet.currencyDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As BondsDataSet.currencyDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As BondsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "currency")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_currency As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_currency Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_currency,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal currency As String) As Integer
            If (currency Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(currency,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal currency As String, ByVal Original_id As Long, ByVal Original_currency As String) As Integer
            If (currency Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(currency,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_id,Long)
            If (Original_currency Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_currency,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function ClearAllData() As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(1)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class issuerTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "issuer"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("shortname", "shortname")
            tableMapping.ColumnMappings.Add("issuername", "issuername")
            tableMapping.ColumnMappings.Add("ticker", "ticker")
            tableMapping.ColumnMappings.Add("country_id", "country_id")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [issuer] WHERE (([id] = @Original_id) AND ((@IsNull_shortname = 1 AND"& _ 
                " [shortname] IS NULL) OR ([shortname] = @Original_shortname)) AND ((@IsNull_issu"& _ 
                "ername = 1 AND [issuername] IS NULL) OR ([issuername] = @Original_issuername)) A"& _ 
                "ND ((@IsNull_ticker = 1 AND [ticker] IS NULL) OR ([ticker] = @Original_ticker)) "& _ 
                "AND ((@IsNull_country_id = 1 AND [country_id] IS NULL) OR ([country_id] = @Origi"& _ 
                "nal_country_id)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_shortname"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "shortname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_shortname"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "shortname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_issuername"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "issuername"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_issuername"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "issuername"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ticker"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ticker"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ticker"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ticker"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_country_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "country_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_country_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "country_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [issuer] ([shortname], [issuername], [ticker], [country_id]) VALUES ("& _ 
                "@shortname, @issuername, @ticker, @country_id)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@shortname"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "shortname"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@issuername"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "issuername"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ticker"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ticker"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@country_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "country_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [issuer] SET [shortname] = @shortname, [issuername] = @issuername, [ticker"& _ 
                "] = @ticker, [country_id] = @country_id WHERE (([id] = @Original_id) AND ((@IsNu"& _ 
                "ll_shortname = 1 AND [shortname] IS NULL) OR ([shortname] = @Original_shortname)"& _ 
                ") AND ((@IsNull_issuername = 1 AND [issuername] IS NULL) OR ([issuername] = @Ori"& _ 
                "ginal_issuername)) AND ((@IsNull_ticker = 1 AND [ticker] IS NULL) OR ([ticker] ="& _ 
                " @Original_ticker)) AND ((@IsNull_country_id = 1 AND [country_id] IS NULL) OR (["& _ 
                "country_id] = @Original_country_id)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@shortname"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "shortname"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@issuername"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "issuername"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ticker"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ticker"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@country_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "country_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_shortname"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "shortname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_shortname"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "shortname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_issuername"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "issuername"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_issuername"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "issuername"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ticker"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ticker"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ticker"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ticker"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_country_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "country_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_country_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "country_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id], [shortname], [issuername], [ticker], [country_id] FROM [issuer] ORDE"& _ 
                "R by shortname"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM [issuer] "
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT country_id, id, issuername, shortname, ticker FROM issuer ORDER BY shortna"& _ 
                "me"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet.issuerDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet.issuerDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet.issuerDataTable = New BondsDataSet.issuerDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function GetOrderedIssuers(ByVal dataTable As BondsDataSet.issuerDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As BondsDataSet.issuerDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As BondsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "issuer")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_shortname As String, ByVal Original_issuername As String, ByVal Original_ticker As String, ByVal Original_country_id As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_shortname Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_shortname,String)
            End If
            If (Original_issuername Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_issuername,String)
            End If
            If (Original_ticker Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ticker,String)
            End If
            If (Original_country_id.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_country_id.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal shortname As String, ByVal issuername As String, ByVal ticker As String, ByVal country_id As Global.System.Nullable(Of Long)) As Integer
            If (shortname Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(shortname,String)
            End If
            If (issuername Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(issuername,String)
            End If
            If (ticker Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ticker,String)
            End If
            If (country_id.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(country_id.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal shortname As String, ByVal issuername As String, ByVal ticker As String, ByVal country_id As Global.System.Nullable(Of Long), ByVal Original_id As Long, ByVal Original_shortname As String, ByVal Original_issuername As String, ByVal Original_ticker As String, ByVal Original_country_id As Global.System.Nullable(Of Long)) As Integer
            If (shortname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(shortname,String)
            End If
            If (issuername Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(issuername,String)
            End If
            If (ticker Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ticker,String)
            End If
            If (country_id.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(country_id.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_id,Long)
            If (Original_shortname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_shortname,String)
            End If
            If (Original_issuername Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_issuername,String)
            End If
            If (Original_ticker Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ticker,String)
            End If
            If (Original_country_id.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_country_id.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function ClearAllData() As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(1)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PortfolioUnitedTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PortfolioUnited"
            tableMapping.ColumnMappings.Add("pid", "pid")
            tableMapping.ColumnMappings.Add("bid", "bid")
            tableMapping.ColumnMappings.Add("ric", "ric")
            tableMapping.ColumnMappings.Add("descr", "descr")
            tableMapping.ColumnMappings.Add("payments", "payments")
            tableMapping.ColumnMappings.Add("rates", "rates")
            tableMapping.ColumnMappings.Add("bondshortname", "bondshortname")
            tableMapping.ColumnMappings.Add("dsply_name", "dsply_name")
            tableMapping.ColumnMappings.Add("include", "include")
            tableMapping.ColumnMappings.Add("color", "color")
            tableMapping.ColumnMappings.Add("whereFrom", "whereFrom")
            tableMapping.ColumnMappings.Add("fromID", "fromID")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [pid], [bid], [ric], [descr], [payments], [rates], [bondshortname], [dsply"& _ 
                "_name], [include], [color], [whereFrom], fromID FROM [PortfolioUnited]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet.PortfolioUnitedDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet.PortfolioUnitedDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet.PortfolioUnitedDataTable = New BondsDataSet.PortfolioUnitedDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class settingsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "settings"
            tableMapping.ColumnMappings.Add("lastupdatedate", "lastupdatedate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [settings] ([lastupdatedate]) VALUES (@lastupdatedate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@lastupdatedate"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "lastupdatedate"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [lastupdatedate] FROM [settings]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE from settings"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet.settingsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet.settingsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet.settingsDataTable = New BondsDataSet.settingsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As BondsDataSet.settingsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As BondsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "settings")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal lastupdatedate As String) As Integer
            If (lastupdatedate Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(lastupdatedate,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function ClearAllData() As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(1)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BondDescriptionsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "BondDescriptions"
            tableMapping.ColumnMappings.Add("ric", "ric")
            tableMapping.ColumnMappings.Add("descr", "descr")
            tableMapping.ColumnMappings.Add("payments", "payments")
            tableMapping.ColumnMappings.Add("rates", "rates")
            tableMapping.ColumnMappings.Add("maturitydate", "maturitydate")
            tableMapping.ColumnMappings.Add("bondshortname", "bondshortname")
            tableMapping.ColumnMappings.Add("is_putable", "is_putable")
            tableMapping.ColumnMappings.Add("issuedate", "issuedate")
            tableMapping.ColumnMappings.Add("coupon", "coupon")
            tableMapping.ColumnMappings.Add("issuer_id", "issuer_id")
            tableMapping.ColumnMappings.Add("issname", "issname")
            tableMapping.ColumnMappings.Add("issue_size", "issue_size")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ric, descr, payments, rates, maturitydate, bondshortname, is_putabl"& _ 
                "e, issuedate, coupon, issuer_id, issname, issue_size"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            BondDescri"& _ 
                "ptions"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY bondshortname"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet.BondDescriptionsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet.BondDescriptionsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet.BondDescriptionsDataTable = New BondsDataSet.BondDescriptionsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class hawserTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "hawser"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("hawser_name", "hawser_name")
            tableMapping.ColumnMappings.Add("color", "color")
            tableMapping.ColumnMappings.Add("bid_field", "bid_field")
            tableMapping.ColumnMappings.Add("last_field", "last_field")
            tableMapping.ColumnMappings.Add("ask_field", "ask_field")
            tableMapping.ColumnMappings.Add("hist_field", "hist_field")
            tableMapping.ColumnMappings.Add("curve", "curve")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[hawser] WHERE (([id] = @Original_id) "& _ 
                "AND ((@IsNull_hawser_name = 1 AND [hawser_name] IS NULL) OR ([hawser_name] = @Or"& _ 
                "iginal_hawser_name)) AND ((@IsNull_color = 1 AND [color] IS NULL) OR ([color] = "& _ 
                "@Original_color)) AND ((@IsNull_bid_field = 1 AND [bid_field] IS NULL) OR ([bid_"& _ 
                "field] = @Original_bid_field)) AND ((@IsNull_last_field = 1 AND [last_field] IS "& _ 
                "NULL) OR ([last_field] = @Original_last_field)) AND ((@IsNull_ask_field = 1 AND "& _ 
                "[ask_field] IS NULL) OR ([ask_field] = @Original_ask_field)) AND ((@IsNull_hist_"& _ 
                "field = 1 AND [hist_field] IS NULL) OR ([hist_field] = @Original_hist_field)) AN"& _ 
                "D ((@IsNull_curve = 1 AND [curve] IS NULL) OR ([curve] = @Original_curve)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_hawser_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "hawser_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_hawser_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "hawser_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_color"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "color"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_color"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "color"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bid_field"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bid_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bid_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "bid_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_last_field"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "last_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_last_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "last_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ask_field"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ask_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ask_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ask_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_hist_field"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "hist_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_hist_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "hist_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_curve"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "curve"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_curve"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "curve"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[hawser] ([hawser_name], [color], [bid"& _ 
                "_field], [last_field], [ask_field], [hist_field], [curve]) VALUES (@hawser_name,"& _ 
                " @color, @bid_field, @last_field, @ask_field, @hist_field, @curve)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@hawser_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "hawser_name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@color"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "color"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bid_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "bid_field"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@last_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "last_field"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ask_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ask_field"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@hist_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "hist_field"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@curve"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "curve"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[hawser] SET [hawser_name] = @hawser_name, "& _ 
                "[color] = @color, [bid_field] = @bid_field, [last_field] = @last_field, [ask_fie"& _ 
                "ld] = @ask_field, [hist_field] = @hist_field, [curve] = @curve WHERE (([id] = @O"& _ 
                "riginal_id) AND ((@IsNull_hawser_name = 1 AND [hawser_name] IS NULL) OR ([hawser"& _ 
                "_name] = @Original_hawser_name)) AND ((@IsNull_color = 1 AND [color] IS NULL) OR"& _ 
                " ([color] = @Original_color)) AND ((@IsNull_bid_field = 1 AND [bid_field] IS NUL"& _ 
                "L) OR ([bid_field] = @Original_bid_field)) AND ((@IsNull_last_field = 1 AND [las"& _ 
                "t_field] IS NULL) OR ([last_field] = @Original_last_field)) AND ((@IsNull_ask_fi"& _ 
                "eld = 1 AND [ask_field] IS NULL) OR ([ask_field] = @Original_ask_field)) AND ((@"& _ 
                "IsNull_hist_field = 1 AND [hist_field] IS NULL) OR ([hist_field] = @Original_his"& _ 
                "t_field)) AND ((@IsNull_curve = 1 AND [curve] IS NULL) OR ([curve] = @Original_c"& _ 
                "urve)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@hawser_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "hawser_name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@color"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "color"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bid_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "bid_field"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@last_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "last_field"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ask_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ask_field"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@hist_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "hist_field"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@curve"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "curve"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_hawser_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "hawser_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_hawser_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "hawser_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_color"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "color"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_color"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "color"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bid_field"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bid_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bid_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "bid_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_last_field"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "last_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_last_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "last_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ask_field"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ask_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ask_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ask_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_hist_field"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "hist_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_hist_field"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "hist_field"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_curve"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "curve"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_curve"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "curve"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     id, hawser_name, color, bid_field, last_field, ask_field, hist_field, "& _ 
                "curve"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         hawser"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM [hawser] WHERE ([id] = @Original_id) "
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "INSERT INTO hawser"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (hawser_name, color, bid_field, ask_fie"& _ 
                "ld, last_field, hist_field, curve)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES     (@hawser_name, @color, @bid, @ask"& _ 
                ", @last, @hist, @crv)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@hawser_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "hawser_name"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@color"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "color"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bid"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "bid_field"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ask"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "ask_field"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@last"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "last_field"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@hist"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "hist_field"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@crv"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.Size = 1
            param.SourceColumn = "curve"
            Me._commandCollection(2).Parameters.Add(param)
            Me._commandCollection(3) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "UPDATE    hawser"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET              hawser_name = @hawser_name, color = @color, bi"& _ 
                "d_field = @bid, ask_field = @ask, last_field = @last, hist_field = @hist, curve "& _ 
                "= @crv"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (id = @Original_id)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@hawser_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "hawser_name"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@color"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "color"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bid"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "bid_field"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ask"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "ask_field"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@last"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "last_field"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@hist"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "hist_field"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@crv"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.Size = 1
            param.SourceColumn = "curve"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(3).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet.hawserDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet.hawserDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet.hawserDataTable = New BondsDataSet.hawserDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As BondsDataSet.hawserDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As BondsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "hawser")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_hawser_name As String, ByVal Original_color As String, ByVal Original_bid_field As String, ByVal Original_last_field As String, ByVal Original_ask_field As String, ByVal Original_hist_field As String, ByVal Original_curve As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_hawser_name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_hawser_name,String)
            End If
            If (Original_color Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_color,String)
            End If
            If (Original_bid_field Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_bid_field,String)
            End If
            If (Original_last_field Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_last_field,String)
            End If
            If (Original_ask_field Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ask_field,String)
            End If
            If (Original_hist_field Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_hist_field,String)
            End If
            If (Original_curve.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_curve.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal hawser_name As String, ByVal color As String, ByVal bid_field As String, ByVal last_field As String, ByVal ask_field As String, ByVal hist_field As String, ByVal curve As Global.System.Nullable(Of Boolean)) As Integer
            If (hawser_name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(hawser_name,String)
            End If
            If (color Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(color,String)
            End If
            If (bid_field Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(bid_field,String)
            End If
            If (last_field Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(last_field,String)
            End If
            If (ask_field Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ask_field,String)
            End If
            If (hist_field Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(hist_field,String)
            End If
            If (curve.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(curve.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal hawser_name As String, ByVal color As String, ByVal bid_field As String, ByVal last_field As String, ByVal ask_field As String, ByVal hist_field As String, ByVal curve As Global.System.Nullable(Of Boolean), ByVal Original_id As Long, ByVal Original_hawser_name As String, ByVal Original_color As String, ByVal Original_bid_field As String, ByVal Original_last_field As String, ByVal Original_ask_field As String, ByVal Original_hist_field As String, ByVal Original_curve As Global.System.Nullable(Of Boolean)) As Integer
            If (hawser_name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(hawser_name,String)
            End If
            If (color Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(color,String)
            End If
            If (bid_field Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(bid_field,String)
            End If
            If (last_field Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(last_field,String)
            End If
            If (ask_field Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ask_field,String)
            End If
            If (hist_field Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(hist_field,String)
            End If
            If (curve.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(curve.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_id,Long)
            If (Original_hawser_name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_hawser_name,String)
            End If
            If (Original_color Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_color,String)
            End If
            If (Original_bid_field Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_bid_field,String)
            End If
            If (Original_last_field Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_last_field,String)
            End If
            If (Original_ask_field Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_ask_field,String)
            End If
            If (Original_hist_field Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_hist_field,String)
            End If
            If (Original_curve.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_curve.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteById(ByVal Original_id As Long) As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(Original_id,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function InsertNew(ByVal hawser_name As String, ByVal color As String, ByVal bid As String, ByVal ask As String, ByVal last As String, ByVal hist As String, ByVal crv As Global.System.Nullable(Of Boolean)) As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(2)
            If (hawser_name Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(hawser_name,String)
            End If
            If (color Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(color,String)
            End If
            If (bid Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(bid,String)
            End If
            If (ask Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(ask,String)
            End If
            If (last Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(last,String)
            End If
            If (hist Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(hist,String)
            End If
            If (crv.HasValue = true) Then
                command.Parameters(6).Value = CType(crv.Value,Boolean)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function RenameById(ByVal hawser_name As String, ByVal color As String, ByVal bid As String, ByVal ask As String, ByVal last As String, ByVal hist As String, ByVal crv As Global.System.Nullable(Of Boolean), ByVal Original_id As Long) As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(3)
            If (hawser_name Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(hawser_name,String)
            End If
            If (color Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(color,String)
            End If
            If (bid Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(bid,String)
            End If
            If (ask Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(ask,String)
            End If
            If (last Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(last,String)
            End If
            If (hist Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(hist,String)
            End If
            If (crv.HasValue = true) Then
                command.Parameters(6).Value = CType(crv.Value,Boolean)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            command.Parameters(7).Value = CType(Original_id,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class HawserDataTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "HawserData"
            tableMapping.ColumnMappings.Add("[hawser_id]", "hawser_id")
            tableMapping.ColumnMappings.Add("[RIC]", "RIC")
            tableMapping.ColumnMappings.Add("[Bond]", "Bond")
            tableMapping.ColumnMappings.Add("[bond_id]", "bond_id")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [hawser_id], [RIC], [Bond], [bond_id] FROM [HawserData]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT [hawser_id], [RIC], [Bond], [bond_id] FROM [HawserData] WHERE [hawser_id] "& _ 
                "= @HID"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@HID"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "hawser_id"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet.HawserDataDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet.HawserDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet.HawserDataDataTable = New BondsDataSet.HawserDataDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataById(ByVal HID As Long) As BondsDataSet.HawserDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(HID,Long)
            Dim dataTable As BondsDataSet.HawserDataDataTable = New BondsDataSet.HawserDataDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class hawser_to_bondTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "hawser_to_bond"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("id_hawser", "id_hawser")
            tableMapping.ColumnMappings.Add("bond_ric", "bond_ric")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [hawser_to_bond] WHERE (([id] = @Original_id) AND ([id_hawser] = @Ori"& _ 
                "ginal_id_hawser) AND ((@IsNull_bond_ric = 1 AND [bond_ric] IS NULL) OR ([bond_ri"& _ 
                "c] = @Original_bond_ric)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_hawser"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_hawser"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bond_ric"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bond_ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bond_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "bond_ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [hawser_to_bond] ([id], [id_hawser], [bond_ric]) VALUES (@id, @id_haw"& _ 
                "ser, @bond_ric)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_hawser"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_hawser"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bond_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "bond_ric"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [hawser_to_bond] SET [id] = @id, [id_hawser] = @id_hawser, [bond_ric] = @b"& _ 
                "ond_ric WHERE (([id] = @Original_id) AND ([id_hawser] = @Original_id_hawser) AND"& _ 
                " ((@IsNull_bond_ric = 1 AND [bond_ric] IS NULL) OR ([bond_ric] = @Original_bond_"& _ 
                "ric)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_hawser"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_hawser"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bond_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "bond_ric"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_hawser"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_hawser"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bond_ric"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bond_ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bond_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "bond_ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(5) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id], [id_hawser], [bond_ric] FROM [hawser_to_bond]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM [hawser_to_bond] WHERE ([id_hawser] = @Original_id_hawser)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_hawser"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id_hawser"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT [id], [id_hawser], [bond_ric] FROM [hawser_to_bond] WHERE id_hawser = @id_"& _ 
                "hawser"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_hawser"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id_hawser"
            Me._commandCollection(2).Parameters.Add(param)
            Me._commandCollection(3) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "INSERT INTO [hawser_to_bond] ([id_hawser], [bond_ric]) VALUES ( @id_hawser, @bond"& _ 
                "_ric)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_hawser"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id_hawser"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bond_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "bond_ric"
            Me._commandCollection(3).Parameters.Add(param)
            Me._commandCollection(4) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "DELETE FROM [hawser_to_bond] WHERE [bond_ric] = @Original_bond_ric"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bond_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "bond_ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(4).Parameters.Add(param)
            Me._commandCollection(5) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "DELETE FROM [hawser_to_bond] WHERE   ([bond_ric] = @Original_bond_ric) AND ([id_h"& _ 
                "awser] = @Original_id_hawser) "
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bond_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "bond_ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(5).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_hawser"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id_hawser"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(5).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet.hawser_to_bondDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet.hawser_to_bondDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet.hawser_to_bondDataTable = New BondsDataSet.hawser_to_bondDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetRicsByHawser(ByVal id_hawser As Long) As BondsDataSet.hawser_to_bondDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id_hawser,Long)
            Dim dataTable As BondsDataSet.hawser_to_bondDataTable = New BondsDataSet.hawser_to_bondDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As BondsDataSet.hawser_to_bondDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As BondsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "hawser_to_bond")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_id_hawser As Long, ByVal Original_bond_ric As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_id_hawser,Long)
            If (Original_bond_ric Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_bond_ric,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Long, ByVal id_hawser As Long, ByVal bond_ric As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(id_hawser,Long)
            If (bond_ric Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(bond_ric,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id As Long, ByVal id_hawser As Long, ByVal bond_ric As String, ByVal Original_id As Long, ByVal Original_id_hawser As Long, ByVal Original_bond_ric As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(id_hawser,Long)
            If (bond_ric Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(bond_ric,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_id,Long)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_id_hawser,Long)
            If (Original_bond_ric Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_bond_ric,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id_hawser As Long, ByVal bond_ric As String, ByVal Original_id As Long, ByVal Original_id_hawser As Long, ByVal Original_bond_ric As String) As Integer
            Return Me.Update(Original_id, id_hawser, bond_ric, Original_id, Original_id_hawser, Original_bond_ric)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteLinkByHawser(ByVal Original_id_hawser As Long) As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(Original_id_hawser,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertLink(ByVal id_hawser As Long, ByVal bond_ric As String) As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(3)
            command.Parameters(0).Value = CType(id_hawser,Long)
            If (bond_ric Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(bond_ric,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function RemoveBond(ByVal Original_bond_ric As String) As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(4)
            If (Original_bond_ric Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(Original_bond_ric,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function RemoveLink(ByVal Original_bond_ric As String, ByVal Original_id_hawser As Long) As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(5)
            If (Original_bond_ric Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(Original_bond_ric,String)
            End If
            command.Parameters(1).Value = CType(Original_id_hawser,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class _portfolioByBondsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "_portfolioByBonds"
            tableMapping.ColumnMappings.Add("[pid]", "pid")
            tableMapping.ColumnMappings.Add("[bid]", "bid")
            tableMapping.ColumnMappings.Add("[ric]", "ric")
            tableMapping.ColumnMappings.Add("[descr]", "descr")
            tableMapping.ColumnMappings.Add("[payments]", "payments")
            tableMapping.ColumnMappings.Add("[rates]", "rates")
            tableMapping.ColumnMappings.Add("[bondshortname]", "bondshortname")
            tableMapping.ColumnMappings.Add("[dsply_name]", "dsply_name")
            tableMapping.ColumnMappings.Add("[include]", "include")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [pid], [bid], [ric], [descr], [payments], [rates], [bondshortname], [dsply"& _ 
                "_name], [include] FROM [_portfolioByBonds]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet._portfolioByBondsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet._portfolioByBondsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet._portfolioByBondsDataTable = New BondsDataSet._portfolioByBondsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class _portfolioByChainTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "_portfolioByChain"
            tableMapping.ColumnMappings.Add("[pid]", "pid")
            tableMapping.ColumnMappings.Add("[bid]", "[bid]")
            tableMapping.ColumnMappings.Add("[ric]", "[ric]")
            tableMapping.ColumnMappings.Add("[descr]", "[descr]")
            tableMapping.ColumnMappings.Add("[payments]", "[payments]")
            tableMapping.ColumnMappings.Add("[rates]", "[rates]")
            tableMapping.ColumnMappings.Add("[bondshortname]", "[bondshortname]")
            tableMapping.ColumnMappings.Add("[dsply_name]", "[dsply_name]")
            tableMapping.ColumnMappings.Add("[include]", "[include]")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [pid], [bid], [ric], [descr], [payments], [rates], [bondshortname], [dsply"& _ 
                "_name], [include] FROM [_portfolioByChain]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet._portfolioByChainDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet._portfolioByChainDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet._portfolioByChainDataTable = New BondsDataSet._portfolioByChainDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class _portfolioByHawserTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "_portfolioByHawser"
            tableMapping.ColumnMappings.Add("[pid]", "pid")
            tableMapping.ColumnMappings.Add("[bid]", "[bid]")
            tableMapping.ColumnMappings.Add("[ric]", "[ric]")
            tableMapping.ColumnMappings.Add("[descr]", "[descr]")
            tableMapping.ColumnMappings.Add("[payments]", "[payments]")
            tableMapping.ColumnMappings.Add("[rates]", "[rates]")
            tableMapping.ColumnMappings.Add("[bondshortname]", "[bondshortname]")
            tableMapping.ColumnMappings.Add("[dsply_name]", "[dsply_name]")
            tableMapping.ColumnMappings.Add("[include]", "[include]")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [pid], [bid], [ric], [descr], [payments], [rates], [bondshortname], [dsply"& _ 
                "_name], [include] FROM [_portfolioByHawser]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet._portfolioByHawserDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet._portfolioByHawserDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet._portfolioByHawserDataTable = New BondsDataSet._portfolioByHawserDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ChainsInPortfolioTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ChainsInPortfolio"
            tableMapping.ColumnMappings.Add("[pid]", "pid")
            tableMapping.ColumnMappings.Add("[cid]", "cid")
            tableMapping.ColumnMappings.Add("[chain_name]", "chain_name")
            tableMapping.ColumnMappings.Add("[include]", "include")
            tableMapping.ColumnMappings.Add("[color]", "color")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [pid], [cid], [chain_name], [include], [color] FROM [ChainsInPortfolio]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet.ChainsInPortfolioDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet.ChainsInPortfolioDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet.ChainsInPortfolioDataTable = New BondsDataSet.ChainsInPortfolioDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class HawsersInPortfolioTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "HawsersInPortfolio"
            tableMapping.ColumnMappings.Add("[pid]", "pid")
            tableMapping.ColumnMappings.Add("[hid]", "hid")
            tableMapping.ColumnMappings.Add("[hawser_name]", "hawser_name")
            tableMapping.ColumnMappings.Add("[include]", "include")
            tableMapping.ColumnMappings.Add("[color]", "color")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [pid], [hid], [hawser_name], [include], [color] FROM [HawsersInPortfolio]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet.HawsersInPortfolioDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet.HawsersInPortfolioDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet.HawsersInPortfolioDataTable = New BondsDataSet.HawsersInPortfolioDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class portfolio_to_bondTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "portfolio_to_bond"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("id_portfolio", "id_portfolio")
            tableMapping.ColumnMappings.Add("include", "include")
            tableMapping.ColumnMappings.Add("bond_ric", "bond_ric")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[portfolio_to_bond] WHERE (([id] = @Or"& _ 
                "iginal_id) AND ((@IsNull_id_portfolio = 1 AND [id_portfolio] IS NULL) OR ([id_po"& _ 
                "rtfolio] = @Original_id_portfolio)) AND ((@IsNull_include = 1 AND [include] IS N"& _ 
                "ULL) OR ([include] = @Original_include)) AND ((@IsNull_bond_ric = 1 AND [bond_ri"& _ 
                "c] IS NULL) OR ([bond_ric] = @Original_bond_ric)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_id_portfolio"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "id_portfolio"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_portfolio"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_portfolio"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_include"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "include"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_include"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "include"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bond_ric"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bond_ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bond_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "bond_ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[portfolio_to_bond] ([id], [id_portfol"& _ 
                "io], [include], [bond_ric]) VALUES (@id, @id_portfolio, @include, @bond_ric)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_portfolio"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_portfolio"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@include"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "include"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bond_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "bond_ric"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[portfolio_to_bond] SET [id] = @id, [id_por"& _ 
                "tfolio] = @id_portfolio, [include] = @include, [bond_ric] = @bond_ric WHERE (([i"& _ 
                "d] = @Original_id) AND ((@IsNull_id_portfolio = 1 AND [id_portfolio] IS NULL) OR"& _ 
                " ([id_portfolio] = @Original_id_portfolio)) AND ((@IsNull_include = 1 AND [inclu"& _ 
                "de] IS NULL) OR ([include] = @Original_include)) AND ((@IsNull_bond_ric = 1 AND "& _ 
                "[bond_ric] IS NULL) OR ([bond_ric] = @Original_bond_ric)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_portfolio"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_portfolio"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@include"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "include"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bond_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "bond_ric"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_id_portfolio"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "id_portfolio"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_portfolio"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_portfolio"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_include"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "include"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_include"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "include"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bond_ric"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bond_ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bond_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "bond_ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id], [id_portfolio], [include], [bond_ric] FROM [portfolio_to_bond]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM  [portfolio_to_bond] WHERE ([id] = @Original_id)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "INSERT INTO [portfolio_to_bond] ( [id_portfolio], [bond_ric], [include]) VALUES ("& _ 
                " @id_portfolio, @bond_ric, @include)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_portfolio"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id_portfolio"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bond_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "bond_ric"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@include"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.Size = 1
            param.SourceColumn = "include"
            Me._commandCollection(2).Parameters.Add(param)
            Me._commandCollection(3) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "DELETE FROM [portfolio_to_bond] WHERE ([bond_ric] = @Original_bond_ric) AND  ([id"& _ 
                "_portfolio] = @Original_id_portfolio) "
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bond_ric"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "bond_ric"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_portfolio"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id_portfolio"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(3).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet.portfolio_to_bondDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet.portfolio_to_bondDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet.portfolio_to_bondDataTable = New BondsDataSet.portfolio_to_bondDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As BondsDataSet.portfolio_to_bondDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As BondsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "portfolio_to_bond")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_id_portfolio As Global.System.Nullable(Of Long), ByVal Original_include As Global.System.Nullable(Of Boolean), ByVal Original_bond_ric As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_id_portfolio.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_id_portfolio.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_include.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_include.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_bond_ric Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_bond_ric,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Long, ByVal id_portfolio As Global.System.Nullable(Of Long), ByVal include As Global.System.Nullable(Of Boolean), ByVal bond_ric As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id,Long)
            If (id_portfolio.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(id_portfolio.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (include.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(include.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (bond_ric Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(bond_ric,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id As Long, ByVal id_portfolio As Global.System.Nullable(Of Long), ByVal include As Global.System.Nullable(Of Boolean), ByVal bond_ric As String, ByVal Original_id As Long, ByVal Original_id_portfolio As Global.System.Nullable(Of Long), ByVal Original_include As Global.System.Nullable(Of Boolean), ByVal Original_bond_ric As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id,Long)
            If (id_portfolio.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(id_portfolio.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (include.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(include.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (bond_ric Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(bond_ric,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_id,Long)
            If (Original_id_portfolio.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_id_portfolio.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_include.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_include.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_bond_ric Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_bond_ric,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id_portfolio As Global.System.Nullable(Of Long), ByVal include As Global.System.Nullable(Of Boolean), ByVal bond_ric As String, ByVal Original_id As Long, ByVal Original_id_portfolio As Global.System.Nullable(Of Long), ByVal Original_include As Global.System.Nullable(Of Boolean), ByVal Original_bond_ric As String) As Integer
            Return Me.Update(Original_id, id_portfolio, include, bond_ric, Original_id, Original_id_portfolio, Original_include, Original_bond_ric)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteLinkByPortfolio(ByVal Original_id As Long) As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(Original_id,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertLink(ByVal id_portfolio As Global.System.Nullable(Of Long), ByVal bond_ric As String, ByVal include As Global.System.Nullable(Of Boolean)) As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(2)
            If (id_portfolio.HasValue = true) Then
                command.Parameters(0).Value = CType(id_portfolio.Value,Long)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (bond_ric Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(bond_ric,String)
            End If
            If (include.HasValue = true) Then
                command.Parameters(2).Value = CType(include.Value,Boolean)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function RemoveLink(ByVal Original_bond_ric As String, ByVal Original_id_portfolio As Global.System.Nullable(Of Long)) As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(3)
            If (Original_bond_ric Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(Original_bond_ric,String)
            End If
            If (Original_id_portfolio.HasValue = true) Then
                command.Parameters(1).Value = CType(Original_id_portfolio.Value,Long)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class portfolio_to_chainTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "portfolio_to_chain"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("id_portfolio", "id_portfolio")
            tableMapping.ColumnMappings.Add("id_chain", "id_chain")
            tableMapping.ColumnMappings.Add("include", "include")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[portfolio_to_chain] WHERE (([id] = @O"& _ 
                "riginal_id) AND ((@IsNull_id_portfolio = 1 AND [id_portfolio] IS NULL) OR ([id_p"& _ 
                "ortfolio] = @Original_id_portfolio)) AND ((@IsNull_id_chain = 1 AND [id_chain] I"& _ 
                "S NULL) OR ([id_chain] = @Original_id_chain)) AND ((@IsNull_include = 1 AND [inc"& _ 
                "lude] IS NULL) OR ([include] = @Original_include)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_id_portfolio"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "id_portfolio"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_portfolio"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_portfolio"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_id_chain"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "id_chain"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_chain"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_chain"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_include"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "include"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_include"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "include"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[portfolio_to_chain] ([id], [id_portfo"& _ 
                "lio], [id_chain], [include]) VALUES (@id, @id_portfolio, @id_chain, @include)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_portfolio"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_portfolio"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_chain"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_chain"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@include"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "include"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[portfolio_to_chain] SET [id] = @id, [id_po"& _ 
                "rtfolio] = @id_portfolio, [id_chain] = @id_chain, [include] = @include WHERE ((["& _ 
                "id] = @Original_id) AND ((@IsNull_id_portfolio = 1 AND [id_portfolio] IS NULL) O"& _ 
                "R ([id_portfolio] = @Original_id_portfolio)) AND ((@IsNull_id_chain = 1 AND [id_"& _ 
                "chain] IS NULL) OR ([id_chain] = @Original_id_chain)) AND ((@IsNull_include = 1 "& _ 
                "AND [include] IS NULL) OR ([include] = @Original_include)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_portfolio"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_portfolio"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_chain"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_chain"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@include"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "include"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_id_portfolio"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "id_portfolio"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_portfolio"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_portfolio"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_id_chain"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "id_chain"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_chain"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_chain"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_include"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "include"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_include"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "include"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id], [id_portfolio], [id_chain], [include] FROM [portfolio_to_chain]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM [portfolio_to_chain] WHERE ([id] = @Original_id)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "INSERT INTO [portfolio_to_chain] ( [id_portfolio], [id_chain], [include]) VALUES "& _ 
                "( @id_portfolio, @id_chain, @include)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_portfolio"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id_portfolio"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_chain"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id_chain"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@include"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.Size = 1
            param.SourceColumn = "include"
            Me._commandCollection(2).Parameters.Add(param)
            Me._commandCollection(3) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "DELETE FROM [portfolio_to_chain] WHERE ([id_chain] = @Original_id_chain) AND  ([i"& _ 
                "d_portfolio] = @Original_id_portfolio) "
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_chain"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id_chain"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_portfolio"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id_portfolio"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(3).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet.portfolio_to_chainDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet.portfolio_to_chainDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet.portfolio_to_chainDataTable = New BondsDataSet.portfolio_to_chainDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As BondsDataSet.portfolio_to_chainDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As BondsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "portfolio_to_chain")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_id_portfolio As Global.System.Nullable(Of Long), ByVal Original_id_chain As Global.System.Nullable(Of Long), ByVal Original_include As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_id_portfolio.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_id_portfolio.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_id_chain.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_id_chain.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_include.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_include.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Long, ByVal id_portfolio As Global.System.Nullable(Of Long), ByVal id_chain As Global.System.Nullable(Of Long), ByVal include As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id,Long)
            If (id_portfolio.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(id_portfolio.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (id_chain.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(id_chain.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (include.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(include.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id As Long, ByVal id_portfolio As Global.System.Nullable(Of Long), ByVal id_chain As Global.System.Nullable(Of Long), ByVal include As Global.System.Nullable(Of Boolean), ByVal Original_id As Long, ByVal Original_id_portfolio As Global.System.Nullable(Of Long), ByVal Original_id_chain As Global.System.Nullable(Of Long), ByVal Original_include As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id,Long)
            If (id_portfolio.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(id_portfolio.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (id_chain.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(id_chain.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (include.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(include.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_id,Long)
            If (Original_id_portfolio.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_id_portfolio.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_id_chain.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_id_chain.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_include.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_include.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id_portfolio As Global.System.Nullable(Of Long), ByVal id_chain As Global.System.Nullable(Of Long), ByVal include As Global.System.Nullable(Of Boolean), ByVal Original_id As Long, ByVal Original_id_portfolio As Global.System.Nullable(Of Long), ByVal Original_id_chain As Global.System.Nullable(Of Long), ByVal Original_include As Global.System.Nullable(Of Boolean)) As Integer
            Return Me.Update(Original_id, id_portfolio, id_chain, include, Original_id, Original_id_portfolio, Original_id_chain, Original_include)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteLinkByPortfolio(ByVal Original_id As Long) As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(Original_id,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertLink(ByVal id_portfolio As Global.System.Nullable(Of Long), ByVal id_chain As Global.System.Nullable(Of Long), ByVal include As Global.System.Nullable(Of Boolean)) As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(2)
            If (id_portfolio.HasValue = true) Then
                command.Parameters(0).Value = CType(id_portfolio.Value,Long)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (id_chain.HasValue = true) Then
                command.Parameters(1).Value = CType(id_chain.Value,Long)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (include.HasValue = true) Then
                command.Parameters(2).Value = CType(include.Value,Boolean)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function RemoveLink(ByVal Original_id_chain As Global.System.Nullable(Of Long), ByVal Original_id_portfolio As Global.System.Nullable(Of Long)) As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(3)
            If (Original_id_chain.HasValue = true) Then
                command.Parameters(0).Value = CType(Original_id_chain.Value,Long)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Original_id_portfolio.HasValue = true) Then
                command.Parameters(1).Value = CType(Original_id_portfolio.Value,Long)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class portfolio_to_hawserTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "portfolio_to_hawser"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("id_portfolio", "id_portfolio")
            tableMapping.ColumnMappings.Add("id_hawser", "id_hawser")
            tableMapping.ColumnMappings.Add("include", "include")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[portfolio_to_hawser] WHERE (([id] = @"& _ 
                "Original_id) AND ((@IsNull_id_portfolio = 1 AND [id_portfolio] IS NULL) OR ([id_"& _ 
                "portfolio] = @Original_id_portfolio)) AND ((@IsNull_id_hawser = 1 AND [id_hawser"& _ 
                "] IS NULL) OR ([id_hawser] = @Original_id_hawser)) AND ((@IsNull_include = 1 AND"& _ 
                " [include] IS NULL) OR ([include] = @Original_include)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_id_portfolio"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "id_portfolio"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_portfolio"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_portfolio"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_id_hawser"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "id_hawser"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_hawser"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_hawser"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_include"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "include"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_include"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "include"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[portfolio_to_hawser] ([id], [id_portf"& _ 
                "olio], [id_hawser], [include]) VALUES (@id, @id_portfolio, @id_hawser, @include)"& _ 
                ""
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_portfolio"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_portfolio"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_hawser"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_hawser"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@include"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "include"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[portfolio_to_hawser] SET [id] = @id, [id_p"& _ 
                "ortfolio] = @id_portfolio, [id_hawser] = @id_hawser, [include] = @include WHERE "& _ 
                "(([id] = @Original_id) AND ((@IsNull_id_portfolio = 1 AND [id_portfolio] IS NULL"& _ 
                ") OR ([id_portfolio] = @Original_id_portfolio)) AND ((@IsNull_id_hawser = 1 AND "& _ 
                "[id_hawser] IS NULL) OR ([id_hawser] = @Original_id_hawser)) AND ((@IsNull_inclu"& _ 
                "de = 1 AND [include] IS NULL) OR ([include] = @Original_include)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_portfolio"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_portfolio"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_hawser"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_hawser"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@include"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "include"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_id_portfolio"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "id_portfolio"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_portfolio"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_portfolio"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_id_hawser"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "id_hawser"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_hawser"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_hawser"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_include"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "include"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_include"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "include"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id], [id_portfolio], [id_hawser], [include] FROM [portfolio_to_hawser]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM [portfolio_to_hawser] WHERE ([id] = @Original_id) "
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "INSERT INTO [portfolio_to_hawser] ( [id_portfolio], [id_hawser], [include]) VALUE"& _ 
                "S ( @id_portfolio, @id_hawser, @include)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_portfolio"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id_portfolio"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_hawser"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id_hawser"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@include"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.Size = 1
            param.SourceColumn = "include"
            Me._commandCollection(2).Parameters.Add(param)
            Me._commandCollection(3) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "DELETE FROM [portfolio_to_hawser] WHERE ([id_hawser] = @Original_id_hawser) AND  "& _ 
                "([id_portfolio] = @Original_id_portfolio) "
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_hawser"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id_hawser"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_portfolio"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "id_portfolio"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(3).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet.portfolio_to_hawserDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet.portfolio_to_hawserDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet.portfolio_to_hawserDataTable = New BondsDataSet.portfolio_to_hawserDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As BondsDataSet.portfolio_to_hawserDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As BondsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "portfolio_to_hawser")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_id_portfolio As Global.System.Nullable(Of Long), ByVal Original_id_hawser As Global.System.Nullable(Of Long), ByVal Original_include As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_id_portfolio.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_id_portfolio.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_id_hawser.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_id_hawser.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_include.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_include.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Long, ByVal id_portfolio As Global.System.Nullable(Of Long), ByVal id_hawser As Global.System.Nullable(Of Long), ByVal include As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id,Long)
            If (id_portfolio.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(id_portfolio.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (id_hawser.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(id_hawser.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (include.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(include.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id As Long, ByVal id_portfolio As Global.System.Nullable(Of Long), ByVal id_hawser As Global.System.Nullable(Of Long), ByVal include As Global.System.Nullable(Of Boolean), ByVal Original_id As Long, ByVal Original_id_portfolio As Global.System.Nullable(Of Long), ByVal Original_id_hawser As Global.System.Nullable(Of Long), ByVal Original_include As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id,Long)
            If (id_portfolio.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(id_portfolio.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (id_hawser.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(id_hawser.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (include.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(include.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_id,Long)
            If (Original_id_portfolio.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_id_portfolio.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_id_hawser.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_id_hawser.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_include.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_include.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id_portfolio As Global.System.Nullable(Of Long), ByVal id_hawser As Global.System.Nullable(Of Long), ByVal include As Global.System.Nullable(Of Boolean), ByVal Original_id As Long, ByVal Original_id_portfolio As Global.System.Nullable(Of Long), ByVal Original_id_hawser As Global.System.Nullable(Of Long), ByVal Original_include As Global.System.Nullable(Of Boolean)) As Integer
            Return Me.Update(Original_id, id_portfolio, id_hawser, include, Original_id, Original_id_portfolio, Original_id_hawser, Original_include)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteLinkByPortfolio(ByVal Original_id As Long) As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(Original_id,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertLink(ByVal id_portfolio As Global.System.Nullable(Of Long), ByVal id_hawser As Global.System.Nullable(Of Long), ByVal include As Global.System.Nullable(Of Boolean)) As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(2)
            If (id_portfolio.HasValue = true) Then
                command.Parameters(0).Value = CType(id_portfolio.Value,Long)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (id_hawser.HasValue = true) Then
                command.Parameters(1).Value = CType(id_hawser.Value,Long)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (include.HasValue = true) Then
                command.Parameters(2).Value = CType(include.Value,Boolean)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function RemoveLink(ByVal Original_id_hawser As Global.System.Nullable(Of Long), ByVal Original_id_portfolio As Global.System.Nullable(Of Long)) As Integer
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(3)
            If (Original_id_hawser.HasValue = true) Then
                command.Parameters(0).Value = CType(Original_id_hawser.Value,Long)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Original_id_portfolio.HasValue = true) Then
                command.Parameters(1).Value = CType(Original_id_portfolio.Value,Long)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PortfolioSourcesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PortfolioSources"
            tableMapping.ColumnMappings.Add("[portfolioID]", "portfolioID")
            tableMapping.ColumnMappings.Add("[whereFrom]", "whereFrom")
            tableMapping.ColumnMappings.Add("[fromID]", "fromID")
            tableMapping.ColumnMappings.Add("bid_field", "bid_field")
            tableMapping.ColumnMappings.Add("ask_field", "ask_field")
            tableMapping.ColumnMappings.Add("last_field", "last_field")
            tableMapping.ColumnMappings.Add("hist_field", "hist_field")
            tableMapping.ColumnMappings.Add("portfolio_name", "portfolio_name")
            tableMapping.ColumnMappings.Add("ric_structure", "ric_structure")
            tableMapping.ColumnMappings.Add("whereFromName", "whereFromName")
            tableMapping.ColumnMappings.Add("whereFromDescr", "whereFromDescr")
            tableMapping.ColumnMappings.Add("color", "color")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [portfolioID], [whereFrom], [fromID], bid_field, ask_field, last_field, hi"& _ 
                "st_field, portfolio_name, ric_structure, whereFromName, whereFromDescr, color FR"& _ 
                "OM [PortfolioSources]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet.PortfolioSourcesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet.PortfolioSourcesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet.PortfolioSourcesDataTable = New BondsDataSet.PortfolioSourcesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class _ricsInChainTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "_ricsInChain"
            tableMapping.ColumnMappings.Add("[id]", "id")
            tableMapping.ColumnMappings.Add("[ric]", "ric")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id], [ric] FROM [_ricsInChain]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet._ricsInChainDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet._ricsInChainDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet._ricsInChainDataTable = New BondsDataSet._ricsInChainDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class _ricsInHawserTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "_ricsInHawser"
            tableMapping.ColumnMappings.Add("[id]", "id")
            tableMapping.ColumnMappings.Add("[ric]", "ric")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.YieldMap.My.Settings.Default.bondsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id], [ric] FROM [_ricsInHawser]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BondsDataSet._ricsInHawserDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BondsDataSet._ricsInHawserDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BondsDataSet._ricsInHawserDataTable = New BondsDataSet._ricsInHawserDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _bondTableAdapter As bondTableAdapter
        
        Private _portfolioTableAdapter As portfolioTableAdapter
        
        Private _chain_itemsTableAdapter As chain_itemsTableAdapter
        
        Private _chainTableAdapter As chainTableAdapter
        
        Private _countryTableAdapter As countryTableAdapter
        
        Private _currencyTableAdapter As currencyTableAdapter
        
        Private _issuerTableAdapter As issuerTableAdapter
        
        Private _settingsTableAdapter As settingsTableAdapter
        
        Private _hawserTableAdapter As hawserTableAdapter
        
        Private _hawser_to_bondTableAdapter As hawser_to_bondTableAdapter
        
        Private _portfolio_to_bondTableAdapter As portfolio_to_bondTableAdapter
        
        Private _portfolio_to_chainTableAdapter As portfolio_to_chainTableAdapter
        
        Private _portfolio_to_hawserTableAdapter As portfolio_to_hawserTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property bondTableAdapter() As bondTableAdapter
            Get
                Return Me._bondTableAdapter
            End Get
            Set
                Me._bondTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property portfolioTableAdapter() As portfolioTableAdapter
            Get
                Return Me._portfolioTableAdapter
            End Get
            Set
                Me._portfolioTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property chain_itemsTableAdapter() As chain_itemsTableAdapter
            Get
                Return Me._chain_itemsTableAdapter
            End Get
            Set
                Me._chain_itemsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property chainTableAdapter() As chainTableAdapter
            Get
                Return Me._chainTableAdapter
            End Get
            Set
                Me._chainTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property countryTableAdapter() As countryTableAdapter
            Get
                Return Me._countryTableAdapter
            End Get
            Set
                Me._countryTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property currencyTableAdapter() As currencyTableAdapter
            Get
                Return Me._currencyTableAdapter
            End Get
            Set
                Me._currencyTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property issuerTableAdapter() As issuerTableAdapter
            Get
                Return Me._issuerTableAdapter
            End Get
            Set
                Me._issuerTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property settingsTableAdapter() As settingsTableAdapter
            Get
                Return Me._settingsTableAdapter
            End Get
            Set
                Me._settingsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property hawserTableAdapter() As hawserTableAdapter
            Get
                Return Me._hawserTableAdapter
            End Get
            Set
                Me._hawserTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property hawser_to_bondTableAdapter() As hawser_to_bondTableAdapter
            Get
                Return Me._hawser_to_bondTableAdapter
            End Get
            Set
                Me._hawser_to_bondTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property portfolio_to_bondTableAdapter() As portfolio_to_bondTableAdapter
            Get
                Return Me._portfolio_to_bondTableAdapter
            End Get
            Set
                Me._portfolio_to_bondTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property portfolio_to_chainTableAdapter() As portfolio_to_chainTableAdapter
            Get
                Return Me._portfolio_to_chainTableAdapter
            End Get
            Set
                Me._portfolio_to_chainTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property portfolio_to_hawserTableAdapter() As portfolio_to_hawserTableAdapter
            Get
                Return Me._portfolio_to_hawserTableAdapter
            End Get
            Set
                Me._portfolio_to_hawserTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._bondTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._bondTableAdapter.Connection) Is Nothing)) Then
                    Return Me._bondTableAdapter.Connection
                End If
                If ((Not (Me._portfolioTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._portfolioTableAdapter.Connection) Is Nothing)) Then
                    Return Me._portfolioTableAdapter.Connection
                End If
                If ((Not (Me._chain_itemsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._chain_itemsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._chain_itemsTableAdapter.Connection
                End If
                If ((Not (Me._chainTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._chainTableAdapter.Connection) Is Nothing)) Then
                    Return Me._chainTableAdapter.Connection
                End If
                If ((Not (Me._countryTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._countryTableAdapter.Connection) Is Nothing)) Then
                    Return Me._countryTableAdapter.Connection
                End If
                If ((Not (Me._currencyTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._currencyTableAdapter.Connection) Is Nothing)) Then
                    Return Me._currencyTableAdapter.Connection
                End If
                If ((Not (Me._issuerTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._issuerTableAdapter.Connection) Is Nothing)) Then
                    Return Me._issuerTableAdapter.Connection
                End If
                If ((Not (Me._settingsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._settingsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._settingsTableAdapter.Connection
                End If
                If ((Not (Me._hawserTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._hawserTableAdapter.Connection) Is Nothing)) Then
                    Return Me._hawserTableAdapter.Connection
                End If
                If ((Not (Me._hawser_to_bondTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._hawser_to_bondTableAdapter.Connection) Is Nothing)) Then
                    Return Me._hawser_to_bondTableAdapter.Connection
                End If
                If ((Not (Me._portfolio_to_bondTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._portfolio_to_bondTableAdapter.Connection) Is Nothing)) Then
                    Return Me._portfolio_to_bondTableAdapter.Connection
                End If
                If ((Not (Me._portfolio_to_chainTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._portfolio_to_chainTableAdapter.Connection) Is Nothing)) Then
                    Return Me._portfolio_to_chainTableAdapter.Connection
                End If
                If ((Not (Me._portfolio_to_hawserTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._portfolio_to_hawserTableAdapter.Connection) Is Nothing)) Then
                    Return Me._portfolio_to_hawserTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._bondTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._portfolioTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._chain_itemsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._chainTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._countryTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._currencyTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._issuerTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._settingsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._hawserTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._hawser_to_bondTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._portfolio_to_bondTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._portfolio_to_chainTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._portfolio_to_hawserTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As BondsDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._hawser_to_bondTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.hawser_to_bond.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._hawser_to_bondTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._portfolio_to_bondTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.portfolio_to_bond.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._portfolio_to_bondTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._portfolio_to_chainTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.portfolio_to_chain.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._portfolio_to_chainTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._portfolio_to_hawserTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.portfolio_to_hawser.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._portfolio_to_hawserTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._chainTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.chain.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._chainTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._countryTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.country.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._countryTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._currencyTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.currency.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._currencyTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._bondTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.bond.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._bondTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._portfolioTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.portfolio.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._portfolioTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._chain_itemsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.chain_items.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._chain_itemsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._hawserTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.hawser.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._hawserTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._issuerTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.issuer.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._issuerTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._settingsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.settings.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._settingsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As BondsDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._hawser_to_bondTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.hawser_to_bond.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._hawser_to_bondTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._portfolio_to_bondTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.portfolio_to_bond.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._portfolio_to_bondTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._portfolio_to_chainTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.portfolio_to_chain.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._portfolio_to_chainTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._portfolio_to_hawserTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.portfolio_to_hawser.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._portfolio_to_hawserTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._chainTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.chain.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._chainTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._countryTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.country.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._countryTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._currencyTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.currency.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._currencyTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._bondTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.bond.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._bondTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._portfolioTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.portfolio.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._portfolioTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._chain_itemsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.chain_items.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._chain_itemsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._hawserTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.hawser.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._hawserTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._issuerTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.issuer.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._issuerTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._settingsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.settings.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._settingsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As BondsDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._settingsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.settings.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._settingsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._issuerTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.issuer.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._issuerTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._hawserTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.hawser.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._hawserTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._chain_itemsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.chain_items.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._chain_itemsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._portfolioTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.portfolio.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._portfolioTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._bondTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.bond.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._bondTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._currencyTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.currency.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._currencyTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._countryTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.country.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._countryTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._chainTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.chain.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._chainTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._portfolio_to_hawserTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.portfolio_to_hawser.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._portfolio_to_hawserTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._portfolio_to_chainTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.portfolio_to_chain.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._portfolio_to_chainTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._portfolio_to_bondTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.portfolio_to_bond.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._portfolio_to_bondTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._hawser_to_bondTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.hawser_to_bond.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._hawser_to_bondTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As BondsDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._bondTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._bondTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._portfolioTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._portfolioTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._chain_itemsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._chain_itemsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._chainTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._chainTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._countryTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._countryTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._currencyTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._currencyTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._issuerTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._issuerTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._settingsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._settingsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._hawserTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._hawserTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._hawser_to_bondTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._hawser_to_bondTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._portfolio_to_bondTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._portfolio_to_bondTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._portfolio_to_chainTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._portfolio_to_chainTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._portfolio_to_hawserTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._portfolio_to_hawserTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager не содержит сведений о подключении. Укажите для каждого адапт"& _ 
                        "ера таблицы TableAdapterManager допустимый экземпляр адаптера таблицы.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("Не удается начать транзакцию. Текущее соединение данных не поддерживает транзакци"& _ 
                        "и или текущее состояние не позволяет начать транзакцию.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._bondTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._bondTableAdapter, Me._bondTableAdapter.Connection)
                    Me._bondTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._bondTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._bondTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._bondTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._bondTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._portfolioTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._portfolioTableAdapter, Me._portfolioTableAdapter.Connection)
                    Me._portfolioTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._portfolioTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._portfolioTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._portfolioTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._portfolioTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._chain_itemsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._chain_itemsTableAdapter, Me._chain_itemsTableAdapter.Connection)
                    Me._chain_itemsTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._chain_itemsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._chain_itemsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._chain_itemsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._chain_itemsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._chainTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._chainTableAdapter, Me._chainTableAdapter.Connection)
                    Me._chainTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._chainTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._chainTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._chainTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._chainTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._countryTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._countryTableAdapter, Me._countryTableAdapter.Connection)
                    Me._countryTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._countryTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._countryTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._countryTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._countryTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._currencyTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._currencyTableAdapter, Me._currencyTableAdapter.Connection)
                    Me._currencyTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._currencyTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._currencyTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._currencyTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._currencyTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._issuerTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._issuerTableAdapter, Me._issuerTableAdapter.Connection)
                    Me._issuerTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._issuerTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._issuerTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._issuerTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._issuerTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._settingsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._settingsTableAdapter, Me._settingsTableAdapter.Connection)
                    Me._settingsTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._settingsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._settingsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._settingsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._settingsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._hawserTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._hawserTableAdapter, Me._hawserTableAdapter.Connection)
                    Me._hawserTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._hawserTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._hawserTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._hawserTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._hawserTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._hawser_to_bondTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._hawser_to_bondTableAdapter, Me._hawser_to_bondTableAdapter.Connection)
                    Me._hawser_to_bondTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._hawser_to_bondTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._hawser_to_bondTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._hawser_to_bondTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._hawser_to_bondTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._portfolio_to_bondTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._portfolio_to_bondTableAdapter, Me._portfolio_to_bondTableAdapter.Connection)
                    Me._portfolio_to_bondTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._portfolio_to_bondTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._portfolio_to_bondTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._portfolio_to_bondTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._portfolio_to_bondTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._portfolio_to_chainTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._portfolio_to_chainTableAdapter, Me._portfolio_to_chainTableAdapter.Connection)
                    Me._portfolio_to_chainTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._portfolio_to_chainTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._portfolio_to_chainTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._portfolio_to_chainTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._portfolio_to_chainTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._portfolio_to_hawserTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._portfolio_to_hawserTableAdapter, Me._portfolio_to_hawserTableAdapter.Connection)
                    Me._portfolio_to_hawserTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._portfolio_to_hawserTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._portfolio_to_hawserTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._portfolio_to_hawserTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._portfolio_to_hawserTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._bondTableAdapter) Is Nothing) Then
                    Me._bondTableAdapter.Connection = CType(revertConnections(Me._bondTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._bondTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._portfolioTableAdapter) Is Nothing) Then
                    Me._portfolioTableAdapter.Connection = CType(revertConnections(Me._portfolioTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._portfolioTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._chain_itemsTableAdapter) Is Nothing) Then
                    Me._chain_itemsTableAdapter.Connection = CType(revertConnections(Me._chain_itemsTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._chain_itemsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._chainTableAdapter) Is Nothing) Then
                    Me._chainTableAdapter.Connection = CType(revertConnections(Me._chainTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._chainTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._countryTableAdapter) Is Nothing) Then
                    Me._countryTableAdapter.Connection = CType(revertConnections(Me._countryTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._countryTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._currencyTableAdapter) Is Nothing) Then
                    Me._currencyTableAdapter.Connection = CType(revertConnections(Me._currencyTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._currencyTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._issuerTableAdapter) Is Nothing) Then
                    Me._issuerTableAdapter.Connection = CType(revertConnections(Me._issuerTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._issuerTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._settingsTableAdapter) Is Nothing) Then
                    Me._settingsTableAdapter.Connection = CType(revertConnections(Me._settingsTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._settingsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._hawserTableAdapter) Is Nothing) Then
                    Me._hawserTableAdapter.Connection = CType(revertConnections(Me._hawserTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._hawserTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._hawser_to_bondTableAdapter) Is Nothing) Then
                    Me._hawser_to_bondTableAdapter.Connection = CType(revertConnections(Me._hawser_to_bondTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._hawser_to_bondTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._portfolio_to_bondTableAdapter) Is Nothing) Then
                    Me._portfolio_to_bondTableAdapter.Connection = CType(revertConnections(Me._portfolio_to_bondTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._portfolio_to_bondTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._portfolio_to_chainTableAdapter) Is Nothing) Then
                    Me._portfolio_to_chainTableAdapter.Connection = CType(revertConnections(Me._portfolio_to_chainTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._portfolio_to_chainTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._portfolio_to_hawserTableAdapter) Is Nothing) Then
                    Me._portfolio_to_hawserTableAdapter.Connection = CType(revertConnections(Me._portfolio_to_hawserTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._portfolio_to_hawserTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
